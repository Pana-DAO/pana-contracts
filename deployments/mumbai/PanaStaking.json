{
  "address": "0x725365B53c50f0273825947096C71Ab791d07eb9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pana",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sPana",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_karsha",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_epochLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_firstEpochNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_firstEpochTime",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_authority",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IPanaAuthority",
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "AuthorityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "distributor",
          "type": "address"
        }
      ],
      "name": "DistributorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "warmup",
          "type": "uint256"
        }
      ],
      "name": "WarmupSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "KARSHA",
      "outputs": [
        {
          "internalType": "contract IKarsha",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PANA",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aKarshaRedemption",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "allow",
          "type": "bool"
        }
      ],
      "name": "allowExternalStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "internalType": "contract IPanaAuthority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bondDepositor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "claimRedeemable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributor",
      "outputs": [
        {
          "internalType": "contract IDistributor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "distribute",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "index",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockPeriod",
          "type": "uint256"
        }
      ],
      "name": "lockedStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lockedStakeInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gons",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "lock",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pKarshaRedemption",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sPANA",
      "outputs": [
        {
          "internalType": "contract IsPana",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "secondsToNextEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_aKarshaRedemption",
          "type": "address"
        }
      ],
      "name": "setAKarshaRedemption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPanaAuthority",
          "name": "_newAuthority",
          "type": "address"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bondDepositor",
          "type": "address"
        }
      ],
      "name": "setBondDepositor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_distributor",
          "type": "address"
        }
      ],
      "name": "setDistributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pKarshaRedemption",
          "type": "address"
        }
      ],
      "name": "setPKarshaRedemption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supplyInLocked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_trigger",
          "type": "bool"
        }
      ],
      "name": "unstake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5b9071706c739b04091270938ebcc8bc65f0bb00ea4f61e80e2534cd16090a7c",
  "receipt": {
    "to": null,
    "from": "0x2d494Cb0a923009C471B9512571048560a44556A",
    "contractAddress": "0x725365B53c50f0273825947096C71Ab791d07eb9",
    "transactionIndex": 1,
    "gasUsed": "1857985",
    "logsBloom": "0x
    "blockHash": "0x7f2713385c16f6cc701fcbb7421b60ed847cf41ef224c2e75d59dc2b346b20be",
    "transactionHash": "0x5b9071706c739b04091270938ebcc8bc65f0bb00ea4f61e80e2534cd16090a7c",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 24247487,
        "transactionHash": "0x5b9071706c739b04091270938ebcc8bc65f0bb00ea4f61e80e2534cd16090a7c",
        "address": "0x725365B53c50f0273825947096C71Ab791d07eb9",
        "topics": [
          "0x2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad",
          "0x0000000000000000000000004f2189548e05c09bd865c1d56f1773caf28d47b6"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x7f2713385c16f6cc701fcbb7421b60ed847cf41ef224c2e75d59dc2b346b20be"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 24247487,
        "transactionHash": "0x5b9071706c739b04091270938ebcc8bc65f0bb00ea4f61e80e2534cd16090a7c",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000002d494cb0a923009c471b9512571048560a44556a",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000034ce9ebe7f81f8000000000000000000000000000000000000000000000000766d0e4291138e1800000000000000000000000000000000000000000000055f680c78d4c616f72f00000000000000000000000000000000000000000000000076383fa3d2940c2000000000000000000000000000000000000000000000055f6841477384967927",
        "logIndex": 4,
        "blockHash": "0x7f2713385c16f6cc701fcbb7421b60ed847cf41ef224c2e75d59dc2b346b20be"
      }
    ],
    "blockNumber": 24247487,
    "cumulativeGasUsed": "1903249",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa14fd01d3450Fd7385f8d78ecF3F2Fa80106B43D",
    "0xC1395F6534F0706970C800353C12D9848D72218b",
    "0xcf03390e4291467fa53ed4f66E74D6517e47eB0a",
    "28800",
    "0",
    1643140142,
    "0x4f2189548E05c09Bd865c1D56f1773caF28d47B6"
  ],
  "solcInputHash": "a5bd4cccb7f6499229770175b06b1c23",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pana\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sPana\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_karsha\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_epochLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_firstEpochNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_firstEpochTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_authority\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IPanaAuthority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"distributor\",\"type\":\"address\"}],\"name\":\"DistributorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"warmup\",\"type\":\"uint256\"}],\"name\":\"WarmupSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"KARSHA\",\"outputs\":[{\"internalType\":\"contract IKarsha\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PANA\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aKarshaRedemption\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"allowExternalStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract IPanaAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondDepositor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimRedeemable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"contract IDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distribute\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriod\",\"type\":\"uint256\"}],\"name\":\"lockedStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedStakeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gons\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"lock\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pKarshaRedemption\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sPANA\",\"outputs\":[{\"internalType\":\"contract IsPana\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondsToNextEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aKarshaRedemption\",\"type\":\"address\"}],\"name\":\"setAKarshaRedemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPanaAuthority\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bondDepositor\",\"type\":\"address\"}],\"name\":\"setBondDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"}],\"name\":\"setDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pKarshaRedemption\",\"type\":\"address\"}],\"name\":\"setPKarshaRedemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyInLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_trigger\",\"type\":\"bool\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimRedeemable(address)\":{\"params\":{\"_to\":\"address\"},\"returns\":{\"_0\":\"uint\"}},\"index()\":{\"returns\":{\"_0\":\"uint\"}},\"lockedStake(address,uint256,uint256)\":{\"params\":{\"_amount\":\"uint\",\"_to\":\"address\",\"lockPeriod\":\"uint\"},\"returns\":{\"_0\":\"uint\"}},\"rebase()\":{\"returns\":{\"_0\":\"uint256\"}},\"setDistributor(address)\":{\"params\":{\"_distributor\":\"address\"}},\"stake(address,uint256)\":{\"params\":{\"_amount\":\"uint\",\"_to\":\"address\"},\"returns\":{\"_0\":\"uint\"}},\"unstake(address,uint256,bool)\":{\"params\":{\"_amount\":\"uint\",\"_to\":\"address\",\"_trigger\":\"bool\"},\"returns\":{\"amount_\":\"uint\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimRedeemable(address)\":{\"notice\":\"retrieve stake from lock\"},\"index()\":{\"notice\":\"returns the sPana index, which tracks rebase growth\"},\"lockedStake(address,uint256,uint256)\":{\"notice\":\"stake pana with lock. This function  is restricted to be called only from pKarsha redemption contract \"},\"rebase()\":{\"notice\":\"trigger rebase if epoch over\"},\"secondsToNextEpoch()\":{\"notice\":\"seconds until the next epoch begins\"},\"setDistributor(address)\":{\"notice\":\"sets the contract address for LP staking\"},\"stake(address,uint256)\":{\"notice\":\"stake Pana\"},\"supplyInLocked()\":{\"notice\":\"total supply in locked state\"},\"unstake(address,uint256,bool)\":{\"notice\":\"redeem Pana/sPana for Karsha/Pana\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking.sol\":\"PanaStaking\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.7.5;\\n\\nimport \\\"./libraries/SafeMath.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IsPana.sol\\\";\\nimport \\\"./interfaces/IKarsha.sol\\\";\\nimport \\\"./interfaces/IDistributor.sol\\\";\\n\\nimport \\\"./types/PanaAccessControlled.sol\\\";\\n\\ncontract PanaStaking is PanaAccessControlled {\\n    /* ========== DEPENDENCIES ========== */\\n\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IsPana;\\n    using SafeERC20 for IKarsha;\\n\\n    /* ========== EVENTS ========== */\\n\\n    event DistributorSet(address distributor);\\n    event WarmupSet(uint256 warmup);\\n\\n    /* ========== DATA STRUCTURES ========== */\\n\\n    struct Epoch {\\n        uint256 length; // in seconds\\n        uint256 number; // since inception\\n        uint256 end; // timestamp\\n        uint256 distribute; // amount\\n    }\\n\\n    struct LockedClaim {\\n        uint256 deposit; // if forfeiting\\n        uint256 gons; // staked balance\\n        uint256 expiry; // end of warmup period\\n        bool lock; // prevents further staking if there is unclaimed stake.\\n    }\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IERC20 public immutable PANA;\\n    IsPana public immutable sPANA;\\n    IKarsha public immutable KARSHA;\\n\\n    Epoch public epoch;\\n\\n    IDistributor public distributor;\\n\\n    mapping(address => LockedClaim) public lockedStakeInfo;\\n\\n    uint256 private gonsInLocked;\\n    bool private _allowedExternalStaking;\\n    address public bondDepositor;\\n    address public pKarshaRedemption;\\n    address public aKarshaRedemption;\\n\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(\\n        address _pana,\\n        address _sPana,\\n        address _karsha,\\n        uint256 _epochLength,\\n        uint256 _firstEpochNumber,\\n        uint256 _firstEpochTime,\\n        address _authority\\n    ) PanaAccessControlled(IPanaAuthority(_authority)) {\\n        require(_pana != address(0), \\\"Zero address: PANA\\\");\\n        PANA = IERC20(_pana);\\n        require(_sPana != address(0), \\\"Zero address: sPANA\\\");\\n        sPANA = IsPana(_sPana);\\n        require(_karsha != address(0), \\\"Zero address: KARSHA\\\");\\n        KARSHA = IKarsha(_karsha);\\n\\n        epoch = Epoch({length: _epochLength, number: _firstEpochNumber, end: _firstEpochTime, distribute: 0});\\n\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /**\\n     * @notice stake Pana\\n     * @param _to address\\n     * @param _amount uint\\n     * @return uint\\n     */\\n    function stake(\\n        address _to,\\n        uint256 _amount\\n    ) external returns (uint256) {\\n        // check if external staking is not allowed, only bond depositor should be able to stake it.\\n        if (!_allowedExternalStaking) {\\n            require(msg.sender == bondDepositor || msg.sender == aKarshaRedemption, \\\"External Staking is not allowed\\\");\\n        }\\n\\n        PANA.safeTransferFrom(msg.sender, address(this), _amount);\\n        _amount = _amount.add(rebase()); // add bounty if rebase occurred\\n        return _send(_to, _amount);\\n    }\\n\\n    /**\\n     * @notice stake pana with lock. This function  is restricted to be called only from pKarsha redemption contract \\n     * @param _to address\\n     * @param _amount uint\\n     * @param lockPeriod uint\\n     * @return uint\\n     */\\n    function lockedStake(\\n        address _to,\\n        uint256 _amount, \\n        uint256 lockPeriod\\n    ) external returns (uint256) {\\n        require(msg.sender == pKarshaRedemption, \\\"External staking is not allowed\\\");\\n        LockedClaim memory info = lockedStakeInfo[_to];\\n        require(info.lock == false, \\\"Account has locked or unclaimed stake\\\");        \\n\\n        PANA.safeTransferFrom(msg.sender, address(this), _amount);\\n        _amount = _amount.add(rebase()); // add bounty if rebase occurred\\n        \\n        lockedStakeInfo[_to] = LockedClaim({\\n            deposit: _amount,\\n            gons: sPANA.gonsForBalance(_amount),\\n            expiry: block.timestamp.add(lockPeriod),\\n            lock: true\\n        });\\n\\n        gonsInLocked = gonsInLocked.add(sPANA.gonsForBalance(_amount));\\n\\n        return _amount;\\n\\n    }\\n\\n    /**\\n     * @notice retrieve stake from lock\\n     * @param _to address\\n     * @return uint\\n     */\\n    function claimRedeemable(address _to) external returns (uint256) {\\n        require(msg.sender == pKarshaRedemption, \\\"External claim is not allowed\\\");\\n        LockedClaim memory lockInfo = lockedStakeInfo[_to]; \\n\\n        if (block.timestamp >= lockInfo.expiry && lockInfo.lock ) {\\n            delete lockedStakeInfo[_to];\\n            gonsInLocked = gonsInLocked.sub(lockInfo.gons);\\n\\n            return _send(_to, sPANA.balanceForGons(lockInfo.gons));            \\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice redeem Pana/sPana for Karsha/Pana\\n     * @param _to address\\n     * @param _amount uint\\n     * @param _trigger bool\\n     * @return amount_ uint\\n     */\\n    function unstake(\\n        address _to,\\n        uint256 _amount,\\n        bool _trigger\\n    ) external returns (uint256 amount_) {\\n        amount_ = _amount;\\n        uint256 bounty;\\n        if (_trigger) {\\n            bounty = rebase();\\n        }\\n\\n        KARSHA.burn(msg.sender, _amount); // amount was given in Karsha terms\\n        amount_ = KARSHA.balanceFrom(amount_).add(bounty); // convert amount to Pana terms & add bounty\\n    \\n        require(amount_ <= PANA.balanceOf(address(this)), \\\"Insufficient Pana balance in contract\\\");\\n        PANA.safeTransfer(_to, amount_);\\n    }\\n\\n    /**\\n     * @notice trigger rebase if epoch over\\n     * @return uint256\\n     */\\n    function rebase() public returns (uint256) {\\n        uint256 bounty;\\n        if (epoch.end <= block.timestamp) {\\n            sPANA.rebase(epoch.distribute, epoch.number);\\n\\n            epoch.end = epoch.end.add(epoch.length);\\n            epoch.number++;\\n\\n            if (address(distributor) != address(0)) {\\n                distributor.distribute();\\n                bounty = distributor.retrieveBounty(); // Will mint Pana for this contract if there exists a bounty\\n            }\\n            uint256 balance = PANA.balanceOf(address(this));\\n            uint256 staked = sPANA.circulatingSupply();\\n            if (balance <= staked.add(bounty)) {\\n                epoch.distribute = 0;\\n            } else {\\n                epoch.distribute = balance.sub(staked).sub(bounty);\\n            }\\n        }\\n        return bounty;\\n    }\\n\\n    // Set Depositor Contract after creating Contract\\n    function setBondDepositor(address _bondDepositor) external onlyGovernor {\\n        bondDepositor = _bondDepositor;\\n    }\\n\\n    function setPKarshaRedemption(address _pKarshaRedemption) external onlyGovernor {\\n        pKarshaRedemption = _pKarshaRedemption;\\n    }\\n    \\n    function setAKarshaRedemption(address _aKarshaRedemption) external onlyGovernor {\\n        aKarshaRedemption = _aKarshaRedemption;\\n    }\\n    \\n    // Allow External Staking directly using PANA\\n    function allowExternalStaking(bool allow) external onlyGovernor {\\n        _allowedExternalStaking = allow;\\n    }\\n\\n    /* ========== INTERNAL FUNCTIONS ========== */\\n\\n    /**\\n     * @notice send staker their amount as Karsha\\n     * @param _to address\\n     * @param _amount uint\\n     */\\n    function _send(\\n        address _to,\\n        uint256 _amount\\n    ) internal returns (uint256) {\\n        KARSHA.mint(_to, KARSHA.balanceTo(_amount)); // send as Karsha (convert units from Pana)\\n        return KARSHA.balanceTo(_amount);\\n    }\\n\\n    /* ========== VIEW FUNCTIONS ========== */\\n\\n    /**\\n     * @notice returns the sPana index, which tracks rebase growth\\n     * @return uint\\n     */\\n    function index() public view returns (uint256) {\\n        return sPANA.index();\\n    }\\n    \\n    /**\\n     * @notice total supply in locked state\\n     */\\n    function supplyInLocked() public view returns (uint256) {\\n        return sPANA.balanceForGons(gonsInLocked);\\n    }\\n\\n    /**\\n     * @notice seconds until the next epoch begins\\n     */\\n    function secondsToNextEpoch() external view returns (uint256) {\\n        return epoch.end.sub(block.timestamp);\\n    }\\n\\n    /* ========== MANAGERIAL FUNCTIONS ========== */\\n\\n    /**\\n     * @notice sets the contract address for LP staking\\n     * @param _distributor address\\n     */\\n    function setDistributor(address _distributor) external onlyGovernor {\\n        distributor = IDistributor(_distributor);\\n        emit DistributorSet(_distributor);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xcfbcbed5eb588b325e3da2afdf47cce14df4805abcad2b7df6ea5d0d2516639b\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IDistributor {\\n    function distribute() external;\\n\\n    function bounty() external view returns (uint256);\\n\\n    function retrieveBounty() external returns (uint256);\\n\\n    function nextRewardAt(uint256 _rate) external view returns (uint256);\\n\\n    function nextRewardFor(address _recipient) external view returns (uint256);\\n\\n    function setBounty(uint256 _bounty) external;\\n\\n    function addRecipient(address _recipient, uint256 _rewardRate) external;\\n\\n    function removeRecipient(uint256 _index) external;\\n\\n    function setAdjustment(\\n        uint256 _index,\\n        bool _add,\\n        uint256 _rate,\\n        uint256 _target\\n    ) external;\\n}\\n\",\"keccak256\":\"0xd6fc7153d8030366c99d408843ea948ba7b79c269f809ddbd31b78d7d71751c8\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa142440b0e1c51ece24b6d074ac883b34e1f33a2472773eeaaf4871875904d09\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IKarsha.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IKarsha is IERC20 {\\n  function mint(address _to, uint256 _amount) external;\\n\\n  function burn(address _from, uint256 _amount) external;\\n\\n  function index() external view returns (uint256);\\n  \\n  function balanceOfPANA(address _address) external view returns (uint256);\\n\\n  function balanceFrom(uint256 _amount) external view returns (uint256);\\n\\n  function balanceTo(uint256 _amount) external view returns (uint256);\\n\\n  function migrate( address _staking, address _sPana ) external;\\n}\\n\",\"keccak256\":\"0x778893ec57ead3323dfe827dd2db67a9038bf9a28164e8e906482ddfe5ab8ac8\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IPanaAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IPanaAuthority {\\n    /* ========== EVENTS ========== */\\n    \\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);    \\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);    \\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);    \\n\\n    event GovernorPulled(address indexed from, address indexed to);\\n    event GuardianPulled(address indexed from, address indexed to);\\n    event PolicyPulled(address indexed from, address indexed to);\\n    event VaultPulled(address indexed from, address indexed to);\\n\\n    /* ========== VIEW ========== */\\n    \\n    function governor() external view returns (address);\\n    function guardian() external view returns (address);\\n    function policy() external view returns (address);\\n    function vault() external view returns (address);\\n}\",\"keccak256\":\"0x6719e1f6949b31cb893450e9850a14b02d74850e50ba1879dc04d97f9c6f090e\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IsPana.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IsPana is IERC20 {\\n    function rebase( uint256 panaProfit_, uint epoch_) external returns (uint256);\\n\\n    function circulatingSupply() external view returns (uint256);\\n\\n    function gonsForBalance( uint amount ) external view returns ( uint );\\n\\n    function balanceForGons( uint gons ) external view returns ( uint );\\n\\n    function index() external view returns ( uint );\\n\\n    function toKARSHA(uint amount) external view returns (uint);\\n\\n    function fromKARSHA(uint amount) external view returns (uint);\\n\\n     function changeDebt(\\n        uint256 amount,\\n        address debtor,\\n        bool add\\n    ) external;\\n\\n    function debtBalances(address _address) external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0x07870b9160b6049e4d8ba59440902e1d45e558e935b02c9af0d31e9bfd75f970\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\n\\n/// @notice Safe IERC20 and ETH transfer library that safely handles missing return values.\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/TransferHelper.sol)\\n/// Taken from Solmate\\nlibrary SafeERC20 {\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.approve.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        (bool success, ) = to.call{value: amount}(new bytes(0));\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n}\",\"keccak256\":\"0xbdd4f99088de7c23383b043055646de013b1312166a9bfa05e3995cdcf7ae022\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.7.5;\\n\\n\\n// TODO(zx): Replace all instances of SafeMath with OZ implementation\\nlibrary SafeMath {\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    // Only used in the  BondingCalculator.sol\\n    function sqrrt(uint256 a) internal pure returns (uint c) {\\n        if (a > 3) {\\n            c = a;\\n            uint b = add( div( a, 2), 1 );\\n            while (b < c) {\\n                c = b;\\n                b = div( add( div( a, b ), b), 2 );\\n            }\\n        } else if (a != 0) {\\n            c = 1;\\n        }\\n    }\\n\\n}\",\"keccak256\":\"0x45cfc2aa9d85df2add98d4e899d834c646e8ce7001b00ead65f07dbefbcebeef\",\"license\":\"AGPL-3.0\"},\"contracts/types/PanaAccessControlled.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport \\\"../interfaces/IPanaAuthority.sol\\\";\\n\\nabstract contract PanaAccessControlled {\\n\\n    /* ========== EVENTS ========== */\\n\\n    event AuthorityUpdated(IPanaAuthority indexed authority);\\n\\n    string UNAUTHORIZED = \\\"UNAUTHORIZED\\\"; // save gas\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IPanaAuthority public authority;\\n\\n\\n    /* ========== Constructor ========== */\\n\\n    constructor(IPanaAuthority _authority) {\\n        authority = _authority;\\n        emit AuthorityUpdated(_authority);\\n    }\\n    \\n\\n    /* ========== MODIFIERS ========== */\\n    \\n    modifier onlyGovernor() {\\n        require(msg.sender == authority.governor(), UNAUTHORIZED);\\n        _;\\n    }\\n    \\n    modifier onlyGuardian() {\\n        require(msg.sender == authority.guardian(), UNAUTHORIZED);\\n        _;\\n    }\\n    \\n    modifier onlyPolicy() {\\n        require(msg.sender == authority.policy(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyVault() {\\n        require(msg.sender == authority.vault(), UNAUTHORIZED);\\n        _;\\n    }\\n    \\n    /* ========== GOV ONLY ========== */\\n    \\n    function setAuthority(IPanaAuthority _newAuthority) external onlyGovernor {\\n        authority = _newAuthority;\\n        emit AuthorityUpdated(_newAuthority);\\n    }\\n}\\n\",\"keccak256\":\"0x034e5499a57b5a80ba7315a07b54a800876e4e9143ec38855118dc2ff0af9311\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x610120604052600c60e08190526b15539055551213d49256915160a21b61010090815262000031916000919062000256565b503480156200003f57600080fd5b506040516200225c3803806200225c833981810160405260e08110156200006557600080fd5b50805160208201516040808401516060850151608086015160a087015160c090970151600180546001600160a01b0319166001600160a01b038316908117909155945196979596939592949193909182917f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a2506001600160a01b0387166200012e576040805162461bcd60e51b81526020600482015260126024820152715a65726f20616464726573733a2050414e4160701b604482015290519081900360640190fd5b6001600160601b0319606088901b166080526001600160a01b0386166200019c576040805162461bcd60e51b815260206004820152601360248201527f5a65726f20616464726573733a207350414e4100000000000000000000000000604482015290519081900360640190fd5b6001600160601b0319606087901b1660a0526001600160a01b0385166200020a576040805162461bcd60e51b815260206004820152601460248201527f5a65726f20616464726573733a204b4152534841000000000000000000000000604482015290519081900360640190fd5b506001600160601b0319606094851b1660c05260408051608081018252848152602081018490529081018290526000940184905260029290925560035560045560055550620003029050565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826200028e5760008555620002d9565b82601f10620002a957805160ff1916838001178555620002d9565b82800160010185558215620002d9579182015b82811115620002d9578251825591602001919060010190620002bc565b50620002e7929150620002eb565b5090565b5b80821115620002e75760008155600101620002ec565b60805160601c60a05160601c60c05160601c611ecf6200038d600039806105b25280610617528061095c5280611a5c5280611a8c5280611b9a5250806107c452806109825280610ef25280610f9e52806112055280611475528061169352806117a45250806106af52806107915280610b46528061107d52806113be52806116445250611ecf6000f3fe608060405234801561001057600080fd5b50600436106101985760003560e01c80639483c1d7116100e3578063aef08f5c1161008c578063bfe1092811610066578063bfe10928146103fc578063c2c7e84914610404578063c71cdd531461043657610198565b8063aef08f5c146103c6578063af14052c146103ec578063bf7e214f146103f457610198565b80639fef32cc116100bd5780639fef32cc14610344578063a87cabab1461034c578063adc9772e1461039a57610198565b80639483c1d7146102f05780639724a281146102f85780639c19bbd21461031e57610198565b80634811b6211161014557806377e93ca81161011f57806377e93ca8146102945780637a9e5e4b1461029c578063900cf0cf146102c257610198565b80634811b6211461025e57806348f956c31461026657806375619ab51461026e57610198565b806338aa37301161017657806338aa37301461020c578063401e52b914610232578063418563af1461025657610198565b80631304cada1461019d57806321d0af34146101be5780632986c0e514610204575b600080fd5b6101bc600480360360208110156101b357600080fd5b5035151561043e565b005b6101f2600480360360608110156101d457600080fd5b506001600160a01b0381351690602081013590604001351515610577565b60408051918252519081900360200190f35b6101f26107c0565b6101bc6004803603602081101561022257600080fd5b50356001600160a01b031661084c565b61023a61095a565b604080516001600160a01b039092168252519081900360200190f35b6101f261097e565b61023a6109e6565b61023a6109f5565b6101bc6004803603602081101561028457600080fd5b50356001600160a01b0316610a04565b61023a610b44565b6101bc600480360360208110156102b257600080fd5b50356001600160a01b0316610b68565b6102ca610c9e565b604080519485526020850193909352838301919091526060830152519081900360800190f35b6101f2610cad565b6101bc6004803603602081101561030e57600080fd5b50356001600160a01b0316610cc2565b6101f26004803603602081101561033457600080fd5b50356001600160a01b0316610dd0565b61023a610f9c565b6103726004803603602081101561036257600080fd5b50356001600160a01b0316610fc0565b6040805194855260208501939093528383019190915215156060830152519081900360800190f35b6101f2600480360360408110156103b057600080fd5b506001600160a01b038135169060200135610fea565b6101bc600480360360208110156103dc57600080fd5b50356001600160a01b03166110ca565b6101f26111f5565b61023a611522565b61023a611531565b6101f26004803603606081101561041a57600080fd5b506001600160a01b038135169060208101359060400135611540565b61023a611829565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561048c57600080fd5b505afa1580156104a0573d6000803e3d6000fd5b505050506040513d60208110156104b657600080fd5b50516000906001600160a01b031633146105635760405162461bcd60e51b81526020600482019081528254600260001961010060018416150201909116046024830181905290918291604490910190849080156105545780601f1061052957610100808354040283529160200191610554565b820191906000526020600020905b81548152906001019060200180831161053757829003601f168201915b50509250505060405180910390fd5b506009805460ff1916911515919091179055565b816000821561058b576105886111f5565b90505b60408051632770a7eb60e21b81523360048201526024810186905290516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691639dc29fac91604480830192600092919082900301818387803b1580156105f957600080fd5b505af115801561060d573d6000803e3d6000fd5b505050506106ab817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a8248768856040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561067957600080fd5b505afa15801561068d573d6000803e3d6000fd5b505050506040513d60208110156106a357600080fd5b50519061183d565b91507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561071a57600080fd5b505afa15801561072e573d6000803e3d6000fd5b505050506040513d602081101561074457600080fd5b50518211156107845760405162461bcd60e51b8152600401808060200182810382526025815260200180611e9e6025913960400191505060405180910390fd5b6107b86001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168684611897565b509392505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632986c0e56040518163ffffffff1660e01b815260040160206040518083038186803b15801561081b57600080fd5b505afa15801561082f573d6000803e3d6000fd5b505050506040513d602081101561084557600080fd5b5051905090565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561089a57600080fd5b505afa1580156108ae573d6000803e3d6000fd5b505050506040513d60208110156108c457600080fd5b50516000906001600160a01b031633146109375760405162461bcd60e51b81526020600482019081528254600260001961010060018416150201909116046024830181905290918291604490910190849080156105545780601f1061052957610100808354040283529160200191610554565b50600b80546001600160a01b0319166001600160a01b0392909216919091179055565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637965d56d6008546040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561081b57600080fd5b600a546001600160a01b031681565b600b546001600160a01b031681565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610a5257600080fd5b505afa158015610a66573d6000803e3d6000fd5b505050506040513d6020811015610a7c57600080fd5b50516000906001600160a01b03163314610aef5760405162461bcd60e51b81526020600482019081528254600260001961010060018416150201909116046024830181905290918291604490910190849080156105545780601f1061052957610100808354040283529160200191610554565b50600680546001600160a01b0383166001600160a01b0319909116811790915560408051918252517f86719c518c7d99ac94b3d405d462ea876ba5cd0a978461dc9a7c9862a94858869181900360200190a150565b7f000000000000000000000000000000000000000000000000000000000000000081565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610bb657600080fd5b505afa158015610bca573d6000803e3d6000fd5b505050506040513d6020811015610be057600080fd5b50516000906001600160a01b03163314610c535760405162461bcd60e51b81526020600482019081528254600260001961010060018416150201909116046024830181905290918291604490910190849080156105545780601f1061052957610100808354040283529160200191610554565b50600180546001600160a01b0319166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b60025460035460045460055484565b600454600090610cbd9042611a16565b905090565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610d1057600080fd5b505afa158015610d24573d6000803e3d6000fd5b505050506040513d6020811015610d3a57600080fd5b50516000906001600160a01b03163314610dad5760405162461bcd60e51b81526020600482019081528254600260001961010060018416150201909116046024830181905290918291604490910190849080156105545780601f1061052957610100808354040283529160200191610554565b50600a80546001600160a01b0319166001600160a01b0392909216919091179055565b600a546000906001600160a01b03163314610e32576040805162461bcd60e51b815260206004820152601d60248201527f45787465726e616c20636c61696d206973206e6f7420616c6c6f776564000000604482015290519081900360640190fd5b610e3a611e4e565b506001600160a01b03821660009081526007602090815260409182902082516080810184528154815260018201549281019290925260028101549282018390526003015460ff1615156060820152904210801590610e99575080606001515b15610f91576001600160a01b038316600090815260076020908152604082208281556001810183905560028101929092556003909101805460ff19169055810151600854610ee691611a16565b600881905550610f89837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637965d56d84602001516040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610f5857600080fd5b505afa158015610f6c573d6000803e3d6000fd5b505050506040513d6020811015610f8257600080fd5b5051611a58565b915050610f97565b60009150505b919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60076020526000908152604090208054600182015460028301546003909301549192909160ff1684565b60095460009060ff166110705760095461010090046001600160a01b031633148061101f5750600b546001600160a01b031633145b611070576040805162461bcd60e51b815260206004820152601f60248201527f45787465726e616c205374616b696e67206973206e6f7420616c6c6f77656400604482015290519081900360640190fd5b6110a56001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333085611c2f565b6110b76110b06111f5565b839061183d565b91506110c38383611a58565b9392505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561111857600080fd5b505afa15801561112c573d6000803e3d6000fd5b505050506040513d602081101561114257600080fd5b50516000906001600160a01b031633146111b55760405162461bcd60e51b81526020600482019081528254600260001961010060018416150201909116046024830181905290918291604490910190849080156105545780601f1061052957610100808354040283529160200191610554565b50600980546001600160a01b03909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909216919091179055565b60008042600280015411610cbd577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663058ecdb46002600301546002600101546040518363ffffffff1660e01b81526004018083815260200182815260200192505050602060405180830381600087803b15801561127b57600080fd5b505af115801561128f573d6000803e3d6000fd5b505050506040513d60208110156112a557600080fd5b50506002546004546112b69161183d565b6004556003805460010190556006546001600160a01b0316156113ba57600660009054906101000a90046001600160a01b03166001600160a01b031663e4fc6b6d6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561132357600080fd5b505af1158015611337573d6000803e3d6000fd5b50505050600660009054906101000a90046001600160a01b03166001600160a01b031663e7187e8a6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561138b57600080fd5b505af115801561139f573d6000803e3d6000fd5b505050506040513d60208110156113b557600080fd5b505190505b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561142957600080fd5b505afa15801561143d573d6000803e3d6000fd5b505050506040513d602081101561145357600080fd5b505160408051639358928b60e01b815290519192506000916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691639358928b916004808301926020929190829003018186803b1580156114bb57600080fd5b505afa1580156114cf573d6000803e3d6000fd5b505050506040513d60208110156114e557600080fd5b505190506114f3818461183d565b821161150357600060055561151b565b611517836115118484611a16565b90611a16565b6005555b5050905090565b6001546001600160a01b031681565b6006546001600160a01b031681565b600a546000906001600160a01b031633146115a2576040805162461bcd60e51b815260206004820152601f60248201527f45787465726e616c207374616b696e67206973206e6f7420616c6c6f77656400604482015290519081900360640190fd5b6115aa611e4e565b506001600160a01b03841660009081526007602090815260409182902082516080810184528154815260018201549281019290925260028101549282019290925260039091015460ff1615801560608301526116375760405162461bcd60e51b8152600401808060200182810382526025815260200180611e796025913960400191505060405180910390fd5b61166c6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333087611c2f565b61167e6116776111f5565b859061183d565b935060405180608001604052808581526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631bd39674876040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156116f557600080fd5b505afa158015611709573d6000803e3d6000fd5b505050506040513d602081101561171f57600080fd5b50518152602001611730428661183d565b8152600160209182018190526001600160a01b038881166000908152600784526040908190208551815585850151938101939093558481015160028401556060909401516003909201805460ff19169215159290921790915582516306f4e59d60e21b815260048101889052925161181d937f000000000000000000000000000000000000000000000000000000000000000090921692631bd396749260248082019391829003018186803b1580156117e857600080fd5b505afa1580156117fc573d6000803e3d6000fd5b505050506040513d602081101561181257600080fd5b50516008549061183d565b60085550919392505050565b60095461010090046001600160a01b031681565b6000828201838110156110c3576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b178152925182516000946060949389169392918291908083835b602083106119295780518252601f19909201916020918201910161190a565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461198b576040519150601f19603f3d011682016040523d82523d6000602084013e611990565b606091505b50915091508180156119be5750805115806119be57508080602001905160208110156119bb57600080fd5b50515b611a0f576040805162461bcd60e51b815260206004820152600f60248201527f5452414e534645525f4641494c45440000000000000000000000000000000000604482015290519081900360640190fd5b5050505050565b60006110c383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611db7565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166340c10f19847f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166366a5236c866040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611aee57600080fd5b505afa158015611b02573d6000803e3d6000fd5b505050506040513d6020811015611b1857600080fd5b5051604080517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b039093166004840152602483019190915251604480830192600092919082900301818387803b158015611b8057600080fd5b505af1158015611b94573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166366a5236c836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611bfc57600080fd5b505afa158015611c10573d6000803e3d6000fd5b505050506040513d6020811015611c2657600080fd5b50519392505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b17815292518251600094606094938a169392918291908083835b60208310611cc95780518252601f199092019160209182019101611caa565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611d2b576040519150601f19603f3d011682016040523d82523d6000602084013e611d30565b606091505b5091509150818015611d5e575080511580611d5e5750808060200190516020811015611d5b57600080fd5b50515b611daf576040805162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c4544000000000000000000000000604482015290519081900360640190fd5b505050505050565b60008184841115611e465760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611e0b578181015183820152602001611df3565b50505050905090810190601f168015611e385780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6040518060800160405280600081526020016000815260200160008152602001600015158152509056fe4163636f756e7420686173206c6f636b6564206f7220756e636c61696d6564207374616b65496e73756666696369656e742050616e612062616c616e636520696e20636f6e7472616374a164736f6c6343000705000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101985760003560e01c80639483c1d7116100e3578063aef08f5c1161008c578063bfe1092811610066578063bfe10928146103fc578063c2c7e84914610404578063c71cdd531461043657610198565b8063aef08f5c146103c6578063af14052c146103ec578063bf7e214f146103f457610198565b80639fef32cc116100bd5780639fef32cc14610344578063a87cabab1461034c578063adc9772e1461039a57610198565b80639483c1d7146102f05780639724a281146102f85780639c19bbd21461031e57610198565b80634811b6211161014557806377e93ca81161011f57806377e93ca8146102945780637a9e5e4b1461029c578063900cf0cf146102c257610198565b80634811b6211461025e57806348f956c31461026657806375619ab51461026e57610198565b806338aa37301161017657806338aa37301461020c578063401e52b914610232578063418563af1461025657610198565b80631304cada1461019d57806321d0af34146101be5780632986c0e514610204575b600080fd5b6101bc600480360360208110156101b357600080fd5b5035151561043e565b005b6101f2600480360360608110156101d457600080fd5b506001600160a01b0381351690602081013590604001351515610577565b60408051918252519081900360200190f35b6101f26107c0565b6101bc6004803603602081101561022257600080fd5b50356001600160a01b031661084c565b61023a61095a565b604080516001600160a01b039092168252519081900360200190f35b6101f261097e565b61023a6109e6565b61023a6109f5565b6101bc6004803603602081101561028457600080fd5b50356001600160a01b0316610a04565b61023a610b44565b6101bc600480360360208110156102b257600080fd5b50356001600160a01b0316610b68565b6102ca610c9e565b604080519485526020850193909352838301919091526060830152519081900360800190f35b6101f2610cad565b6101bc6004803603602081101561030e57600080fd5b50356001600160a01b0316610cc2565b6101f26004803603602081101561033457600080fd5b50356001600160a01b0316610dd0565b61023a610f9c565b6103726004803603602081101561036257600080fd5b50356001600160a01b0316610fc0565b6040805194855260208501939093528383019190915215156060830152519081900360800190f35b6101f2600480360360408110156103b057600080fd5b506001600160a01b038135169060200135610fea565b6101bc600480360360208110156103dc57600080fd5b50356001600160a01b03166110ca565b6101f26111f5565b61023a611522565b61023a611531565b6101f26004803603606081101561041a57600080fd5b506001600160a01b038135169060208101359060400135611540565b61023a611829565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561048c57600080fd5b505afa1580156104a0573d6000803e3d6000fd5b505050506040513d60208110156104b657600080fd5b50516000906001600160a01b031633146105635760405162461bcd60e51b81526020600482019081528254600260001961010060018416150201909116046024830181905290918291604490910190849080156105545780601f1061052957610100808354040283529160200191610554565b820191906000526020600020905b81548152906001019060200180831161053757829003601f168201915b50509250505060405180910390fd5b506009805460ff1916911515919091179055565b816000821561058b576105886111f5565b90505b60408051632770a7eb60e21b81523360048201526024810186905290516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691639dc29fac91604480830192600092919082900301818387803b1580156105f957600080fd5b505af115801561060d573d6000803e3d6000fd5b505050506106ab817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a8248768856040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561067957600080fd5b505afa15801561068d573d6000803e3d6000fd5b505050506040513d60208110156106a357600080fd5b50519061183d565b91507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561071a57600080fd5b505afa15801561072e573d6000803e3d6000fd5b505050506040513d602081101561074457600080fd5b50518211156107845760405162461bcd60e51b8152600401808060200182810382526025815260200180611e9e6025913960400191505060405180910390fd5b6107b86001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168684611897565b509392505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632986c0e56040518163ffffffff1660e01b815260040160206040518083038186803b15801561081b57600080fd5b505afa15801561082f573d6000803e3d6000fd5b505050506040513d602081101561084557600080fd5b5051905090565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561089a57600080fd5b505afa1580156108ae573d6000803e3d6000fd5b505050506040513d60208110156108c457600080fd5b50516000906001600160a01b031633146109375760405162461bcd60e51b81526020600482019081528254600260001961010060018416150201909116046024830181905290918291604490910190849080156105545780601f1061052957610100808354040283529160200191610554565b50600b80546001600160a01b0319166001600160a01b0392909216919091179055565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637965d56d6008546040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561081b57600080fd5b600a546001600160a01b031681565b600b546001600160a01b031681565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610a5257600080fd5b505afa158015610a66573d6000803e3d6000fd5b505050506040513d6020811015610a7c57600080fd5b50516000906001600160a01b03163314610aef5760405162461bcd60e51b81526020600482019081528254600260001961010060018416150201909116046024830181905290918291604490910190849080156105545780601f1061052957610100808354040283529160200191610554565b50600680546001600160a01b0383166001600160a01b0319909116811790915560408051918252517f86719c518c7d99ac94b3d405d462ea876ba5cd0a978461dc9a7c9862a94858869181900360200190a150565b7f000000000000000000000000000000000000000000000000000000000000000081565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610bb657600080fd5b505afa158015610bca573d6000803e3d6000fd5b505050506040513d6020811015610be057600080fd5b50516000906001600160a01b03163314610c535760405162461bcd60e51b81526020600482019081528254600260001961010060018416150201909116046024830181905290918291604490910190849080156105545780601f1061052957610100808354040283529160200191610554565b50600180546001600160a01b0319166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b60025460035460045460055484565b600454600090610cbd9042611a16565b905090565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610d1057600080fd5b505afa158015610d24573d6000803e3d6000fd5b505050506040513d6020811015610d3a57600080fd5b50516000906001600160a01b03163314610dad5760405162461bcd60e51b81526020600482019081528254600260001961010060018416150201909116046024830181905290918291604490910190849080156105545780601f1061052957610100808354040283529160200191610554565b50600a80546001600160a01b0319166001600160a01b0392909216919091179055565b600a546000906001600160a01b03163314610e32576040805162461bcd60e51b815260206004820152601d60248201527f45787465726e616c20636c61696d206973206e6f7420616c6c6f776564000000604482015290519081900360640190fd5b610e3a611e4e565b506001600160a01b03821660009081526007602090815260409182902082516080810184528154815260018201549281019290925260028101549282018390526003015460ff1615156060820152904210801590610e99575080606001515b15610f91576001600160a01b038316600090815260076020908152604082208281556001810183905560028101929092556003909101805460ff19169055810151600854610ee691611a16565b600881905550610f89837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637965d56d84602001516040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610f5857600080fd5b505afa158015610f6c573d6000803e3d6000fd5b505050506040513d6020811015610f8257600080fd5b5051611a58565b915050610f97565b60009150505b919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60076020526000908152604090208054600182015460028301546003909301549192909160ff1684565b60095460009060ff166110705760095461010090046001600160a01b031633148061101f5750600b546001600160a01b031633145b611070576040805162461bcd60e51b815260206004820152601f60248201527f45787465726e616c205374616b696e67206973206e6f7420616c6c6f77656400604482015290519081900360640190fd5b6110a56001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333085611c2f565b6110b76110b06111f5565b839061183d565b91506110c38383611a58565b9392505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561111857600080fd5b505afa15801561112c573d6000803e3d6000fd5b505050506040513d602081101561114257600080fd5b50516000906001600160a01b031633146111b55760405162461bcd60e51b81526020600482019081528254600260001961010060018416150201909116046024830181905290918291604490910190849080156105545780601f1061052957610100808354040283529160200191610554565b50600980546001600160a01b03909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909216919091179055565b60008042600280015411610cbd577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663058ecdb46002600301546002600101546040518363ffffffff1660e01b81526004018083815260200182815260200192505050602060405180830381600087803b15801561127b57600080fd5b505af115801561128f573d6000803e3d6000fd5b505050506040513d60208110156112a557600080fd5b50506002546004546112b69161183d565b6004556003805460010190556006546001600160a01b0316156113ba57600660009054906101000a90046001600160a01b03166001600160a01b031663e4fc6b6d6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561132357600080fd5b505af1158015611337573d6000803e3d6000fd5b50505050600660009054906101000a90046001600160a01b03166001600160a01b031663e7187e8a6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561138b57600080fd5b505af115801561139f573d6000803e3d6000fd5b505050506040513d60208110156113b557600080fd5b505190505b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561142957600080fd5b505afa15801561143d573d6000803e3d6000fd5b505050506040513d602081101561145357600080fd5b505160408051639358928b60e01b815290519192506000916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691639358928b916004808301926020929190829003018186803b1580156114bb57600080fd5b505afa1580156114cf573d6000803e3d6000fd5b505050506040513d60208110156114e557600080fd5b505190506114f3818461183d565b821161150357600060055561151b565b611517836115118484611a16565b90611a16565b6005555b5050905090565b6001546001600160a01b031681565b6006546001600160a01b031681565b600a546000906001600160a01b031633146115a2576040805162461bcd60e51b815260206004820152601f60248201527f45787465726e616c207374616b696e67206973206e6f7420616c6c6f77656400604482015290519081900360640190fd5b6115aa611e4e565b506001600160a01b03841660009081526007602090815260409182902082516080810184528154815260018201549281019290925260028101549282019290925260039091015460ff1615801560608301526116375760405162461bcd60e51b8152600401808060200182810382526025815260200180611e796025913960400191505060405180910390fd5b61166c6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333087611c2f565b61167e6116776111f5565b859061183d565b935060405180608001604052808581526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631bd39674876040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156116f557600080fd5b505afa158015611709573d6000803e3d6000fd5b505050506040513d602081101561171f57600080fd5b50518152602001611730428661183d565b8152600160209182018190526001600160a01b038881166000908152600784526040908190208551815585850151938101939093558481015160028401556060909401516003909201805460ff19169215159290921790915582516306f4e59d60e21b815260048101889052925161181d937f000000000000000000000000000000000000000000000000000000000000000090921692631bd396749260248082019391829003018186803b1580156117e857600080fd5b505afa1580156117fc573d6000803e3d6000fd5b505050506040513d602081101561181257600080fd5b50516008549061183d565b60085550919392505050565b60095461010090046001600160a01b031681565b6000828201838110156110c3576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b178152925182516000946060949389169392918291908083835b602083106119295780518252601f19909201916020918201910161190a565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461198b576040519150601f19603f3d011682016040523d82523d6000602084013e611990565b606091505b50915091508180156119be5750805115806119be57508080602001905160208110156119bb57600080fd5b50515b611a0f576040805162461bcd60e51b815260206004820152600f60248201527f5452414e534645525f4641494c45440000000000000000000000000000000000604482015290519081900360640190fd5b5050505050565b60006110c383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611db7565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166340c10f19847f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166366a5236c866040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611aee57600080fd5b505afa158015611b02573d6000803e3d6000fd5b505050506040513d6020811015611b1857600080fd5b5051604080517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b039093166004840152602483019190915251604480830192600092919082900301818387803b158015611b8057600080fd5b505af1158015611b94573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166366a5236c836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611bfc57600080fd5b505afa158015611c10573d6000803e3d6000fd5b505050506040513d6020811015611c2657600080fd5b50519392505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b17815292518251600094606094938a169392918291908083835b60208310611cc95780518252601f199092019160209182019101611caa565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611d2b576040519150601f19603f3d011682016040523d82523d6000602084013e611d30565b606091505b5091509150818015611d5e575080511580611d5e5750808060200190516020811015611d5b57600080fd5b50515b611daf576040805162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c4544000000000000000000000000604482015290519081900360640190fd5b505050505050565b60008184841115611e465760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611e0b578181015183820152602001611df3565b50505050905090810190601f168015611e385780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6040518060800160405280600081526020016000815260200160008152602001600015158152509056fe4163636f756e7420686173206c6f636b6564206f7220756e636c61696d6564207374616b65496e73756666696369656e742050616e612062616c616e636520696e20636f6e7472616374a164736f6c6343000705000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimRedeemable(address)": {
        "params": {
          "_to": "address"
        },
        "returns": {
          "_0": "uint"
        }
      },
      "index()": {
        "returns": {
          "_0": "uint"
        }
      },
      "lockedStake(address,uint256,uint256)": {
        "params": {
          "_amount": "uint",
          "_to": "address",
          "lockPeriod": "uint"
        },
        "returns": {
          "_0": "uint"
        }
      },
      "rebase()": {
        "returns": {
          "_0": "uint256"
        }
      },
      "setDistributor(address)": {
        "params": {
          "_distributor": "address"
        }
      },
      "stake(address,uint256)": {
        "params": {
          "_amount": "uint",
          "_to": "address"
        },
        "returns": {
          "_0": "uint"
        }
      },
      "unstake(address,uint256,bool)": {
        "params": {
          "_amount": "uint",
          "_to": "address",
          "_trigger": "bool"
        },
        "returns": {
          "amount_": "uint"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimRedeemable(address)": {
        "notice": "retrieve stake from lock"
      },
      "index()": {
        "notice": "returns the sPana index, which tracks rebase growth"
      },
      "lockedStake(address,uint256,uint256)": {
        "notice": "stake pana with lock. This function  is restricted to be called only from pKarsha redemption contract "
      },
      "rebase()": {
        "notice": "trigger rebase if epoch over"
      },
      "secondsToNextEpoch()": {
        "notice": "seconds until the next epoch begins"
      },
      "setDistributor(address)": {
        "notice": "sets the contract address for LP staking"
      },
      "stake(address,uint256)": {
        "notice": "stake Pana"
      },
      "supplyInLocked()": {
        "notice": "total supply in locked state"
      },
      "unstake(address,uint256,bool)": {
        "notice": "redeem Pana/sPana for Karsha/Pana"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9082,
        "contract": "contracts/Staking.sol:PanaStaking",
        "label": "UNAUTHORIZED",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 9084,
        "contract": "contracts/Staking.sol:PanaStaking",
        "label": "authority",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IPanaAuthority)5032"
      },
      {
        "astId": 218,
        "contract": "contracts/Staking.sol:PanaStaking",
        "label": "epoch",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Epoch)201_storage"
      },
      {
        "astId": 220,
        "contract": "contracts/Staking.sol:PanaStaking",
        "label": "distributor",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IDistributor)4722"
      },
      {
        "astId": 224,
        "contract": "contracts/Staking.sol:PanaStaking",
        "label": "lockedStakeInfo",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(LockedClaim)210_storage)"
      },
      {
        "astId": 226,
        "contract": "contracts/Staking.sol:PanaStaking",
        "label": "gonsInLocked",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 228,
        "contract": "contracts/Staking.sol:PanaStaking",
        "label": "_allowedExternalStaking",
        "offset": 0,
        "slot": "9",
        "type": "t_bool"
      },
      {
        "astId": 230,
        "contract": "contracts/Staking.sol:PanaStaking",
        "label": "bondDepositor",
        "offset": 1,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 232,
        "contract": "contracts/Staking.sol:PanaStaking",
        "label": "pKarshaRedemption",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 234,
        "contract": "contracts/Staking.sol:PanaStaking",
        "label": "aKarshaRedemption",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IDistributor)4722": {
        "encoding": "inplace",
        "label": "contract IDistributor",
        "numberOfBytes": "20"
      },
      "t_contract(IPanaAuthority)5032": {
        "encoding": "inplace",
        "label": "contract IPanaAuthority",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(LockedClaim)210_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PanaStaking.LockedClaim)",
        "numberOfBytes": "32",
        "value": "t_struct(LockedClaim)210_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Epoch)201_storage": {
        "encoding": "inplace",
        "label": "struct PanaStaking.Epoch",
        "members": [
          {
            "astId": 194,
            "contract": "contracts/Staking.sol:PanaStaking",
            "label": "length",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 196,
            "contract": "contracts/Staking.sol:PanaStaking",
            "label": "number",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 198,
            "contract": "contracts/Staking.sol:PanaStaking",
            "label": "end",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 200,
            "contract": "contracts/Staking.sol:PanaStaking",
            "label": "distribute",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(LockedClaim)210_storage": {
        "encoding": "inplace",
        "label": "struct PanaStaking.LockedClaim",
        "members": [
          {
            "astId": 203,
            "contract": "contracts/Staking.sol:PanaStaking",
            "label": "deposit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 205,
            "contract": "contracts/Staking.sol:PanaStaking",
            "label": "gons",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 207,
            "contract": "contracts/Staking.sol:PanaStaking",
            "label": "expiry",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 209,
            "contract": "contracts/Staking.sol:PanaStaking",
            "label": "lock",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}