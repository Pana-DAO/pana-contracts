{
  "address": "0xd87d959ebE3749FB403b1dDf986007451a0fA97f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IPanaAuthority",
          "name": "_authority",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_pana",
          "type": "address"
        },
        {
          "internalType": "contract IKarsha",
          "name": "_karsha",
          "type": "address"
        },
        {
          "internalType": "contract IStaking",
          "name": "_staking",
          "type": "address"
        },
        {
          "internalType": "contract ITreasury",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IPanaAuthority",
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "AuthorityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "Bond",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "CloseMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "quoteToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialPrice",
          "type": "uint256"
        }
      ],
      "name": "CreateMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldControlVariable",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newControlVariable",
          "type": "uint256"
        }
      ],
      "name": "Tuned",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "adjustments",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "change",
          "type": "uint256"
        },
        {
          "internalType": "uint48",
          "name": "lastAdjustment",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "timeToAdjusted",
          "type": "uint48"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "internalType": "contract IPanaAuthority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "close",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_quoteToken",
          "type": "address"
        },
        {
          "internalType": "uint256[3]",
          "name": "_market",
          "type": "uint256[3]"
        },
        {
          "internalType": "bool[4]",
          "name": "_booleans",
          "type": "bool[4]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_terms",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint32[2]",
          "name": "_intervals",
          "type": "uint32[2]"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "currentControlVariable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "currentDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "debtDecay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "debtRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_referral",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getOraclePriceView",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTreasuryRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "indexesFor",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "isLive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liveMarkets",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "liveMarketsFor",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "marketPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "capacity",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "quoteToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "capacityInQuote",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "quoteTokenIsReserve",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "totalDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPayout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "purchased",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "marketsForQuote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "metadata",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "lastTune",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "lastDecay",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "length",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "depositInterval",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "tuneInterval",
          "type": "uint48"
        },
        {
          "internalType": "uint8",
          "name": "quoteDecimals",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "quoteIsLPToken",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "notes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "internalType": "uint48",
          "name": "created",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "matured",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "redeemed",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "marketID",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "pendingFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout_",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "matured_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceOracle",
      "outputs": [
        {
          "internalType": "contract IPriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "pullNote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newIndex_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "pushNote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_indexes",
          "type": "uint256[]"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "redeemAll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPanaAuthority",
          "name": "_newAuthority",
          "type": "address"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPriceOracle",
          "name": "_priceOracle",
          "type": "address"
        }
      ],
      "name": "setPriceOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_toFrontEnd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_toTreasury",
          "type": "uint256"
        }
      ],
      "name": "setRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "terms",
      "outputs": [
        {
          "internalType": "bool",
          "name": "fixedTerm",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "controlVariable",
          "type": "uint256"
        },
        {
          "internalType": "uint48",
          "name": "vesting",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "conclusion",
          "type": "uint48"
        },
        {
          "internalType": "uint256",
          "name": "maxDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x614e9e19ee8e5c418a0ad42b70dd2c98b4248d5a8cba8e81b06d21570919a902",
  "receipt": {
    "to": null,
    "from": "0x02A3babda298d348Dea69DA98B2F6a7F4Df31e42",
    "contractAddress": "0xd87d959ebE3749FB403b1dDf986007451a0fA97f",
    "transactionIndex": 1,
    "gasUsed": "20123478",
    "logsBloom": "0x
    "blockHash": "0x6b3b6b73249e87183179635b7478cfe5ab2d6c6030c6c1a67ec9579dffa5d35c",
    "transactionHash": "0x614e9e19ee8e5c418a0ad42b70dd2c98b4248d5a8cba8e81b06d21570919a902",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 26958679,
        "transactionHash": "0x614e9e19ee8e5c418a0ad42b70dd2c98b4248d5a8cba8e81b06d21570919a902",
        "address": "0xd87d959ebE3749FB403b1dDf986007451a0fA97f",
        "topics": [
          "0x2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad",
          "0x000000000000000000000000cc654fbb3c1b12be82d36bc9c7e1ce075a422f80"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x6b3b6b73249e87183179635b7478cfe5ab2d6c6030c6c1a67ec9579dffa5d35c"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 26958679,
        "transactionHash": "0x614e9e19ee8e5c418a0ad42b70dd2c98b4248d5a8cba8e81b06d21570919a902",
        "address": "0x369eB8197062093a20402935D3a707b4aE414E9D",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000d87d959ebe3749fb403b1ddf986007451a0fa97f",
          "0x0000000000000000000000006baf949be348f6df135df9dc15102971654749fe"
        ],
        "data": "0x000000000000000000000000002cd76fe086b93ce2f768a00b22a00000000000",
        "logIndex": 1,
        "blockHash": "0x6b3b6b73249e87183179635b7478cfe5ab2d6c6030c6c1a67ec9579dffa5d35c"
      }
    ],
    "blockNumber": 26958679,
    "cumulativeGasUsed": "20123478",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xcc654fbB3C1B12Be82D36Bc9C7E1CE075A422F80",
    "0x369eB8197062093a20402935D3a707b4aE414E9D",
    "0x543ff59E8BC8844DcB2FC5116D8FF972305aE0d4",
    "0x6bAf949BE348F6DF135Df9DC15102971654749fe",
    "0xf4414eeb85Da1932889997d13edA5B5ed137C19d"
  ],
  "solcInputHash": "15df74223e98ecac515dca13f2ac46cd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IPanaAuthority\",\"name\":\"_authority\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_pana\",\"type\":\"address\"},{\"internalType\":\"contract IKarsha\",\"name\":\"_karsha\",\"type\":\"address\"},{\"internalType\":\"contract IStaking\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"contract ITreasury\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IPanaAuthority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Bond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"CloseMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialPrice\",\"type\":\"uint256\"}],\"name\":\"CreateMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldControlVariable\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newControlVariable\",\"type\":\"uint256\"}],\"name\":\"Tuned\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"adjustments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"change\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"lastAdjustment\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"timeToAdjusted\",\"type\":\"uint48\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract IPanaAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_quoteToken\",\"type\":\"address\"},{\"internalType\":\"uint256[3]\",\"name\":\"_market\",\"type\":\"uint256[3]\"},{\"internalType\":\"bool[4]\",\"name\":\"_booleans\",\"type\":\"bool[4]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_terms\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint32[2]\",\"name\":\"_intervals\",\"type\":\"uint32[2]\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"currentControlVariable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"currentDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"debtDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"debtRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getOraclePriceView\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasuryRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"indexesFor\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liveMarkets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"liveMarketsFor\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"marketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"capacityInQuote\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"quoteTokenIsReserve\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchased\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketsForQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"lastTune\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"lastDecay\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"length\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"depositInterval\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"tuneInterval\",\"type\":\"uint48\"},{\"internalType\":\"uint8\",\"name\":\"quoteDecimals\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"quoteIsLPToken\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"notes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"created\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"matured\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"redeemed\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"marketID\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"pendingFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"matured_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"pullNote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newIndex_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"pushNote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_indexes\",\"type\":\"uint256[]\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"redeemAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPanaAuthority\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"_priceOracle\",\"type\":\"address\"}],\"name\":\"setPriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_toFrontEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toTreasury\",\"type\":\"uint256\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"terms\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"fixedTerm\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"controlVariable\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"vesting\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"conclusion\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"maxDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"close(uint256)\":{\"params\":{\"_id\":\"ID of market to close\"}},\"create(address,uint256[3],bool[4],uint256[2],uint32[2])\":{\"details\":\"current price should be in 18 decimals.\",\"params\":{\"_booleans\":\"[capacity in quote, quote is reserve, quote is LP, fixed term]\",\"_intervals\":\"[deposit interval (seconds), tune interval (seconds)]\",\"_market\":\"[capacity (in PANA or quote), initial price / PANA (18 decimals), debt buffer (3 decimals)]\",\"_quoteToken\":\"token used to deposit\",\"_terms\":\"[vesting length (if fixed term) or vested timestamp, conclusion timestamp]\"},\"returns\":{\"id_\":\"        ID of new bond market\"}},\"currentControlVariable(uint256)\":{\"details\":\"accounts for control variable adjustment\",\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"control variable for market in PANA decimals\"}},\"currentDebt(uint256)\":{\"details\":\"accounts for debt decay since last deposit\",\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"current debt for market in PANA decimals\"}},\"debtDecay(uint256)\":{\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"amount of debt to decay\"}},\"debtRatio(uint256)\":{\"details\":\"uses current debt, which accounts for debt decay since last deposit (vs _debtRatio())\",\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"debt ratio for market in quote decimals\"}},\"deposit(uint256,uint256,uint256,address,address)\":{\"params\":{\"_amount\":\"the amount of quote token to spend\",\"_id\":\"the ID of the market\",\"_maxPrice\":\"the maximum price at which to buy\",\"_referral\":\"the front end operator address\",\"_user\":\"the recipient of the payout\"},\"returns\":{\"expiry_\":\"    the timestamp at which payout is redeemable\",\"index_\":\"     the user index of the Note (used to redeem or query information)\",\"payout_\":\"    the amount of KARSHA due\"}},\"getOraclePriceView(uint256)\":{\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"oracle price for market in PANA decimals\"}},\"indexesFor(address)\":{\"params\":{\"_user\":\"the user to query notes for\"},\"returns\":{\"_0\":\"the pending notes for the user\"}},\"isLive(uint256)\":{\"params\":{\"_id\":\"ID of market\"}},\"liveMarketsFor(address)\":{\"params\":{\"_token\":\"quote token to check for\"}},\"marketPrice(uint256)\":{\"params\":{\"_id\":\"market ID\"},\"returns\":{\"_0\":\"price for market in PANA decimals\"}},\"pendingFor(address,uint256)\":{\"params\":{\"_index\":\"the index of the note in the user's array\",\"_user\":\"the user that the note belongs to\"},\"returns\":{\"matured_\":\"   if the payout can be redeemed\",\"payout_\":\"    the payout due, in Karsha\"}},\"pullNote(address,uint256)\":{\"params\":{\"_from\":\"the address that approved the note transfer\",\"_index\":\"the index of the note to transfer (in the sender's array)\"}},\"pushNote(address,uint256)\":{\"params\":{\"_index\":\"index of note to approve transfer for\",\"_to\":\"address to approve note transfer for\"}},\"redeem(address,uint256[])\":{\"params\":{\"_indexes\":\"the note indexes to redeem\",\"_user\":\"the user to redeem for\"},\"returns\":{\"payout_\":\"    sum of payout sent, in Karsha\"}},\"redeemAll(address)\":{\"details\":\"if possible, query indexesFor() off-chain and input in redeem() to save gas\",\"params\":{\"_user\":\"user to redeem all notes for\"},\"returns\":{\"_0\":\"sum of payout sent, in Karsha\"}}},\"title\":\"Pana Bond Depository\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"close(uint256)\":{\"notice\":\"disable existing market\"},\"create(address,uint256[3],bool[4],uint256[2],uint32[2])\":{\"notice\":\"creates a new market type\"},\"currentControlVariable(uint256)\":{\"notice\":\"up to date control variable\"},\"currentDebt(uint256)\":{\"notice\":\"calculate debt factoring in decay\"},\"debtDecay(uint256)\":{\"notice\":\"amount of debt to decay from total debt for market ID\"},\"debtRatio(uint256)\":{\"notice\":\"calculate current ratio of debt to supply\"},\"deposit(uint256,uint256,uint256,address,address)\":{\"notice\":\"deposit quote tokens in exchange for a bond from a specified market\"},\"getOraclePriceView(uint256)\":{\"notice\":\"View Only - gets token price in quote tokens from oracle\"},\"getTreasuryRewards()\":{\"notice\":\"Manually fetch remaining rewards for Treasury\"},\"indexesFor(address)\":{\"notice\":\"all pending notes for user\"},\"isLive(uint256)\":{\"notice\":\"is a given market accepting deposits\"},\"liveMarkets()\":{\"notice\":\"returns an array of all active market IDs\"},\"liveMarketsFor(address)\":{\"notice\":\"returns an array of all active market IDs for a given quote token\"},\"marketPrice(uint256)\":{\"notice\":\"View Only Function - calculate current market price of quote token in base token\"},\"pendingFor(address,uint256)\":{\"notice\":\"calculate amount available for claim for a single note\"},\"pullNote(address,uint256)\":{\"notice\":\"transfer a note that has been approved by an address\"},\"pushNote(address,uint256)\":{\"notice\":\"approve an address to transfer a note\"},\"redeem(address,uint256[])\":{\"notice\":\"redeem notes for user\"},\"redeemAll(address)\":{\"notice\":\"redeem all redeemable markets for user\"},\"setPriceOracle(address)\":{\"notice\":\"sets price oracle for bond depository\"},\"setRewards(uint256,uint256)\":{\"notice\":\"set rewards for front end operators and DAO\"},\"whitelist(address)\":{\"notice\":\"add or remove addresses from the reward whitelist\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bond/BondDepository.sol\":\"PanaBondDepository\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/access/PanaAccessControlled.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport \\\"../interfaces/IPanaAuthority.sol\\\";\\n\\nabstract contract PanaAccessControlled {\\n\\n    /* ========== EVENTS ========== */\\n\\n    event AuthorityUpdated(IPanaAuthority indexed authority);\\n\\n    string UNAUTHORIZED = \\\"UNAUTHORIZED\\\"; // save gas\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IPanaAuthority public authority;\\n\\n\\n    /* ========== Constructor ========== */\\n\\n    constructor(IPanaAuthority _authority) {\\n        authority = _authority;\\n        emit AuthorityUpdated(_authority);\\n    }\\n    \\n\\n    /* ========== MODIFIERS ========== */\\n    \\n    modifier onlyGovernor() {\\n        require(msg.sender == authority.governor(), UNAUTHORIZED);\\n        _;\\n    }\\n    \\n    modifier onlyGuardian() {\\n        require(msg.sender == authority.guardian(), UNAUTHORIZED);\\n        _;\\n    }\\n    \\n    modifier onlyPolicy() {\\n        require(msg.sender == authority.policy(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyVault() {\\n        require(msg.sender == authority.vault(), UNAUTHORIZED);\\n        _;\\n    }\\n    \\n    /* ========== GOV ONLY ========== */\\n    \\n    function setAuthority(IPanaAuthority _newAuthority) external onlyGovernor {\\n        authority = _newAuthority;\\n        emit AuthorityUpdated(_newAuthority);\\n    }\\n}\\n\",\"keccak256\":\"0x034e5499a57b5a80ba7315a07b54a800876e4e9143ec38855118dc2ff0af9311\",\"license\":\"AGPL-3.0-only\"},\"contracts/bond/BondDepository.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.10;\\n\\nimport \\\"../bond/NoteKeeper.sol\\\";\\n\\nimport \\\"../libraries/SafeERC20.sol\\\";\\n\\nimport \\\"../interfaces/IStaking.sol\\\";\\nimport \\\"../interfaces/ITreasury.sol\\\";\\nimport \\\"../interfaces/IERC20Metadata.sol\\\";\\nimport \\\"../interfaces/IBondDepository.sol\\\";\\nimport \\\"../interfaces/IPriceOracle.sol\\\";\\n\\nimport \\\"../interfaces/IUniswapV2ERC20.sol\\\";\\nimport \\\"../interfaces/IUniswapV2Pair.sol\\\";\\n\\n/// @title Pana Bond Depository\\n\\ncontract PanaBondDepository is IBondDepository, NoteKeeper {\\n/* ======== DEPENDENCIES ======== */\\n\\n  using SafeERC20 for IERC20;\\n\\n/* ======== EVENTS ======== */\\n\\n  event CreateMarket(uint256 indexed id, address indexed baseToken, address indexed quoteToken, uint256 initialPrice);\\n  event CloseMarket(uint256 indexed id);\\n  event Bond(uint256 indexed id, uint256 amount, uint256 price);\\n  event Tuned(uint256 indexed id, uint256 oldControlVariable, uint256 newControlVariable);\\n\\n/* ======== STATE VARIABLES ======== */\\n\\n  IPriceOracle public priceOracle;\\n\\n  // Storage\\n  Market[] public markets; // persistent market data\\n  Terms[] public terms; // deposit construction data\\n  Metadata[] public metadata; // extraneous market data\\n  mapping(uint256 => Adjustment) public adjustments; // control variable changes\\n\\n  // Queries\\n  mapping(address => uint256[]) public marketsForQuote; // market IDs for quote token\\n\\n/* ======== CONSTRUCTOR ======== */\\n\\n  constructor(\\n    IPanaAuthority _authority,\\n    IERC20 _pana,\\n    IKarsha _karsha,\\n    IStaking _staking,\\n    ITreasury _treasury\\n  ) NoteKeeper(_authority, _pana, _karsha, _staking, _treasury) {\\n    // save gas for users by bulk approving stake() transactions\\n    _pana.approve(address(_staking), 1e45);\\n  }\\n\\n  /**\\n   * @notice             sets price oracle for bond depository\\n   */\\n  function setPriceOracle(IPriceOracle _priceOracle) external onlyGovernor {\\n      priceOracle = _priceOracle;\\n  }\\n\\n/* ======== DEPOSIT ======== */\\n\\n  /**\\n   * @notice             deposit quote tokens in exchange for a bond from a specified market\\n   * @param _id          the ID of the market\\n   * @param _amount      the amount of quote token to spend\\n   * @param _maxPrice    the maximum price at which to buy\\n   * @param _user        the recipient of the payout\\n   * @param _referral    the front end operator address\\n   * @return payout_     the amount of KARSHA due\\n   * @return expiry_     the timestamp at which payout is redeemable\\n   * @return index_      the user index of the Note (used to redeem or query information)\\n   */\\n  function deposit(\\n    uint256 _id,\\n    uint256 _amount,\\n    uint256 _maxPrice,\\n    address _user,\\n    address _referral\\n  ) external override returns (\\n    uint256 payout_, \\n    uint256 expiry_,\\n    uint256 index_\\n  ) {\\n    Market storage market = markets[_id];\\n    Terms memory term = terms[_id];\\n    uint48 currentTime = uint48(block.timestamp);\\n\\n    // Markets end at a defined timestamp\\n    // |-------------------------------------| t\\n    require(currentTime < term.conclusion, \\\"Depository: market concluded\\\");\\n\\n    // Debt and the control variable decay over time\\n    _decay(_id, currentTime);\\n\\n    // Users input a maximum price, which protects them from price changes after\\n    // entering the mempool. max price is a slippage mitigation measure\\n    { // add block scoping to avoid stack too deep\\n    uint256 price = _marketPrice(_id);\\n\\n    require(price <= _maxPrice, \\\"Depository: more than max price\\\"); \\n\\n    /**\\n     * payout for the deposit = amount / price\\n     *\\n     * where\\n     * payout = PANA out\\n     * amount = quote tokens in\\n     * price = quote tokens : PANA \\n     *\\n     * 1e36 = PANA decimals (18) + price decimals (18)\\n     */\\n    payout_ = (_amount * 1e36 / price) / (10 ** metadata[_id].quoteDecimals);\\n\\n    // markets have a max payout amount, capping size because deposits\\n    // do not experience slippage. max payout is recalculated upon tuning\\n    require(payout_ <= market.maxPayout, \\\"Depository: max size exceeded\\\");\\n    \\n    /*\\n     * each market is initialized with a capacity\\n     *\\n     * this is either the number of PANA that the market can sell\\n     * (if capacity in quote is false), \\n     *\\n     * or the number of quote tokens that the market can buy\\n     * (if capacity in quote is true)\\n     */\\n    market.capacity -= market.capacityInQuote\\n      ? _amount\\n      : payout_;\\n\\n    /**\\n     * bonds mature with a cliff at a set timestamp\\n     * prior to the expiry timestamp, no payout tokens are accessible to the user\\n     * after the expiry timestamp, the entire payout can be redeemed\\n     *\\n     * there are two types of bonds: fixed-term and fixed-expiration\\n     *\\n     * fixed-term bonds mature in a set amount of time from deposit\\n     * i.e. term = 1 week. when alice deposits on day 1, her bond\\n     * expires on day 8. when bob deposits on day 2, his bond expires day 9.\\n     *\\n     * fixed-expiration bonds mature at a set timestamp\\n     * i.e. expiration = day 10. when alice deposits on day 1, her term\\n     * is 9 days. when bob deposits on day 2, his term is 8 days.\\n     */\\n    expiry_ = term.fixedTerm\\n      ? term.vesting + currentTime\\n      : term.vesting;\\n\\n    // markets keep track of how many quote tokens have been\\n    // purchased, and how much PANA has been sold\\n    market.purchased += _amount;\\n    market.sold += uint256(payout_);\\n\\n    // incrementing total debt raises the price of the next bond\\n    market.totalDebt += uint256(payout_);\\n\\n    emit Bond(_id, _amount, price);\\n    }\\n\\n    // send quote token to treasury, mint PANA, and stake the payout\\n    _sendToTreasury(_id, _amount, payout_, _referral);\\n\\n    /**\\n     * user data is stored as Notes. these are isolated array entries\\n     * storing the amount due, the time created, the time when payout\\n     * is redeemable, the time when payout was redeemed, and the ID\\n     * of the market deposited into\\n     */\\n    index_ = addNote(\\n      _user,\\n      payout_,\\n      uint48(expiry_),\\n      uint48(_id)\\n    );\\n\\n    // if max debt is breached, the market is closed \\n    // this a circuit breaker\\n    if (term.maxDebt < market.totalDebt) {\\n        market.capacity = 0;\\n        emit CloseMarket(_id);\\n    } else {\\n      // if market will continue, the control variable is tuned to hit targets on time\\n      _tune(_id, currentTime);\\n    }\\n  }\\n\\n  /**\\n    * @notice             sends funds to treasury and mints correct amount of PANA for payout\\n    * @param _id          the ID of the market\\n    * @param _amount      the amount of quote token being sent\\n    * @param _payout      the amount of PANA to be paid to depositor\\n    */\\n  function _sendToTreasury(uint256 _id, uint256 _amount, uint256 _payout, address _referral) internal {\\n      /**\\n        * payment is transferred to the treasury and PANA is minted for \\n        * the user payout. if the quoteToken is a reserve asset or LP\\n        * token, then it should be deposited to the treasury. if not,\\n        * it should be transferred.\\n        */\\n      Market memory market = markets[_id];\\n      \\n      uint256 toTreasury = 0;\\n      uint256 toRef = 0;\\n          \\n      if (market.quoteTokenIsReserve) {\\n          // transfer payment from user to this contract\\n          market.quoteToken.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n          // get rewards for Treasury and referral\\n          (toRef, toTreasury) = giveRewards(_payout, _referral);\\n          \\n          // calculate amount to mint\\n          uint256 toMint = _payout + toRef + toTreasury;\\n\\n          // deposit the payment to the treasury\\n          treasury.deposit(_amount, address(market.quoteToken), toMint);\\n      } else {\\n          // transfer payment from user to treasury directly\\n          market.quoteToken.safeTransferFrom(msg.sender, address(treasury), _amount);\\n          \\n          // get rewards for DAO, Treasury and referral\\n          (toRef, toTreasury) = giveRewards(_payout, _referral);\\n\\n          // mint PANA for payout and reward\\n          treasury.mint(address(this), _payout + toRef + toTreasury);\\n      }\\n\\n      if (toTreasury > 0) {\\n        // Rewards generated for Treasury should be sent to Treasury immediately\\n        sendRewardsToTreasury(toTreasury);\\n      }\\n\\n      // stake the payout while vesting\\n      staking.stake(address(this), _payout);\\n  }\\n\\n\\n  /**\\n   * @notice             decay debt, and adjust control variable if there is an active change\\n   * @param _id          ID of market\\n   * @param _time        uint48 timestamp (saves gas when passed in)\\n   */\\n  function _decay(uint256 _id, uint48 _time) internal {\\n\\n    // Debt decay\\n\\n    /*\\n     * Debt is a time-decayed sum of tokens spent in a market\\n     * Debt is added when deposits occur and removed over time\\n     * |\\n     * |    debt falls with\\n     * |   / \\\\  inactivity       / \\\\\\n     * | /     \\\\              /\\\\/    \\\\\\n     * |         \\\\           /         \\\\\\n     * |           \\\\      /\\\\/            \\\\\\n     * |             \\\\  /  and rises       \\\\\\n     * |                with deposits\\n     * |\\n     * |------------------------------------| t\\n     */\\n    markets[_id].totalDebt -= debtDecay(_id);\\n    metadata[_id].lastDecay = _time;\\n\\n\\n    // Control variable decay\\n\\n    // The bond control variable is continually tuned. When it is lowered (which\\n    // lowers the market price), the change is carried out smoothly over time.\\n    if (adjustments[_id].active) {\\n      Adjustment storage adjustment = adjustments[_id];\\n\\n      (uint256 adjustBy, uint48 secondsSince, bool stillActive) = _controlDecay(_id);\\n      terms[_id].controlVariable -= adjustBy;\\n\\n      if (stillActive) {\\n        adjustment.change -= adjustBy;\\n        adjustment.timeToAdjusted -= secondsSince;\\n        adjustment.lastAdjustment = _time;\\n      } else {\\n        adjustment.active = false;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice             auto-adjust control variable to hit capacity/spend target\\n   * @param _id          ID of market\\n   * @param _time        uint48 timestamp (saves gas when passed in)\\n   */\\n  function _tune(uint256 _id, uint48 _time) internal {\\n    Metadata memory meta = metadata[_id];\\n\\n    if (_time >= meta.lastTune + meta.tuneInterval) {\\n      Market memory market = markets[_id];\\n      \\n      // compute seconds remaining until market will conclude\\n      uint256 timeRemaining = terms[_id].conclusion - _time;\\n      uint256 price = _marketPrice(_id);\\n\\n      // standardize capacity into an base token amount\\n      // PANA decimals (18) + price decimals (18)\\n      uint256 capacity = market.capacityInQuote\\n        ? (market.capacity * 1e36 / price) / (10 ** meta.quoteDecimals)\\n        : market.capacity;\\n\\n      /**\\n       * calculate the correct payout to complete on time assuming each bond\\n       * will be max size in the desired deposit interval for the remaining time\\n       *\\n       * i.e. market has 10 days remaining. deposit interval is 1 day. capacity\\n       * is 10,000 PANA. max payout would be 1,000 PANA (10,000 * 1 / 10).\\n       */  \\n      markets[_id].maxPayout = uint256(capacity * meta.depositInterval / timeRemaining);\\n\\n      // calculate the ideal total debt to satisfy capacity in the remaining time\\n      uint256 targetDebt = capacity * meta.length / timeRemaining;\\n\\n      // derive a new control variable from the target debt and current supply\\n      uint256 newControlVariable = uint256(price * treasury.baseSupply() / targetDebt);\\n\\n      emit Tuned(_id, terms[_id].controlVariable, newControlVariable);\\n\\n      if (newControlVariable >= terms[_id].controlVariable) {\\n        terms[_id].controlVariable = newControlVariable;\\n      } else {\\n        // if decrease, control variable change will be carried out over the tune interval\\n        // this is because price will be lowered\\n        uint256 change = terms[_id].controlVariable - newControlVariable;\\n        adjustments[_id] = Adjustment(change, _time, meta.tuneInterval, true);\\n      }\\n      metadata[_id].lastTune = _time;\\n    }\\n  }\\n\\n/* ======== CREATE ======== */\\n\\n  /**\\n   * @notice             creates a new market type\\n   * @dev                current price should be in 18 decimals.\\n   * @param _quoteToken  token used to deposit\\n   * @param _market      [capacity (in PANA or quote), initial price / PANA (18 decimals), debt buffer (3 decimals)]\\n   * @param _booleans    [capacity in quote, quote is reserve, quote is LP, fixed term]\\n   * @param _terms       [vesting length (if fixed term) or vested timestamp, conclusion timestamp]\\n   * @param _intervals   [deposit interval (seconds), tune interval (seconds)]\\n   * @return id_         ID of new bond market\\n   */\\n  function create(\\n    IERC20 _quoteToken,\\n    uint256[3] memory _market,\\n    bool[4] memory _booleans,\\n    uint256[2] memory _terms,\\n    uint32[2] memory _intervals\\n  ) external override onlyPolicy returns (uint256 id_) {\\n\\n    // the length of the program, in seconds\\n    uint256 secondsToConclusion = _terms[1] - block.timestamp;\\n\\n    // the decimal count of the quote token\\n    uint256 decimals = IERC20Metadata(address(_quoteToken)).decimals();\\n\\n    /* \\n     * initial target debt is equal to capacity (this is the amount of debt\\n     * that will decay over in the length of the program if price remains the same).\\n     * it is converted into base token terms if passed in in quote token terms.\\n     *\\n     * 1e36 = PANA decimals (18) + initial price decimals (18)\\n     */\\n    uint256 targetDebt = uint256(_booleans[0] ?\\n    (_market[0] * 1e36 / _market[1]) / 10 ** decimals \\n    : _market[0]\\n    );\\n\\n    /*\\n     * max payout is the amount of capacity that should be utilized in a deposit\\n     * interval. for example, if capacity is 1,000 PANA, there are 10 days to conclusion, \\n     * and the preferred deposit interval is 1 day, max payout would be 100 PANA.\\n     */\\n    uint256 maxPayout = uint256(targetDebt * _intervals[0] / secondsToConclusion);\\n\\n    /*\\n     * max debt serves as a circuit breaker for the market. let's say the quote\\n     * token is a stablecoin, and that stablecoin depegs. without max debt, the\\n     * market would continue to buy until it runs out of capacity. this is\\n     * configurable with a 3 decimal buffer (1000 = 1% above initial price).\\n     * note that its likely advisable to keep this buffer wide.\\n     * note that the buffer is above 100%. i.e. 10% buffer = initial debt * 1.1\\n     */\\n    uint256 maxDebt = targetDebt + (targetDebt * _market[2] / 1e5); // 1e5 = 100,000. 10,000 / 100,000 = 10%.\\n\\n    /*\\n     * the control variable is set so that initial price equals the desired\\n     * initial price. the control variable is the ultimate determinant of price,\\n     * so we compute this last.\\n     *\\n     * price = control variable * debt ratio\\n     * debt ratio = total debt / supply\\n     * therefore, control variable = price / debt ratio\\n     */\\n    uint256 controlVariable = _market[1] * treasury.baseSupply() / targetDebt;\\n\\n    // depositing into, or getting info for, the created market uses this ID\\n    id_ = markets.length;\\n\\n    markets.push(Market({\\n      quoteToken: _quoteToken, \\n      quoteTokenIsReserve: _booleans[1],\\n      capacityInQuote: _booleans[0],\\n      capacity: _market[0],\\n      totalDebt: targetDebt, \\n      maxPayout: maxPayout,\\n      purchased: 0,\\n      sold: 0\\n    }));\\n\\n    terms.push(Terms({\\n      fixedTerm: _booleans[3], \\n      controlVariable: uint256(controlVariable),\\n      vesting: uint48(_terms[0]), \\n      conclusion: uint48(_terms[1]), \\n      maxDebt: uint256(maxDebt) \\n    }));\\n\\n    metadata.push(Metadata({\\n      lastTune: uint48(block.timestamp),\\n      lastDecay: uint48(block.timestamp),\\n      length: uint48(secondsToConclusion),\\n      depositInterval: _intervals[0],\\n      tuneInterval: _intervals[1],\\n      quoteDecimals: uint8(decimals),\\n      quoteIsLPToken: _booleans[2]\\n    }));\\n\\n    marketsForQuote[address(_quoteToken)].push(id_);\\n\\n    // Approve the treasury for quoteToken if quoteTokenIsReserve\\n    if (_booleans[1]) _quoteToken.approve(address(treasury), type(uint256).max);\\n\\n    emit CreateMarket(id_, address(pana), address(_quoteToken), _market[1]);\\n  }\\n\\n  /**\\n   * @notice             disable existing market\\n   * @param _id          ID of market to close\\n   */\\n  function close(uint256 _id) external override onlyPolicy {\\n    terms[_id].conclusion = uint48(block.timestamp);\\n    markets[_id].capacity = 0;\\n    emit CloseMarket(_id);\\n  }\\n\\n  /**\\n   * @notice             gets token price in quote tokens from oracle\\n   * @param _id          ID of market\\n   * @return             oracle price for market in PANA decimals\\n   */\\n  function _getOraclePrice(uint256 _id) internal returns (uint256) {\\n    Market memory market = markets[_id];\\n    Metadata memory meta = metadata[_id];\\n\\n    if (meta.quoteIsLPToken) {\\n      /**\\n       * to find a price of 1 LP token, we need:\\n       * - call oracle to get the price of other token in Pana\\n       * - calculate LP total reserves in Pana\\n       * - divide LP total supply by total reserves \\n       */\\n\\n      IUniswapV2Pair pair = IUniswapV2Pair(address(market.quoteToken));\\n\\n      address token = pair.token0();\\n      address token1 = pair.token1();\\n      (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\\n      \\n      if (token == address(pana) || token == address(karsha)) {\\n        (token, token1) = (token1, token);\\n        (reserve0, reserve1) = (reserve1, reserve0);\\n      }\\n      else {\\n        require(token1 == address(pana) || token1 == address(karsha), \\\"Invalid pair\\\");\\n      }\\n\\n      uint256 tokenDecimals = IERC20Metadata(token).decimals();\\n\\n      // tokenPrice is in PANA decimals\\n      uint256 tokenPrice = priceOracle.consult(token, 10 ** tokenDecimals, token1);\\n\\n      // total reserves calculated in Pana/Karsha\\n      uint256 totalReserves = reserve1 + reserve0 * tokenPrice / (10 ** tokenDecimals);\\n\\n      // price of 1 pana/Karsha in LP token\\n      uint256 oraclePrice = pair.totalSupply() * 1e18 / totalReserves;\\n\\n      if (token1 == address(karsha)) {\\n        // adjust karsha price to pana per current index\\n        oraclePrice = oraclePrice / staking.index();\\n      }\\n\\n      return oraclePrice;\\n    }\\n    else {\\n      uint256 quoteDecimals = IERC20Metadata(address(market.quoteToken)).decimals();\\n\\n      // TWAP oracle returns price in terms of tokenOut but we need it in PANA decimals\\n      uint256 decimals = IERC20Metadata(address(pana)).decimals();\\n      if (decimals > quoteDecimals) {\\n        decimals += decimals - quoteDecimals;\\n      }\\n      else {\\n        decimals -= quoteDecimals - decimals;\\n      }\\n\\n      return priceOracle.consult(address(pana), 10 ** decimals, address(market.quoteToken));\\n    }\\n  }\\n\\n  /**\\n   * @notice                  calculate current market price of quote token in base token\\n   * @dev                     see marketPrice() for explanation of price computation\\n   * @dev                     uses info from storage because data has been updated before call (vs marketPrice())\\n   * @param _id               market ID\\n   * @return                  price for market in PANA decimals\\n   */ \\n  function _marketPrice(uint256 _id) internal returns (uint256) {\\n    uint256 price =  terms[_id].controlVariable \\n      * _debtRatio(_id) \\n      / (10 ** metadata[_id].quoteDecimals);\\n\\n    // check oracle price and select minimum\\n    if (address(priceOracle) != address(0)) {\\n      uint256 oraclePrice = _getOraclePrice(_id);\\n      if (oraclePrice < price) {\\n        price = oraclePrice;\\n      }\\n    }\\n\\n    return price;  \\n  }\\n\\n\\n/* ======== EXTERNAL VIEW ======== */\\n\\n  /**\\n   * @notice             calculate current ratio of debt to supply\\n   * @dev                uses current debt, which accounts for debt decay since last deposit (vs _debtRatio())\\n   * @param _id          ID of market\\n   * @return             debt ratio for market in quote decimals\\n   */\\n  function debtRatio(uint256 _id) public view override returns (uint256) {\\n    return \\n      currentDebt(_id)\\n      * (10 ** metadata[_id].quoteDecimals)\\n      / treasury.baseSupply(); \\n  }\\n\\n  /**\\n   * @notice             calculate debt factoring in decay\\n   * @dev                accounts for debt decay since last deposit\\n   * @param _id          ID of market\\n   * @return             current debt for market in PANA decimals\\n   */\\n  function currentDebt(uint256 _id) public view override returns (uint256) {\\n    return markets[_id].totalDebt - debtDecay(_id);\\n  }\\n\\n  /**\\n   * @notice             amount of debt to decay from total debt for market ID\\n   * @param _id          ID of market\\n   * @return             amount of debt to decay\\n   */\\n  function debtDecay(uint256 _id) public view override returns (uint256) {\\n    Metadata memory meta = metadata[_id];\\n\\n    uint256 secondsSince = block.timestamp - meta.lastDecay;\\n\\n    return uint256(markets[_id].totalDebt * secondsSince / meta.length);\\n  }\\n\\n  /**\\n   * @notice             up to date control variable\\n   * @dev                accounts for control variable adjustment\\n   * @param _id          ID of market\\n   * @return             control variable for market in PANA decimals\\n   */\\n  function currentControlVariable(uint256 _id) public view returns (uint256) {\\n    (uint256 decay,,) = _controlDecay(_id);\\n    return terms[_id].controlVariable - decay;\\n  }\\n\\n  /**\\n   * @notice             is a given market accepting deposits\\n   * @param _id          ID of market\\n   */\\n  function isLive(uint256 _id) public view override returns (bool) {\\n    return (markets[_id].capacity != 0 && terms[_id].conclusion > block.timestamp);\\n  }\\n\\n  /**\\n   * @notice returns an array of all active market IDs\\n   */\\n  function liveMarkets() external view override returns (uint256[] memory) {\\n    uint256 num;\\n    for (uint256 i = 0; i < markets.length; i++) {\\n      if (isLive(i)) num++;\\n    }\\n\\n    uint256[] memory ids = new uint256[](num);\\n    uint256 nonce;\\n    for (uint256 i = 0; i < markets.length; i++) {\\n      if (isLive(i)) {\\n        ids[nonce] = i;\\n        nonce++;\\n      }\\n    }\\n    return ids;\\n  }\\n\\n  /**\\n   * @notice             returns an array of all active market IDs for a given quote token\\n   * @param _token       quote token to check for\\n   */\\n  function liveMarketsFor(address _token) external view override returns (uint256[] memory) {\\n    uint256[] memory mkts = marketsForQuote[_token];\\n    uint256 num;\\n\\n    for (uint256 i = 0; i < mkts.length; i++) {\\n      if (isLive(mkts[i])) num++;\\n    }\\n\\n    uint256[] memory ids = new uint256[](num);\\n    uint256 nonce;\\n\\n    for (uint256 i = 0; i < mkts.length; i++) {\\n      if (isLive(mkts[i])) {\\n        ids[nonce] = mkts[i];\\n        nonce++;\\n      }\\n    }\\n    return ids;\\n  }\\n\\n  /**\\n   * @notice             View Only - gets token price in quote tokens from oracle\\n   * @param _id          ID of market\\n   * @return             oracle price for market in PANA decimals\\n   */\\n  function getOraclePriceView(uint256 _id) public view returns (uint256) {\\n    Market memory market = markets[_id];\\n    Metadata memory meta = metadata[_id];\\n\\n    if (meta.quoteIsLPToken) {\\n      /**\\n       * to find a price of 1 LP token, we need:\\n       * - call oracle to get the price of other token in Pana\\n       * - calculate LP total reserves in Pana\\n       * - divide LP total supply by total reserves \\n       */\\n\\n      IUniswapV2Pair pair = IUniswapV2Pair(address(market.quoteToken));\\n\\n      address token = pair.token0();\\n      address token1 = pair.token1();\\n      (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\\n      \\n      if (token == address(pana) || token == address(karsha)) {\\n        (token, token1) = (token1, token);\\n        (reserve0, reserve1) = (reserve1, reserve0);\\n      }\\n      else {\\n        require(token1 == address(pana) || token1 == address(karsha), \\\"Invalid pair\\\");\\n      }\\n\\n      uint256 tokenDecimals = IERC20Metadata(token).decimals();\\n\\n      // tokenPrice is in PANA decimals\\n      uint256 tokenPrice = priceOracle.consultReadonly(token, 10 ** tokenDecimals, token1);\\n\\n      // total reserves calculated in Pana/Karsha\\n      uint256 totalReserves = reserve1 + reserve0 * tokenPrice / (10 ** tokenDecimals);\\n\\n      // price of 1 pana/Karsha in LP token\\n      uint256 oraclePrice = pair.totalSupply() * 1e18 / totalReserves;\\n\\n      if (token1 == address(karsha)) {\\n        // adjust karsha price to pana per current index\\n        oraclePrice = oraclePrice / staking.index();\\n      }\\n\\n      return oraclePrice;\\n    }\\n    else {\\n      uint256 quoteDecimals = IERC20Metadata(address(market.quoteToken)).decimals();\\n\\n      // TWAP oracle returns price in terms of tokenOut but we need it in PANA decimals\\n      uint256 decimals = IERC20Metadata(address(pana)).decimals();\\n      if (decimals > quoteDecimals) {\\n        decimals += decimals - quoteDecimals;\\n      }\\n      else {\\n        decimals -= quoteDecimals - decimals;\\n      }\\n\\n      return priceOracle.consultReadonly(address(pana), 10 ** decimals, address(market.quoteToken));\\n    }\\n  }\\n\\n  /**\\n   * @notice                  View Only Function - calculate current market price of quote token in base token\\n   * @param _id               market ID\\n   * @return                  price for market in PANA decimals\\n   */ \\n  function marketPrice(uint256 _id) external view returns (uint256) {\\n    uint256 price =  currentControlVariable(_id) \\n      * debtRatio(_id) \\n      / (10 ** metadata[_id].quoteDecimals);\\n\\n    // check oracle price and select minimum\\n    if (address(priceOracle) != address(0)) {\\n      uint256 oraclePrice = getOraclePriceView(_id);\\n      if (oraclePrice < price) {\\n        price = oraclePrice;\\n      }\\n    }\\n\\n    return price;  \\n  }\\n\\n  /* ======== INTERNAL VIEW ======== */\\n\\n  /**\\n   * @notice                  calculate debt factoring in decay\\n   * @dev                     uses info from storage because data has been updated before call (vs debtRatio())\\n   * @param _id               market ID\\n   * @return                  current debt for market in quote decimals\\n   */ \\n  function _debtRatio(uint256 _id) internal view returns (uint256) {\\n    return \\n      markets[_id].totalDebt\\n      * (10 ** metadata[_id].quoteDecimals)\\n      / treasury.baseSupply(); \\n  }\\n\\n  /**\\n   * @notice                  amount to decay control variable by\\n   * @param _id               ID of market\\n   * @return decay_           change in control variable\\n   * @return secondsSince_    seconds since last change in control variable\\n   * @return active_          whether or not change remains active\\n   */ \\n  function _controlDecay(uint256 _id) internal view returns (uint256 decay_, uint48 secondsSince_, bool active_) {\\n    Adjustment memory info = adjustments[_id];\\n    if (!info.active) return (0, 0, false);\\n\\n    secondsSince_ = uint48(block.timestamp) - info.lastAdjustment;\\n\\n    active_ = secondsSince_ < info.timeToAdjusted;\\n    decay_ = active_ \\n      ? info.change * secondsSince_ / info.timeToAdjusted\\n      : info.change;\\n  }\\n}\",\"keccak256\":\"0xe7dcd61eef50cd0f4274c0316f4568d272d5c94b0af53376887a62c5fa071bc5\",\"license\":\"AGPL-3.0\"},\"contracts/bond/NoteKeeper.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.10;\\n\\nimport \\\"../treasury/FrontEndRewarder.sol\\\";\\n\\nimport \\\"../interfaces/IKarsha.sol\\\";\\nimport \\\"../interfaces/IStaking.sol\\\";\\nimport \\\"../interfaces/ITreasury.sol\\\";\\nimport \\\"../interfaces/INoteKeeper.sol\\\";\\n\\nabstract contract NoteKeeper is INoteKeeper, FrontEndRewarder {\\n\\n  mapping(address => Note[]) public notes; // user deposit data\\n  mapping(address => mapping(uint256 => address)) private noteTransfers; // change note ownership\\n\\n  IKarsha internal immutable karsha;\\n  IStaking internal immutable staking;\\n  ITreasury internal treasury;\\n\\n  constructor (\\n    IPanaAuthority _authority,\\n    IERC20 _pana,\\n    IKarsha _karsha,\\n    IStaking _staking,\\n    ITreasury _treasury\\n  ) FrontEndRewarder(_authority, _pana) {\\n    karsha = _karsha;\\n    staking = _staking;\\n    treasury = _treasury;\\n  }\\n\\n  // if treasury address changes on authority, update it\\n  function updateTreasury() external {\\n    require(\\n      msg.sender == authority.governor() ||\\n      msg.sender == authority.guardian() ||\\n      msg.sender == authority.policy(),\\n      \\\"Only authorized\\\"\\n    );\\n    treasury = ITreasury(authority.vault());\\n  }\\n\\n/* ========== ADD ========== */\\n\\n  /**\\n   * @notice             adds a new Note for a user, stores the front end & DAO rewards, and mints & stakes payout & rewards\\n   * @param _user        the user that owns the Note\\n   * @param _payout      the amount of Pana due to the user\\n   * @param _expiry      the timestamp when the Note is redeemable\\n   * @param _marketID    the ID of the market deposited into\\n   * @return index_      the index of the Note in the user's array\\n   */\\n  function addNote(\\n    address _user, \\n    uint256 _payout, \\n    uint48 _expiry, \\n    uint48 _marketID\\n  ) internal returns (uint256 index_) {\\n    // the index of the note is the next in the user's array\\n    index_ = notes[_user].length;\\n\\n    // the new note is pushed to the user's array\\n    notes[_user].push(\\n      Note({\\n        payout: karsha.balanceTo(_payout),\\n        created: uint48(block.timestamp),\\n        matured: _expiry,\\n        redeemed: 0,\\n        marketID: _marketID\\n      })\\n    );\\n  }\\n\\n/* ========== REDEEM ========== */\\n\\n  /**\\n   * @notice             redeem notes for user\\n   * @param _user        the user to redeem for\\n   * @param _indexes     the note indexes to redeem\\n   * @return payout_     sum of payout sent, in Karsha\\n   */\\n  function redeem(address _user, uint256[] memory _indexes) public override returns (uint256 payout_) {\\n    uint48 time = uint48(block.timestamp);\\n\\n    for (uint256 i = 0; i < _indexes.length; i++) {\\n      (uint256 pay, bool matured) = pendingFor(_user, _indexes[i]);\\n\\n      if (matured) {\\n        notes[_user][_indexes[i]].redeemed = time; // mark as redeemed\\n        payout_ += pay;\\n      }\\n    }\\n\\n    karsha.transfer(_user, payout_); // send payout as Karsha\\n  }\\n\\n  /**\\n   * @notice             redeem all redeemable markets for user\\n   * @dev                if possible, query indexesFor() off-chain and input in redeem() to save gas\\n   * @param _user        user to redeem all notes for\\n   * @return             sum of payout sent, in Karsha\\n   */ \\n  function redeemAll(address _user) external override returns (uint256) {\\n    return redeem(_user, indexesFor(_user));\\n  }\\n\\n/* ========== TRANSFER ========== */\\n\\n  /**\\n   * @notice             approve an address to transfer a note\\n   * @param _to          address to approve note transfer for\\n   * @param _index       index of note to approve transfer for\\n   */ \\n  function pushNote(address _to, uint256 _index) external override {\\n    require(notes[msg.sender][_index].created != 0, \\\"Depository: note not found\\\");\\n    noteTransfers[msg.sender][_index] = _to;\\n  }\\n\\n  /**\\n   * @notice             transfer a note that has been approved by an address\\n   * @param _from        the address that approved the note transfer\\n   * @param _index       the index of the note to transfer (in the sender's array)\\n   */ \\n  function pullNote(address _from, uint256 _index) external override returns (uint256 newIndex_) {\\n    require(noteTransfers[_from][_index] == msg.sender, \\\"Depository: transfer not found\\\");\\n    require(notes[_from][_index].redeemed == 0, \\\"Depository: note redeemed\\\");\\n\\n    newIndex_ = notes[msg.sender].length;\\n    notes[msg.sender].push(notes[_from][_index]);\\n\\n    delete notes[_from][_index];\\n  }\\n\\n/* ========== VIEW ========== */\\n\\n  // Note info\\n\\n  /**\\n   * @notice             all pending notes for user\\n   * @param _user        the user to query notes for\\n   * @return             the pending notes for the user\\n   */\\n  function indexesFor(address _user) public view override returns (uint256[] memory) {\\n    Note[] memory info = notes[_user];\\n\\n    uint256 length;\\n    for (uint256 i = 0; i < info.length; i++) {\\n        if (info[i].redeemed == 0 && info[i].payout != 0) length++;\\n    }\\n\\n    uint256[] memory indexes = new uint256[](length);\\n    uint256 position;\\n\\n    for (uint256 i = 0; i < info.length; i++) {\\n        if (info[i].redeemed == 0 && info[i].payout != 0) {\\n            indexes[position] = i;\\n            position++;\\n        }\\n    }\\n\\n    return indexes;\\n  }\\n\\n  /**\\n   * @notice             calculate amount available for claim for a single note\\n   * @param _user        the user that the note belongs to\\n   * @param _index       the index of the note in the user's array\\n   * @return payout_     the payout due, in Karsha\\n   * @return matured_    if the payout can be redeemed\\n   */\\n  function pendingFor(address _user, uint256 _index) public view override returns (uint256 payout_, bool matured_) {\\n    Note memory note = notes[_user][_index];\\n    payout_ = note.payout;\\n    matured_ = note.redeemed == 0 && note.matured <= block.timestamp && note.payout != 0;\\n  }\\n}\\n\",\"keccak256\":\"0x4401959a9d04feb41692aa3f6d56a0e25896df6037b2d93779b191b6bfb89208\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/IBondDepository.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IBondDepository {\\n\\n  // Info about each type of market\\n  struct Market {\\n    uint256 capacity; // capacity remaining\\n    IERC20 quoteToken; // token to accept as payment\\n    bool capacityInQuote; // capacity limit is in payment token (true) or in PANA (false, default)\\n    bool quoteTokenIsReserve; // quoteToken is a reserve asset/PANA LP pair (true) or not a reserve asset (false)\\n    uint256 totalDebt; // total debt from market\\n    uint256 maxPayout; // max tokens in/out (determined by capacityInQuote false/true, respectively)\\n    uint256 sold; // base tokens out\\n    uint256 purchased; // quote tokens in\\n  }\\n\\n  // Info for creating new markets\\n  struct Terms {\\n    bool fixedTerm; // fixed term or fixed expiration\\n    uint256 controlVariable; // scaling variable for price\\n    uint48 vesting; // length of time from deposit to maturity if fixed-term\\n    uint48 conclusion; // timestamp when market no longer offered (doubles as time when market matures if fixed-expiry)\\n    uint256 maxDebt; // 18 decimal debt maximum in PANA\\n  }\\n\\n  // Additional info about market.\\n  struct Metadata {\\n    uint48 lastTune; // last timestamp when control variable was tuned\\n    uint48 lastDecay; // last timestamp when market was created and debt was decayed\\n    uint48 length; // time from creation to conclusion. used as speed to decay debt.\\n    uint48 depositInterval; // target frequency of deposits\\n    uint48 tuneInterval; // frequency of tuning\\n    uint8 quoteDecimals; // decimals of quote token\\n    bool quoteIsLPToken; // quote token is liquidity pair token\\n  }\\n\\n  // Control variable adjustment data\\n  struct Adjustment {\\n    uint256 change;\\n    uint48 lastAdjustment;\\n    uint48 timeToAdjusted;\\n    bool active;\\n  }\\n\\n\\n  /**\\n   * @notice deposit market\\n   * @param _bid uint256\\n   * @param _amount uint256\\n   * @param _maxPrice uint256\\n   * @param _user address\\n   * @param _referral address\\n   * @return payout_ uint256\\n   * @return expiry_ uint256\\n   * @return index_ uint256\\n   */\\n  function deposit(\\n    uint256 _bid,\\n    uint256 _amount,\\n    uint256 _maxPrice,\\n    address _user,\\n    address _referral\\n  ) external returns (\\n    uint256 payout_, \\n    uint256 expiry_,\\n    uint256 index_\\n  );\\n\\n  function create (\\n    IERC20 _quoteToken, // token used to deposit\\n    uint256[3] memory _market, // [capacity, initial price]\\n    bool[4] memory _booleans, // [capacity in quote, quote is reserve, quote is LP, fixed term]\\n    uint256[2] memory _terms, // [vesting, conclusion]\\n    uint32[2] memory _intervals // [deposit interval, tune interval]\\n  ) external returns (uint256 id_);\\n  function close(uint256 _id) external;\\n\\n  function isLive(uint256 _bid) external view returns (bool);\\n  function liveMarkets() external view returns (uint256[] memory);\\n  function liveMarketsFor(address _quoteToken) external view returns (uint256[] memory);\\n  function marketPrice(uint256 _bid) external view returns (uint256);\\n  function currentDebt(uint256 _bid) external view returns (uint256);\\n  function debtRatio(uint256 _bid) external view returns (uint256);\\n  function debtDecay(uint256 _bid) external view returns (uint256);\\n}\",\"keccak256\":\"0xb08c9358a154b9388c705cf977cff88fd17ec8c41ab007cebabdce590519d22f\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa142440b0e1c51ece24b6d074ac883b34e1f33a2472773eeaaf4871875904d09\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IERC20Metadata is IERC20 {\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\",\"keccak256\":\"0x6dfa58ba4a241b2201f3ecb3ba26345ce4dd66f0a553f18b2a284341f5aacd72\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IKarsha.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IKarsha is IERC20 {\\n  function mint(address _to, uint256 _amount) external;\\n\\n  function burn(address _from, uint256 _amount) external;\\n\\n  function index() external view returns (uint256);\\n  \\n  function balanceOfPANA(address _address) external view returns (uint256);\\n\\n  function balanceFrom(uint256 _amount) external view returns (uint256);\\n\\n  function balanceTo(uint256 _amount) external view returns (uint256);\\n\\n  function transfer(address _to,uint256 _amount) external override returns (bool);\\n  function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool);\\n}\\n\",\"keccak256\":\"0x4eb885428aff0f1a2480f65a941644c73fda6fb733398b97375babf12abe928a\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/INoteKeeper.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\ninterface INoteKeeper {\\n  // Info for market note\\n  struct Note {\\n    uint256 payout; // KARSHA remaining to be paid\\n    uint48 created; // time market was created\\n    uint48 matured; // timestamp when market is matured\\n    uint48 redeemed; // time market was redeemed\\n    uint48 marketID; // market ID of deposit. uint48 to avoid adding a slot.\\n  }\\n\\n  function redeem(address _user, uint256[] memory _indexes) external returns (uint256);\\n  function redeemAll(address _user) external returns (uint256);\\n  function pushNote(address to, uint256 index) external;\\n  function pullNote(address from, uint256 index) external returns (uint256 newIndex_);\\n\\n  function indexesFor(address _user) external view returns (uint256[] memory);\\n  function pendingFor(address _user, uint256 _index) external view returns (uint256 payout_, bool matured_);\\n}\",\"keccak256\":\"0x938ea165ff32eba4b4ca7725fb5711c8ab2c101c49d58323c0d6cce9c1bfffc7\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/IPanaAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IPanaAuthority {\\n    /* ========== EVENTS ========== */\\n    \\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event DistributionVaultPushed(address indexed from, address indexed to, bool _effectiveImmediately); \\n\\n    event GovernorPulled(address indexed from, address indexed to);\\n    event GuardianPulled(address indexed from, address indexed to);\\n    event PolicyPulled(address indexed from, address indexed to);\\n    event VaultPulled(address indexed from, address indexed to);\\n    event DistributionVaultPulled(address indexed from, address indexed to);\\n\\n    /* ========== VIEW ========== */\\n    \\n    function governor() external view returns (address);\\n    function guardian() external view returns (address);\\n    function policy() external view returns (address);\\n    function vault() external view returns (address);\\n    function distributionVault() external view returns (address);\\n}\",\"keccak256\":\"0xc49dc603c39b5cbd2e18e02176ef489bd89dde552495236e9798ae49a9f2e875\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IPriceOracle {\\n    function consult(address tokenIn, uint amountIn, address tokenOut) external returns (uint amountOut);\\n    function consultReadonly(address tokenIn, uint amountIn, address tokenOut) external view returns (uint amountOut);\\n}\",\"keccak256\":\"0x89007c980ea6b80d11137f91948147ea7cb56d0efbdf8e2400b8eecc57aed118\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IStaking {\\n    function stake(\\n        address _to,\\n        uint256 _amount\\n    ) external returns (uint256);\\n\\n    function claim(address _recipient, bool _rebasing) external returns (uint256);\\n\\n    function forfeit() external returns (uint256);\\n\\n    function toggleLock() external;\\n\\n    function unstake(\\n        address _to,\\n        uint256 _amount,\\n        bool _trigger\\n    ) external returns (uint256);\\n\\n    function rebase() external;\\n\\n    function index() external view returns (uint256);\\n\\n    function stakingSupply() external view returns (uint256);\\n\\n    function setBondDepositor(address _bondDepositor) external;\\n\\n    function allowExternalStaking(bool allow) external;\\n}\\n\",\"keccak256\":\"0x8d134fb8301c277a010cc5a3d1e34536135d91fceb7176d87c3dea5f23010837\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface ITreasury {\\n    function deposit(\\n        uint256 _amount,\\n        address _token,\\n        uint256 _payout\\n    ) external returns (uint256);\\n\\n    function depositForRedemption(uint _amount, address _token) external returns (uint256 send_);\\n\\n    function tokenValue(address _token, uint256 _amount) external view returns (uint256 value_);\\n\\n    function mint(address _recipient, uint256 _amount) external;\\n\\n    function manage(address _token, uint256 _amount) external;\\n\\n    function baseSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x32c6b5dc61e7dad246c0abc23ed009df87d9a43eab0a53252466b90d9751fe73\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IUniswapV2ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IUniswapV2ERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\",\"keccak256\":\"0xa8bc04fe333cf795f2882098679f5026bccd6d10c173f94a6f7e9d5c064e9284\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IUniswapV2ERC20.sol\\\";\\n\\ninterface IUniswapV2Pair is IUniswapV2ERC20 {\\n    function token0() external pure returns (address);\\n    function token1() external pure returns (address);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function mint(address to) external returns (uint liquidity);\\n    function sync() external;\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n}\",\"keccak256\":\"0xcc1533386ddac7a89c40271e937fa4c765772530a19561bf5bbf866e26ebc355\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\n\\n/// @notice Safe IERC20 and ETH transfer library that safely handles missing return values.\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/TransferHelper.sol)\\n/// Taken from Solmate\\nlibrary SafeERC20 {\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.approve.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        (bool success, ) = to.call{value: amount}(new bytes(0));\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n}\",\"keccak256\":\"0xbdd4f99088de7c23383b043055646de013b1312166a9bfa05e3995cdcf7ae022\",\"license\":\"AGPL-3.0-only\"},\"contracts/treasury/FrontEndRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.10;\\n\\nimport \\\"../access/PanaAccessControlled.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\nabstract contract FrontEndRewarder is PanaAccessControlled {\\n\\n  /* ========= STATE VARIABLES ========== */\\n\\n  uint256 public refReward; // % reward for referrer (3 decimals: 100 = 1%)\\n  uint256 public treasuryReward; // % reward for Treasury (3 decimals: 100 = 1%)\\n  mapping(address => uint256) public rewards; // front end operator rewards\\n  mapping(address => bool) public whitelisted; // whitelisted status for operators\\n\\n  IERC20 internal immutable pana; // reward token\\n\\n  constructor(\\n    IPanaAuthority _authority, \\n    IERC20 _pana\\n  ) PanaAccessControlled(_authority) {\\n    pana = _pana;\\n  }\\n\\n  /* ========= EXTERNAL FUNCTIONS ========== */\\n\\n  // pay reward to front end operator\\n  function getReward() external {\\n    uint256 reward = rewards[msg.sender];\\n\\n    rewards[msg.sender] = 0;\\n    pana.transfer(msg.sender, reward);\\n  }\\n\\n  /* ========= INTERNAL ========== */\\n\\n  /** \\n   * @notice adds rewards amount for front end operators and treasury based on _payout\\n   */\\n  function giveRewards(\\n    uint256 _payout,\\n    address _referral\\n  ) internal returns (uint256 toRef, uint256 toTreasury) {\\n    // first we calculate rewards paid to front end operator (referrer) and to the treasurer\\n    toRef = _payout * refReward / 1e4;\\n    toTreasury = _payout * treasuryReward / 1e4;\\n\\n    // and store them in our rewards mapping\\n    if (whitelisted[_referral]) {\\n      rewards[_referral] += toRef;\\n      rewards[authority.vault()] += toTreasury;\\n    } else { \\n      // the Treasury receives both rewards if referrer is not whitelisted\\n      rewards[authority.vault()] += toTreasury + toRef;\\n    }\\n  }\\n\\n  /**\\n   * @notice Send rewards to treasury which was minted as per giveRewards logic\\n   */\\n  function sendRewardsToTreasury(uint256 _toTreasury) internal {\\n    uint256 reward = rewards[authority.vault()];\\n\\n    if (reward > 0 && reward >= _toTreasury) {\\n      rewards[authority.vault()] -= _toTreasury;\\n      pana.transfer(authority.vault(), _toTreasury);\\n    }\\n  }\\n\\n  /**\\n   * @notice set rewards for front end operators and DAO\\n   */\\n  function setRewards(uint256 _toFrontEnd, uint256 _toTreasury) external onlyGovernor {\\n    refReward = _toFrontEnd;\\n    treasuryReward = _toTreasury;\\n  }\\n\\n  /**\\n   * @notice add or remove addresses from the reward whitelist\\n   */\\n  function whitelist(address _operator) external onlyPolicy {\\n    whitelisted[_operator] = !whitelisted[_operator];\\n  }\\n\\n  /**\\n   * @notice Manually fetch remaining rewards for Treasury\\n   */\\n  function getTreasuryRewards() external onlyGovernor {\\n    uint256 reward = rewards[authority.vault()];\\n\\n    if (reward > 0) {\\n      rewards[authority.vault()] = 0;\\n      pana.transfer(authority.vault(), reward);\\n    }\\n  }\\n}\",\"keccak256\":\"0x03131644f674e82f6e5cdebf5e4b4e4916400240b2ea3b6a49cc440b4ad5f8ae\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x610120604052600c60e08190526b15539055551213d49256915160a21b6101009081526200003191600091906200017b565b503480156200003f57600080fd5b506040516200595a3803806200595a83398101604081905262000062916200023a565b600180546001600160a01b0319166001600160a01b038716908117909155604051869186918691869186918691869183917f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a2506001600160a01b0390811660805293841660a0525090821660c052600880546001600160a01b03191691831691909117905560405163095ea7b360e01b81528582166004820152722cd76fe086b93ce2f768a00b22a000000000006024820152908716925063095ea7b391506044016020604051808303816000875af115801562000149573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200016f9190620002ba565b50505050505062000322565b8280546200018990620002e5565b90600052602060002090601f016020900481019282620001ad5760008555620001f8565b82601f10620001c857805160ff1916838001178555620001f8565b82800160010185558215620001f8579182015b82811115620001f8578251825591602001919060010190620001db565b50620002069291506200020a565b5090565b5b808211156200020657600081556001016200020b565b6001600160a01b03811681146200023757600080fd5b50565b600080600080600060a086880312156200025357600080fd5b8551620002608162000221565b6020870151909550620002738162000221565b6040870151909450620002868162000221565b6060870151909350620002998162000221565b6080870151909250620002ac8162000221565b809150509295509295909350565b600060208284031215620002cd57600080fd5b81518015158114620002de57600080fd5b9392505050565b600181811c90821680620002fa57607f821691505b602082108114156200031c57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05161558a620003d060003960008181612db101526139770152600081816126c301528181612ad101528181612b5001528181612d7701528181613a370152818161443901526144b80152600081816109c90152818161113901528181611e7b01528181612a9601528181612b1501528181612ebf01528181612f91015281816143fe0152818161447d0152818161467a0152818161474c0152614c73015261558a6000f3fe608060405234801561001057600080fd5b50600436106102775760003560e01c8063abbf4b1711610160578063c9b67af5116100d8578063e0b117ff1161008c578063e481b26511610071578063e481b265146106c7578063f1b7dc78146106da578063f3191a46146106ed57600080fd5b8063e0b117ff14610620578063e3684e391461066857600080fd5b8063d6db4df8116100bd578063d6db4df8146105d7578063d936547e146105ea578063de238ef71461060d57600080fd5b8063c9b67af5146105bc578063d2390aa2146105c457600080fd5b8063be399be51161012f578063c0680e2011610114578063c0680e2014610539578063c0aa0e8a1461054c578063c3e0fb1c1461059457600080fd5b8063be399be514610513578063bf7e214f1461052657600080fd5b8063abbf4b1714610419578063b1283e771461042c578063bc3b2b1214610488578063bcb296671461050057600080fd5b8063530e784f116101f35780637c770aae116101c25780639c769787116101a75780639c769787146103f6578063a2594ea9146103fe578063a42206101461040657600080fd5b80637c770aae146103b55780639b19251a146103e357600080fd5b8063530e784f1461035c578063649144391461036f578063654e51e71461038f5780637a9e5e4b146103a257600080fd5b80632630c12f1161024a5780633adec5a71161022f5780633adec5a71461032e5780633d18b912146103415780634889bf6d1461034957600080fd5b80632630c12f146102e0578063275074581461030b57600080fd5b80630700037d1461027c5780630a9d85eb146102af5780630aebeb4e146102c25780631def0708146102d7575b600080fd5b61029c61028a366004614d73565b60046020526000908152604090205481565b6040519081526020015b60405180910390f35b61029c6102bd366004614d90565b6106f6565b6102d56102d0366004614d90565b61073d565b005b61029c60035481565b6009546102f3906001600160a01b031681565b6040516001600160a01b0390911681526020016102a6565b61031e610319366004614d90565b61088c565b60405190151581526020016102a6565b61029c61033c366004614d90565b6108fd565b6102d561098e565b61029c610357366004614f4e565b610a3b565b6102d561036a366004614d73565b6111a9565b61038261037d366004614d73565b611277565b6040516102a69190615010565b6102d561039d366004615054565b611406565b6102d56103b0366004614d73565b6114bd565b6103c86103c3366004615076565b6115b3565b604080519384526020840192909252908201526060016102a6565b6102d56103f1366004614d73565b611924565b6102d56119f9565b6102d5611c8d565b61029c6104143660046150cc565b611f55565b61029c610427366004614d90565b6121e8565b61043f61043a366004614d90565b6122dd565b604080519889526001600160a01b039097166020890152941515958701959095529115156060860152608085015260a084015260c083019190915260e0820152610100016102a6565b6104cf610496366004614d90565b600d602052600090815260409020805460019091015465ffffffffffff80821691600160301b810490911690600160601b900460ff1684565b6040516102a6949392919093845265ffffffffffff9283166020850152911660408301521515606082015260800190565b61029c61050e366004614d90565b612340565b61029c610521366004614d73565b61237a565b6001546102f3906001600160a01b031681565b61029c6105473660046150cc565b612389565b61055f61055a366004614d90565b6123ba565b604080519515158652602086019490945265ffffffffffff92831693850193909352166060830152608082015260a0016102a6565b6105a76105a23660046150cc565b61240c565b604080519283529015156020830152016102a6565b6103826124d7565b61029c6105d23660046150f8565b6125c0565b6102d56105e53660046150cc565b612738565b61031e6105f8366004614d73565b60056020526000908152604090205460ff1681565b61029c61061b366004614d90565b6127fa565b61063361062e3660046150cc565b613043565b6040805195865265ffffffffffff9485166020870152928416928501929092528216606084015216608082015260a0016102a6565b61067b610676366004614d90565b6130a6565b6040805165ffffffffffff98891681529688166020880152948716948601949094529185166060850152909316608083015260ff90921660a082015290151560c082015260e0016102a6565b6103826106d5366004614d73565b61310e565b61029c6106e8366004614d90565b613333565b61029c60025481565b600080610702836133f2565b5050905080600b848154811061071a5761071a6151b3565b90600052602060002090600402016001015461073691906151df565b9392505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b491906151f6565b6001600160a01b0316336001600160a01b0316146000906107f15760405162461bcd60e51b81526004016107e89190615213565b60405180910390fd5b5042600b8281548110610806576108066151b3565b906000526020600020906004020160020160066101000a81548165ffffffffffff021916908365ffffffffffff1602179055506000600a828154811061084e5761084e6151b3565b6000918252602082206006909102019190915560405182917f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe591a250565b6000600a82815481106108a1576108a16151b3565b9060005260206000209060060201600001546000141580156108f7575042600b83815481106108d2576108d26151b3565b6000918252602090912060049091020160020154600160301b900465ffffffffffff16115b92915050565b600080600c8381548110610913576109136151b3565b60009182526020909120015461093490600160f01b900460ff16600a61539f565b61093d84613333565b610946856106f6565b61095091906153ae565b61095a91906153cd565b6009549091506001600160a01b0316156108f7576000610979846127fa565b905081811015610987578091505b5092915050565b33600081815260046020819052604080832080549390555163a9059cbb60e01b81529081019290925260248201819052906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044015b6020604051808303816000875af1158015610a13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3791906153ef565b5050565b60015460408051630505c8c960e01b815290516000926001600160a01b031691630505c8c99160048083019260209291908290030181865afa158015610a85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa991906151f6565b6001600160a01b0316336001600160a01b031614600090610add5760405162461bcd60e51b81526004016107e89190615213565b506020830151600090610af19042906151df565b90506000876001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b57919061540c565b60ff169050600086816020020151610b70578751610baf565b610b7b82600a61542f565b60208901518951610b9b906ec097ce7bc90715b34b9f10000000006153ae565b610ba591906153cd565b610baf91906153cd565b85519091506000908490610bc99063ffffffff16846153ae565b610bd391906153cd565b90506000620186a08a60026020020151610bed90856153ae565b610bf791906153cd565b610c01908461543b565b9050600083600860009054906101000a90046001600160a01b03166001600160a01b031663860f50486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7d9190615453565b60208d0151610c8c91906153ae565b610c9691906153cd565b600a805460408051610100810190915290995091925090808d6000602002015181526020018e6001600160a01b031681526020018c600060048110610cdd57610cdd6151b3565b6020020151151581526020018c600160048110610cfc57610cfc6151b3565b6020908102919091015115158252818101889052604080830188905260006060808501829052608094850182905286546001808201895597835291849020865160069093020191825585840151828801805488860151898501511515600160a81b027fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff911515600160a01b027fffffffffffffffffffffff0000000000000000000000000000000000000000009093166001600160a01b0390951694909417919091171691909117905593850151600282015560a080860151600383015560c0860151600483015560e090950151600590910155805193840181528e830151151584529083018590528c5165ffffffffffff1690830152600b92908201908c906020908102919091015165ffffffffffff90811683529181018690528354600180820186556000958652948290208451600490920201805491151560ff199092169190911781558382015194810194909455604080840151600280870180546060808901518816600160301b026bffffffffffffffffffffffff1990921694881694909417179055608095860151600390970196909655815160e08101835242851680825281850152938c16918401919091528c5163ffffffff90811691840191909152908c0151169181019190915260ff871660a0820152600c9160c08201908d90602002015115158152509080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548165ffffffffffff021916908365ffffffffffff16021790555060208201518160000160066101000a81548165ffffffffffff021916908365ffffffffffff160217905550604082015181600001600c6101000a81548165ffffffffffff021916908365ffffffffffff16021790555060608201518160000160126101000a81548165ffffffffffff021916908365ffffffffffff16021790555060808201518160000160186101000a81548165ffffffffffff021916908365ffffffffffff16021790555060a082015181600001601e6101000a81548160ff021916908360ff16021790555060c082015181600001601f6101000a81548160ff0219169083151502179055505050600e60008d6001600160a01b03166001600160a01b03168152602001908152602001600020879080600181540180825580915050600190039060005260206000200160009091909190915055896001600481106110a7576110a76151b3565b60200201511561112b5760085460405163095ea7b360e01b81526001600160a01b0391821660048201526000196024820152908d169063095ea7b3906044016020604051808303816000875af1158015611105573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112991906153ef565b505b6001600160a01b03808d16907f000000000000000000000000000000000000000000000000000000000000000016887f2f6ff727bd580b1d1b8332e28aa93ed4ec9d8b08d6e30d6b4c9f7aa63ca17f638e6001602002015160405161119291815260200190565b60405180910390a450505050505095945050505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122091906151f6565b6001600160a01b0316336001600160a01b0316146000906112545760405162461bcd60e51b81526004016107e89190615213565b50600980546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381166000908152600e602090815260408083208054825181850281018501909352808352606094938301828280156112d657602002820191906000526020600020905b8154815260200190600101908083116112c2575b50505050509050600080600090505b825181101561133557611310838281518110611303576113036151b3565b602002602001015161088c565b15611323578161131f8161546c565b9250505b8061132d8161546c565b9150506112e5565b5060008167ffffffffffffffff81111561135157611351614da9565b60405190808252806020026020018201604052801561137a578160200160208202803683370190505b5090506000805b84518110156113fb5761139f858281518110611303576113036151b3565b156113e9578481815181106113b6576113b66151b3565b60200260200101518383815181106113d0576113d06151b3565b6020908102919091010152816113e58161546c565b9250505b806113f38161546c565b915050611381565b509095945050505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611459573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147d91906151f6565b6001600160a01b0316336001600160a01b0316146000906114b15760405162461bcd60e51b81526004016107e89190615213565b50600291909155600355565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611510573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153491906151f6565b6001600160a01b0316336001600160a01b0316146000906115685760405162461bcd60e51b81526004016107e89190615213565b50600180546001600160a01b0319166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b600080600080600a89815481106115cc576115cc6151b3565b906000526020600020906006020190506000600b8a815481106115f1576115f16151b3565b60009182526020918290206040805160a0810182526004909302909101805460ff1615158352600181015493830193909352600283015465ffffffffffff80821692840192909252600160301b900481166060830181905260039093015460808301529092504291908216106116a95760405162461bcd60e51b815260206004820152601c60248201527f4465706f7369746f72793a206d61726b657420636f6e636c756465640000000060448201526064016107e8565b6116b38b826134d4565b60006116be8c613690565b9050898111156117105760405162461bcd60e51b815260206004820152601f60248201527f4465706f7369746f72793a206d6f7265207468616e206d61782070726963650060448201526064016107e8565b600c8c81548110611723576117236151b3565b60009182526020909120015461174490600160f01b900460ff16600a61539f565b8161175e8d6ec097ce7bc90715b34b9f10000000006153ae565b61176891906153cd565b61177291906153cd565b965083600301548711156117c85760405162461bcd60e51b815260206004820152601d60248201527f4465706f7369746f72793a206d61782073697a6520657863656564656400000060448201526064016107e8565b6001840154600160a01b900460ff166117e157866117e3565b8a5b8460000160008282546117f691906151df565b9091555050825161180b57826040015161181b565b81836040015161181b9190615487565b65ffffffffffff1695508a846005016000828254611839919061543b565b9250508190555086846004016000828254611854919061543b565b925050819055508684600201600082825461186f919061543b565b9091555050604080518c8152602081018390528d917f7880508a48fd3aee88f7e15917d85e39c3ad059e51ad4aca9bb46e7b4938b961910160405180910390a2506118bc8b8b888a613728565b6118c88887878e6139f6565b935082600201548260800151101561190c5760008084556040518c917f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe591a2611916565b6119168b82613b7c565b505050955095509592505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015611977573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199b91906151f6565b6001600160a01b0316336001600160a01b0316146000906119cf5760405162461bcd60e51b81526004016107e89190615213565b506001600160a01b03166000908152600560205260409020805460ff19811660ff90911615179055565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7091906151f6565b6001600160a01b0316336001600160a01b03161480611b165750600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015611add573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0191906151f6565b6001600160a01b0316336001600160a01b0316145b80611ba85750600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9391906151f6565b6001600160a01b0316336001600160a01b0316145b611bf45760405162461bcd60e51b815260206004820152600f60248201527f4f6e6c7920617574686f72697a6564000000000000000000000000000000000060448201526064016107e8565b600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6b91906151f6565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ce0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0491906151f6565b6001600160a01b0316336001600160a01b031614600090611d385760405162461bcd60e51b81526004016107e89190615213565b50600060046000600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db691906151f6565b6001600160a01b0316815260208101919091526040016000205490508015611f5257600060046000600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5591906151f6565b6001600160a01b03166001600160a01b03168152602001908152602001600020819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611efb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f1f91906151f6565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016109f4565b50565b6001600160a01b0382811660009081526007602090815260408083208584529091528120549091163314611fcb5760405162461bcd60e51b815260206004820152601e60248201527f4465706f7369746f72793a207472616e73666572206e6f7420666f756e64000060448201526064016107e8565b6001600160a01b0383166000908152600660205260409020805483908110611ff557611ff56151b3565b6000918252602090912060029091020160010154600160601b900465ffffffffffff16156120655760405162461bcd60e51b815260206004820152601960248201527f4465706f7369746f72793a206e6f74652072656465656d65640000000000000060448201526064016107e8565b503360009081526006602052604080822080546001600160a01b03861684529190922080549192918490811061209d5761209d6151b3565b600091825260208083208454600181810187559585528285206002948502909201805491909402909101908155918401805492909401805465ffffffffffff19811665ffffffffffff94851690811783558654600160301b908190048616026bffffffffffffffffffffffff1990921617178082558554600160601b9081900485160271ffffffffffff000000000000000000000000198216811783559554600160901b9081900490941690930265ffffffffffff60901b1990951677ffffffffffffffffffffffff00000000000000000000000019909316929092179390931790556001600160a01b03851681526006909152604090208054839081106121a7576121a76151b3565b60009182526020822060029091020190815560010180547fffffffffffffffff00000000000000000000000000000000000000000000000016905592915050565b600080600c83815481106121fe576121fe6151b3565b600091825260208083206040805160e081018252939091015465ffffffffffff8082168552600160301b82048116938501849052600160601b8204811692850192909252600160901b810482166060850152600160c01b8104909116608084015260ff600160f01b8204811660a0850152600160f81b90910416151560c083015290925061228c90426151df565b9050816040015165ffffffffffff1681600a86815481106122af576122af6151b3565b9060005260206000209060060201600201546122cb91906153ae565b6122d591906153cd565b949350505050565b600a81815481106122ed57600080fd5b60009182526020909120600690910201805460018201546002830154600384015460048501546005909501549395506001600160a01b0383169460ff600160a01b8504811695600160a81b909504169388565b600061234b826121e8565b600a838154811061235e5761235e6151b3565b9060005260206000209060060201600201546108f791906151df565b60006108f7826105d28461310e565b600e60205281600052604060002081815481106123a557600080fd5b90600052602060002001600091509150505481565b600b81815481106123ca57600080fd5b6000918252602090912060049091020180546001820154600283015460039093015460ff90921693509165ffffffffffff80821692600160301b909204169085565b6001600160a01b03821660009081526006602052604081208054829182918590811061243a5761243a6151b3565b60009182526020918290206040805160a0810182526002909302909101805480845260019091015465ffffffffffff80821695850195909552600160301b8104851692840192909252600160601b8204841660608401819052600160901b909204909316608083015291945091501580156124c1575042816040015165ffffffffffff1611155b80156124cd5750805115155b9150509250929050565b60606000805b600a54811015612515576124f08161088c565b1561250357816124ff8161546c565b9250505b8061250d8161546c565b9150506124dd565b5060008167ffffffffffffffff81111561253157612531614da9565b60405190808252806020026020018201604052801561255a578160200160208202803683370190505b5090506000805b600a548110156125b7576125748161088c565b156125a5578083838151811061258c5761258c6151b3565b6020908102919091010152816125a18161546c565b9250505b806125af8161546c565b915050612561565b50909392505050565b600042815b835181101561269c576000806125f4878785815181106125e7576125e76151b3565b602002602001015161240c565b915091508015612687576001600160a01b0387166000908152600660205260409020865185919088908690811061262d5761262d6151b3565b602002602001015181548110612645576126456151b3565b9060005260206000209060020201600101600c6101000a81548165ffffffffffff021916908365ffffffffffff1602179055508185612684919061543b565b94505b505080806126949061546c565b9150506125c5565b5060405163a9059cbb60e01b81526001600160a01b038581166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af115801561270c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061273091906153ef565b505092915050565b336000908152600660205260409020805482908110612759576127596151b3565b600091825260209091206001600290920201015465ffffffffffff166127c15760405162461bcd60e51b815260206004820152601a60248201527f4465706f7369746f72793a206e6f7465206e6f7420666f756e6400000000000060448201526064016107e8565b3360009081526007602090815260408083209383529290522080546001600160a01b0319166001600160a01b0392909216919091179055565b600080600a8381548110612810576128106151b3565b60009182526020808320604080516101008101825260069094029091018054845260018101546001600160a01b0381169385019390935260ff600160a01b84048116151592850192909252600160a81b909204161515606083015260028101546080830152600381015460a0830152600481015460c08301526005015460e0820152600c805491935090859081106128aa576128aa6151b3565b60009182526020918290206040805160e081018252919092015465ffffffffffff8082168352600160301b8204811694830194909452600160601b8104841692820192909252600160901b820483166060820152600160c01b8204909216608083015260ff600160f01b8204811660a0840152600160f81b9091041615801560c0830152909150612e4e576000826020015190506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561297e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129a291906151f6565b90506000826001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156129e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a0891906151f6565b9050600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015612a4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a6f91906154d4565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b03161480612b0557507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316145b15612b135791929190612bbf565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161480612b8457507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316145b612bbf5760405162461bcd60e51b815260206004820152600c60248201526b24b73b30b634b2103830b4b960a11b60448201526064016107e8565b6000846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612bff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c23919061540c565b60095460ff9190911691506000906001600160a01b0316639c5d6cb787612c4b85600a61542f565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015260248101919091529088166044820152606401602060405180830381865afa158015612c9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cc39190615453565b90506000612cd283600a61542f565b612cdc83876153ae565b612ce691906153cd565b612cf0908561543b565b9050600081896001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d579190615453565b612d6990670de0b6b3a76400006153ae565b612d7391906153cd565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316876001600160a01b03161415612e3e577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632986c0e56040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e319190615453565b612e3b90826153cd565b90505b9c9b505050505050505050505050565b600082602001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eb6919061540c565b60ff16905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612f1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f3f919061540c565b60ff16905081811115612f6757612f5682826151df565b612f60908261543b565b9050612f7e565b612f7181836151df565b612f7b90826151df565b90505b6009546001600160a01b0316639c5d6cb77f0000000000000000000000000000000000000000000000000000000000000000612fbb84600a61542f565b60208801516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201526024810192909252919091166044820152606401602060405180830381865afa158015613015573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130399190615453565b9695505050505050565b6006602052816000526040600020818154811061305f57600080fd5b60009182526020909120600290910201805460019091015490925065ffffffffffff8082169250600160301b8204811691600160601b8104821691600160901b9091041685565b600c81815481106130b657600080fd5b60009182526020909120015465ffffffffffff8082169250600160301b8204811691600160601b8104821691600160901b8204811691600160c01b81049091169060ff600160f01b8204811691600160f81b90041687565b6001600160a01b0381166000908152600660209081526040808320805482518185028101850190935280835260609493849084015b828210156131b95760008481526020908190206040805160a081018252600286029092018054835260019081015465ffffffffffff80821685870152600160301b8204811693850193909352600160601b810483166060850152600160901b900490911660808301529083529092019101613143565b505050509050600080600090505b8251811015613248578281815181106131e2576131e26151b3565b60200260200101516060015165ffffffffffff1660001480156132235750828181518110613212576132126151b3565b602002602001015160000151600014155b1561323657816132328161546c565b9250505b806132408161546c565b9150506131c7565b5060008167ffffffffffffffff81111561326457613264614da9565b60405190808252806020026020018201604052801561328d578160200160208202803683370190505b5090506000805b84518110156113fb578481815181106132af576132af6151b3565b60200260200101516060015165ffffffffffff1660001480156132f057508481815181106132df576132df6151b3565b602002602001015160000151600014155b156133215780838381518110613308576133086151b3565b60209081029190910101528161331d8161546c565b9250505b8061332b8161546c565b915050613294565b600854604080516310c1ea0960e31b815290516000926001600160a01b03169163860f50489160048083019260209291908290030181865afa15801561337d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133a19190615453565b600c83815481106133b4576133b46151b3565b6000918252602090912001546133d590600160f01b900460ff16600a61539f565b6133de84612340565b6133e891906153ae565b6108f791906153cd565b6000818152600d6020908152604080832081516080810183528154815260019091015465ffffffffffff80821694830194909452600160301b810490931691810191909152600160601b90910460ff1615156060820181905282918291613464576000806000935093509350506134cd565b6020810151613473904261551b565b9250806040015165ffffffffffff168365ffffffffffff161091508161349a5780516134c9565b806040015165ffffffffffff168365ffffffffffff1682600001516134bf91906153ae565b6134c991906153cd565b9350505b9193909250565b6134dd826121e8565b600a83815481106134f0576134f06151b3565b9060005260206000209060060201600201600082825461351091906151df565b9250508190555080600c838154811061352b5761352b6151b3565b60009182526020808320909101805465ffffffffffff94909416600160301b026bffffffffffff0000000000001990941693909317909255838152600d909152604090206001015460ff600160601b9091041615610a37576000828152600d6020526040812090808061359d866133f2565b92509250925082600b87815481106135b7576135b76151b3565b906000526020600020906004020160010160008282546135d791906151df565b9091555050801561366f57828460000160008282546135f691906151df565b9091555050600184018054839190600690613621908490600160301b900465ffffffffffff1661551b565b92506101000a81548165ffffffffffff021916908365ffffffffffff160217905550848460010160006101000a81548165ffffffffffff021916908365ffffffffffff160217905550613688565b6001840180546cff000000000000000000000000191690555b505050505050565b600080600c83815481106136a6576136a66151b3565b6000918252602090912001546136c790600160f01b900460ff16600a61539f565b6136d084614091565b600b85815481106136e3576136e36151b3565b9060005260206000209060040201600101546136ff91906153ae565b61370991906153cd565b6009549091506001600160a01b0316156108f757600061097984614162565b6000600a858154811061373d5761373d6151b3565b60009182526020808320604080516101008101825260069094029091018054845260018101546001600160a01b0381169385019390935260ff600160a01b84048116151592850192909252600160a81b90920416158015606084015260028201546080840152600382015460a0840152600482015460c084015260059091015460e083015290925081906138955760208301516137e5906001600160a01b03163330896147d2565b6137ef8585614903565b92509050600082613800838861543b565b61380a919061543b565b600854602086015160405163bc157ac160e01b8152600481018b90526001600160a01b03918216602482015260448101849052929350169063bc157ac1906064016020604051808303816000875af115801561386a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061388e9190615453565b505061394c565b60085460208401516138b6916001600160a01b0391821691339116896147d2565b6138c08585614903565b6008549093509091506001600160a01b03166340c10f1930846138e3858a61543b565b6138ed919061543b565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561393357600080fd5b505af1158015613947573d6000803e3d6000fd5b505050505b811561395b5761395b82614af1565b6040516356e4bb9760e11b8152306004820152602481018690527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063adc9772e906044016020604051808303816000875af11580156139c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139ec9190615453565b5050505050505050565b6001600160a01b03848116600090815260066020526040908190208054825160a08101938490526319a948db60e21b90935260a483018790529290919081907f0000000000000000000000000000000000000000000000000000000000000000166366a5236c60c48301602060405180830381865afa158015613a7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aa19190615453565b815265ffffffffffff4281166020808401919091529681166040808401919091526000606080850182905297831660809485015285546001818101885596825290899020855160029092020190815597840151979094018054948401519684015193909201518116600160901b0265ffffffffffff60901b19938216600160601b029390931677ffffffffffffffffffffffff00000000000000000000000019968216600160301b026bffffffffffffffffffffffff1990951697909116969096179290921793909316939093179190911790915592915050565b6000600c8381548110613b9157613b916151b3565b60009182526020918290206040805160e081018252919092015465ffffffffffff808216808452600160301b8304821695840195909552600160601b8204811693830193909352600160901b810483166060830152600160c01b81049092166080820181905260ff600160f01b8404811660a0840152600160f81b909304909216151560c08201529250613c2491615487565b65ffffffffffff168265ffffffffffff161061408c576000600a8481548110613c4f57613c4f6151b3565b60009182526020808320604080516101008101825260069094029091018054845260018101546001600160a01b0381169385019390935260ff600160a01b84048116151592850192909252600160a81b909204161515606083015260028101546080830152600381015460a0830152600481015460c08301526005015460e0820152600b8054919350859187908110613cea57613cea6151b3565b906000526020600020906004020160020160069054906101000a900465ffffffffffff16613d18919061551b565b65ffffffffffff1690506000613d2d86613690565b905060008360400151613d41578351613d82565b60a0850151613d5190600a61539f565b84518390613d6e906ec097ce7bc90715b34b9f10000000006153ae565b613d7891906153cd565b613d8291906153cd565b905082856060015165ffffffffffff1682613d9d91906153ae565b613da791906153cd565b600a8881548110613dba57613dba6151b3565b906000526020600020906006020160030181905550600083866040015165ffffffffffff1683613dea91906153ae565b613df491906153cd565b9050600081600860009054906101000a90046001600160a01b03166001600160a01b031663860f50486040518163ffffffff1660e01b8152600401602060405180830381865afa158015613e4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e709190615453565b613e7a90866153ae565b613e8491906153cd565b9050887f78f9c01d72705dba80d6ce051d36a1f987bf2a3800fee938c111a2ae741e57d1600b8b81548110613ebb57613ebb6151b3565b90600052602060002090600402016001015483604051613ee5929190918252602082015260400190565b60405180910390a2600b8981548110613f0057613f006151b3565b9060005260206000209060040201600101548110613f465780600b8a81548110613f2c57613f2c6151b3565b90600052602060002090600402016001018190555061404a565b600081600b8b81548110613f5c57613f5c6151b3565b906000526020600020906004020160010154613f7891906151df565b905060405180608001604052808281526020018a65ffffffffffff168152602001896080015165ffffffffffff16815260200160011515815250600d60008c81526020019081526020016000206000820151816000015560208201518160010160006101000a81548165ffffffffffff021916908365ffffffffffff16021790555060408201518160010160066101000a81548165ffffffffffff021916908365ffffffffffff160217905550606082015181600101600c6101000a81548160ff021916908315150217905550905050505b87600c8a8154811061405e5761405e6151b3565b6000918252602090912001805465ffffffffffff191665ffffffffffff929092169190911790555050505050505b505050565b600854604080516310c1ea0960e31b815290516000926001600160a01b03169163860f50489160048083019260209291908290030181865afa1580156140db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140ff9190615453565b600c8381548110614112576141126151b3565b60009182526020909120015461413390600160f01b900460ff16600a61539f565b600a8481548110614146576141466151b3565b9060005260206000209060060201600201546133e891906153ae565b600080600a8381548110614178576141786151b3565b60009182526020808320604080516101008101825260069094029091018054845260018101546001600160a01b0381169385019390935260ff600160a01b84048116151592850192909252600160a81b909204161515606083015260028101546080830152600381015460a0830152600481015460c08301526005015460e0820152600c80549193509085908110614212576142126151b3565b60009182526020918290206040805160e081018252919092015465ffffffffffff8082168352600160301b8204811694830194909452600160601b8104841692820192909252600160901b820483166060820152600160c01b8204909216608083015260ff600160f01b8204811660a0840152600160f81b9091041615801560c0830152909150614609576000826020015190506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156142e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061430a91906151f6565b90506000826001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561434c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061437091906151f6565b9050600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156143b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143d791906154d4565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316148061446d57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316145b1561447b5791929190614527565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031614806144ec57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316145b6145275760405162461bcd60e51b815260206004820152600c60248201526b24b73b30b634b2103830b4b960a11b60448201526064016107e8565b6000846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015614567573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061458b919061540c565b60095460ff9190911691506000906001600160a01b0316638c86f1e4876145b385600a61542f565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152602481019190915290881660448201526064016020604051808303816000875af1158015612c9f573d6000803e3d6000fd5b600082602001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561464d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614671919061540c565b60ff16905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156146d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146fa919061540c565b60ff169050818111156147225761471182826151df565b61471b908261543b565b9050614739565b61472c81836151df565b61473690826151df565b90505b6009546001600160a01b0316638c86f1e47f000000000000000000000000000000000000000000000000000000000000000061477684600a61542f565b60208801516040516001600160e01b031960e086901b1681526001600160a01b03938416600482015260248101929092529190911660448201526064016020604051808303816000875af1158015613015573d6000803e3d6000fd5b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b179052915160009283929088169161484b9190615542565b6000604051808303816000865af19150503d8060008114614888576040519150601f19603f3d011682016040523d82523d6000602084013e61488d565b606091505b50915091508180156148b75750805115806148b75750808060200190518101906148b791906153ef565b6136885760405162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c454400000000000000000000000060448201526064016107e8565b6000806127106002548561491791906153ae565b61492191906153cd565b91506127106003548561493491906153ae565b61493e91906153cd565b6001600160a01b03841660009081526005602052604090205490915060ff1615614a3b576001600160a01b0383166000908152600460205260408120805484929061498a90849061543b565b90915550506001546040805163fbfa77cf60e01b8152905183926004926000926001600160a01b039092169163fbfa77cf9180860191602091819003870181865afa1580156149dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a0191906151f6565b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254614a30919061543b565b90915550614aea9050565b614a45828261543b565b6001546040805163fbfa77cf60e01b815290516004926000926001600160a01b039091169163fbfa77cf9180860191602091819003870181865afa158015614a91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614ab591906151f6565b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254614ae4919061543b565b90915550505b9250929050565b600060046000600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614b4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b6e91906151f6565b6001600160a01b03166001600160a01b03168152602001908152602001600020549050600081118015614ba15750818110155b15610a37578160046000600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614bfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614c2291906151f6565b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254614c5191906151df565b90915550506001546040805163fbfa77cf60e01b815290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169363a9059cbb9391169163fbfa77cf916004808201926020929091908290030181865afa158015614cc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614ced91906151f6565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018590526044016020604051808303816000875af1158015614d3a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061408c91906153ef565b6001600160a01b0381168114611f5257600080fd5b600060208284031215614d8557600080fd5b813561073681614d5e565b600060208284031215614da257600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715614de257614de2614da9565b60405290565b6040516080810167ffffffffffffffff81118282101715614de257614de2614da9565b604051601f8201601f1916810167ffffffffffffffff81118282101715614e3457614e34614da9565b604052919050565b60006040516060810181811067ffffffffffffffff82111715614e6157614e61614da9565b6040529050806060830184811115614e7857600080fd5b835b81811015614e92578035835260209283019201614e7a565b50505092915050565b8015158114611f5257600080fd5b600082601f830112614eba57600080fd5b614ec2614dbf565b806040840185811115614ed457600080fd5b845b818110156113fb578035845260209384019301614ed6565b63ffffffff81168114611f5257600080fd5b600082601f830112614f1157600080fd5b614f19614dbf565b806040840185811115614f2b57600080fd5b845b818110156113fb578035614f4081614eee565b845260209384019301614f2d565b60008060008060006101808688031215614f6757600080fd5b8535614f7281614d5e565b94506020603f87018813614f8557600080fd5b614f9188828901614e3c565b945087609f880112614fa257600080fd5b614faa614de8565b8061010089018a811115614fbd57600080fd5b60808a015b81811015614fe2578035614fd581614e9b565b8452928401928401614fc2565b50819650614ff08b82614ea9565b955050505050615004876101408801614f00565b90509295509295909350565b6020808252825182820181905260009190848201906040850190845b818110156150485783518352928401929184019160010161502c565b50909695505050505050565b6000806040838503121561506757600080fd5b50508035926020909101359150565b600080600080600060a0868803121561508e57600080fd5b85359450602086013593506040860135925060608601356150ae81614d5e565b915060808601356150be81614d5e565b809150509295509295909350565b600080604083850312156150df57600080fd5b82356150ea81614d5e565b946020939093013593505050565b6000806040838503121561510b57600080fd5b823561511681614d5e565b915060208381013567ffffffffffffffff8082111561513457600080fd5b818601915086601f83011261514857600080fd5b81358181111561515a5761515a614da9565b8060051b915061516b848301614e0b565b818152918301840191848101908984111561518557600080fd5b938501935b838510156151a35784358252938501939085019061518a565b8096505050505050509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156151f1576151f16151c9565b500390565b60006020828403121561520857600080fd5b815161073681614d5e565b600060208083526000845481600182811c91508083168061523557607f831692505b85831081141561525357634e487b7160e01b85526022600452602485fd5b8786018381526020018180156152705760018114615281576152ac565b60ff198616825287820196506152ac565b60008b81526020902060005b868110156152a65781548482015290850190890161528d565b83019750505b50949998505050505050505050565b600181815b808511156152f65781600019048211156152dc576152dc6151c9565b808516156152e957918102915b93841c93908002906152c0565b509250929050565b60008261530d575060016108f7565b8161531a575060006108f7565b8160018114615330576002811461533a57615356565b60019150506108f7565b60ff84111561534b5761534b6151c9565b50506001821b6108f7565b5060208310610133831016604e8410600b8410161715615379575081810a6108f7565b61538383836152bb565b8060001904821115615397576153976151c9565b029392505050565b600061073660ff8416836152fe565b60008160001904831182151516156153c8576153c86151c9565b500290565b6000826153ea57634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561540157600080fd5b815161073681614e9b565b60006020828403121561541e57600080fd5b815160ff8116811461073657600080fd5b600061073683836152fe565b6000821982111561544e5761544e6151c9565b500190565b60006020828403121561546557600080fd5b5051919050565b6000600019821415615480576154806151c9565b5060010190565b600065ffffffffffff8083168185168083038211156154a8576154a86151c9565b01949350505050565b80516dffffffffffffffffffffffffffff811681146154cf57600080fd5b919050565b6000806000606084860312156154e957600080fd5b6154f2846154b1565b9250615500602085016154b1565b9150604084015161551081614eee565b809150509250925092565b600065ffffffffffff8381169083168181101561553a5761553a6151c9565b039392505050565b6000825160005b818110156155635760208186018101518583015201615549565b81811115615572576000828501525b50919091019291505056fea164736f6c634300080a000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102775760003560e01c8063abbf4b1711610160578063c9b67af5116100d8578063e0b117ff1161008c578063e481b26511610071578063e481b265146106c7578063f1b7dc78146106da578063f3191a46146106ed57600080fd5b8063e0b117ff14610620578063e3684e391461066857600080fd5b8063d6db4df8116100bd578063d6db4df8146105d7578063d936547e146105ea578063de238ef71461060d57600080fd5b8063c9b67af5146105bc578063d2390aa2146105c457600080fd5b8063be399be51161012f578063c0680e2011610114578063c0680e2014610539578063c0aa0e8a1461054c578063c3e0fb1c1461059457600080fd5b8063be399be514610513578063bf7e214f1461052657600080fd5b8063abbf4b1714610419578063b1283e771461042c578063bc3b2b1214610488578063bcb296671461050057600080fd5b8063530e784f116101f35780637c770aae116101c25780639c769787116101a75780639c769787146103f6578063a2594ea9146103fe578063a42206101461040657600080fd5b80637c770aae146103b55780639b19251a146103e357600080fd5b8063530e784f1461035c578063649144391461036f578063654e51e71461038f5780637a9e5e4b146103a257600080fd5b80632630c12f1161024a5780633adec5a71161022f5780633adec5a71461032e5780633d18b912146103415780634889bf6d1461034957600080fd5b80632630c12f146102e0578063275074581461030b57600080fd5b80630700037d1461027c5780630a9d85eb146102af5780630aebeb4e146102c25780631def0708146102d7575b600080fd5b61029c61028a366004614d73565b60046020526000908152604090205481565b6040519081526020015b60405180910390f35b61029c6102bd366004614d90565b6106f6565b6102d56102d0366004614d90565b61073d565b005b61029c60035481565b6009546102f3906001600160a01b031681565b6040516001600160a01b0390911681526020016102a6565b61031e610319366004614d90565b61088c565b60405190151581526020016102a6565b61029c61033c366004614d90565b6108fd565b6102d561098e565b61029c610357366004614f4e565b610a3b565b6102d561036a366004614d73565b6111a9565b61038261037d366004614d73565b611277565b6040516102a69190615010565b6102d561039d366004615054565b611406565b6102d56103b0366004614d73565b6114bd565b6103c86103c3366004615076565b6115b3565b604080519384526020840192909252908201526060016102a6565b6102d56103f1366004614d73565b611924565b6102d56119f9565b6102d5611c8d565b61029c6104143660046150cc565b611f55565b61029c610427366004614d90565b6121e8565b61043f61043a366004614d90565b6122dd565b604080519889526001600160a01b039097166020890152941515958701959095529115156060860152608085015260a084015260c083019190915260e0820152610100016102a6565b6104cf610496366004614d90565b600d602052600090815260409020805460019091015465ffffffffffff80821691600160301b810490911690600160601b900460ff1684565b6040516102a6949392919093845265ffffffffffff9283166020850152911660408301521515606082015260800190565b61029c61050e366004614d90565b612340565b61029c610521366004614d73565b61237a565b6001546102f3906001600160a01b031681565b61029c6105473660046150cc565b612389565b61055f61055a366004614d90565b6123ba565b604080519515158652602086019490945265ffffffffffff92831693850193909352166060830152608082015260a0016102a6565b6105a76105a23660046150cc565b61240c565b604080519283529015156020830152016102a6565b6103826124d7565b61029c6105d23660046150f8565b6125c0565b6102d56105e53660046150cc565b612738565b61031e6105f8366004614d73565b60056020526000908152604090205460ff1681565b61029c61061b366004614d90565b6127fa565b61063361062e3660046150cc565b613043565b6040805195865265ffffffffffff9485166020870152928416928501929092528216606084015216608082015260a0016102a6565b61067b610676366004614d90565b6130a6565b6040805165ffffffffffff98891681529688166020880152948716948601949094529185166060850152909316608083015260ff90921660a082015290151560c082015260e0016102a6565b6103826106d5366004614d73565b61310e565b61029c6106e8366004614d90565b613333565b61029c60025481565b600080610702836133f2565b5050905080600b848154811061071a5761071a6151b3565b90600052602060002090600402016001015461073691906151df565b9392505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b491906151f6565b6001600160a01b0316336001600160a01b0316146000906107f15760405162461bcd60e51b81526004016107e89190615213565b60405180910390fd5b5042600b8281548110610806576108066151b3565b906000526020600020906004020160020160066101000a81548165ffffffffffff021916908365ffffffffffff1602179055506000600a828154811061084e5761084e6151b3565b6000918252602082206006909102019190915560405182917f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe591a250565b6000600a82815481106108a1576108a16151b3565b9060005260206000209060060201600001546000141580156108f7575042600b83815481106108d2576108d26151b3565b6000918252602090912060049091020160020154600160301b900465ffffffffffff16115b92915050565b600080600c8381548110610913576109136151b3565b60009182526020909120015461093490600160f01b900460ff16600a61539f565b61093d84613333565b610946856106f6565b61095091906153ae565b61095a91906153cd565b6009549091506001600160a01b0316156108f7576000610979846127fa565b905081811015610987578091505b5092915050565b33600081815260046020819052604080832080549390555163a9059cbb60e01b81529081019290925260248201819052906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044015b6020604051808303816000875af1158015610a13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3791906153ef565b5050565b60015460408051630505c8c960e01b815290516000926001600160a01b031691630505c8c99160048083019260209291908290030181865afa158015610a85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa991906151f6565b6001600160a01b0316336001600160a01b031614600090610add5760405162461bcd60e51b81526004016107e89190615213565b506020830151600090610af19042906151df565b90506000876001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b57919061540c565b60ff169050600086816020020151610b70578751610baf565b610b7b82600a61542f565b60208901518951610b9b906ec097ce7bc90715b34b9f10000000006153ae565b610ba591906153cd565b610baf91906153cd565b85519091506000908490610bc99063ffffffff16846153ae565b610bd391906153cd565b90506000620186a08a60026020020151610bed90856153ae565b610bf791906153cd565b610c01908461543b565b9050600083600860009054906101000a90046001600160a01b03166001600160a01b031663860f50486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7d9190615453565b60208d0151610c8c91906153ae565b610c9691906153cd565b600a805460408051610100810190915290995091925090808d6000602002015181526020018e6001600160a01b031681526020018c600060048110610cdd57610cdd6151b3565b6020020151151581526020018c600160048110610cfc57610cfc6151b3565b6020908102919091015115158252818101889052604080830188905260006060808501829052608094850182905286546001808201895597835291849020865160069093020191825585840151828801805488860151898501511515600160a81b027fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff911515600160a01b027fffffffffffffffffffffff0000000000000000000000000000000000000000009093166001600160a01b0390951694909417919091171691909117905593850151600282015560a080860151600383015560c0860151600483015560e090950151600590910155805193840181528e830151151584529083018590528c5165ffffffffffff1690830152600b92908201908c906020908102919091015165ffffffffffff90811683529181018690528354600180820186556000958652948290208451600490920201805491151560ff199092169190911781558382015194810194909455604080840151600280870180546060808901518816600160301b026bffffffffffffffffffffffff1990921694881694909417179055608095860151600390970196909655815160e08101835242851680825281850152938c16918401919091528c5163ffffffff90811691840191909152908c0151169181019190915260ff871660a0820152600c9160c08201908d90602002015115158152509080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548165ffffffffffff021916908365ffffffffffff16021790555060208201518160000160066101000a81548165ffffffffffff021916908365ffffffffffff160217905550604082015181600001600c6101000a81548165ffffffffffff021916908365ffffffffffff16021790555060608201518160000160126101000a81548165ffffffffffff021916908365ffffffffffff16021790555060808201518160000160186101000a81548165ffffffffffff021916908365ffffffffffff16021790555060a082015181600001601e6101000a81548160ff021916908360ff16021790555060c082015181600001601f6101000a81548160ff0219169083151502179055505050600e60008d6001600160a01b03166001600160a01b03168152602001908152602001600020879080600181540180825580915050600190039060005260206000200160009091909190915055896001600481106110a7576110a76151b3565b60200201511561112b5760085460405163095ea7b360e01b81526001600160a01b0391821660048201526000196024820152908d169063095ea7b3906044016020604051808303816000875af1158015611105573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112991906153ef565b505b6001600160a01b03808d16907f000000000000000000000000000000000000000000000000000000000000000016887f2f6ff727bd580b1d1b8332e28aa93ed4ec9d8b08d6e30d6b4c9f7aa63ca17f638e6001602002015160405161119291815260200190565b60405180910390a450505050505095945050505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122091906151f6565b6001600160a01b0316336001600160a01b0316146000906112545760405162461bcd60e51b81526004016107e89190615213565b50600980546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381166000908152600e602090815260408083208054825181850281018501909352808352606094938301828280156112d657602002820191906000526020600020905b8154815260200190600101908083116112c2575b50505050509050600080600090505b825181101561133557611310838281518110611303576113036151b3565b602002602001015161088c565b15611323578161131f8161546c565b9250505b8061132d8161546c565b9150506112e5565b5060008167ffffffffffffffff81111561135157611351614da9565b60405190808252806020026020018201604052801561137a578160200160208202803683370190505b5090506000805b84518110156113fb5761139f858281518110611303576113036151b3565b156113e9578481815181106113b6576113b66151b3565b60200260200101518383815181106113d0576113d06151b3565b6020908102919091010152816113e58161546c565b9250505b806113f38161546c565b915050611381565b509095945050505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611459573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147d91906151f6565b6001600160a01b0316336001600160a01b0316146000906114b15760405162461bcd60e51b81526004016107e89190615213565b50600291909155600355565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611510573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153491906151f6565b6001600160a01b0316336001600160a01b0316146000906115685760405162461bcd60e51b81526004016107e89190615213565b50600180546001600160a01b0319166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b600080600080600a89815481106115cc576115cc6151b3565b906000526020600020906006020190506000600b8a815481106115f1576115f16151b3565b60009182526020918290206040805160a0810182526004909302909101805460ff1615158352600181015493830193909352600283015465ffffffffffff80821692840192909252600160301b900481166060830181905260039093015460808301529092504291908216106116a95760405162461bcd60e51b815260206004820152601c60248201527f4465706f7369746f72793a206d61726b657420636f6e636c756465640000000060448201526064016107e8565b6116b38b826134d4565b60006116be8c613690565b9050898111156117105760405162461bcd60e51b815260206004820152601f60248201527f4465706f7369746f72793a206d6f7265207468616e206d61782070726963650060448201526064016107e8565b600c8c81548110611723576117236151b3565b60009182526020909120015461174490600160f01b900460ff16600a61539f565b8161175e8d6ec097ce7bc90715b34b9f10000000006153ae565b61176891906153cd565b61177291906153cd565b965083600301548711156117c85760405162461bcd60e51b815260206004820152601d60248201527f4465706f7369746f72793a206d61782073697a6520657863656564656400000060448201526064016107e8565b6001840154600160a01b900460ff166117e157866117e3565b8a5b8460000160008282546117f691906151df565b9091555050825161180b57826040015161181b565b81836040015161181b9190615487565b65ffffffffffff1695508a846005016000828254611839919061543b565b9250508190555086846004016000828254611854919061543b565b925050819055508684600201600082825461186f919061543b565b9091555050604080518c8152602081018390528d917f7880508a48fd3aee88f7e15917d85e39c3ad059e51ad4aca9bb46e7b4938b961910160405180910390a2506118bc8b8b888a613728565b6118c88887878e6139f6565b935082600201548260800151101561190c5760008084556040518c917f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe591a2611916565b6119168b82613b7c565b505050955095509592505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015611977573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199b91906151f6565b6001600160a01b0316336001600160a01b0316146000906119cf5760405162461bcd60e51b81526004016107e89190615213565b506001600160a01b03166000908152600560205260409020805460ff19811660ff90911615179055565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7091906151f6565b6001600160a01b0316336001600160a01b03161480611b165750600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015611add573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0191906151f6565b6001600160a01b0316336001600160a01b0316145b80611ba85750600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9391906151f6565b6001600160a01b0316336001600160a01b0316145b611bf45760405162461bcd60e51b815260206004820152600f60248201527f4f6e6c7920617574686f72697a6564000000000000000000000000000000000060448201526064016107e8565b600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6b91906151f6565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ce0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0491906151f6565b6001600160a01b0316336001600160a01b031614600090611d385760405162461bcd60e51b81526004016107e89190615213565b50600060046000600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db691906151f6565b6001600160a01b0316815260208101919091526040016000205490508015611f5257600060046000600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5591906151f6565b6001600160a01b03166001600160a01b03168152602001908152602001600020819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611efb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f1f91906151f6565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016109f4565b50565b6001600160a01b0382811660009081526007602090815260408083208584529091528120549091163314611fcb5760405162461bcd60e51b815260206004820152601e60248201527f4465706f7369746f72793a207472616e73666572206e6f7420666f756e64000060448201526064016107e8565b6001600160a01b0383166000908152600660205260409020805483908110611ff557611ff56151b3565b6000918252602090912060029091020160010154600160601b900465ffffffffffff16156120655760405162461bcd60e51b815260206004820152601960248201527f4465706f7369746f72793a206e6f74652072656465656d65640000000000000060448201526064016107e8565b503360009081526006602052604080822080546001600160a01b03861684529190922080549192918490811061209d5761209d6151b3565b600091825260208083208454600181810187559585528285206002948502909201805491909402909101908155918401805492909401805465ffffffffffff19811665ffffffffffff94851690811783558654600160301b908190048616026bffffffffffffffffffffffff1990921617178082558554600160601b9081900485160271ffffffffffff000000000000000000000000198216811783559554600160901b9081900490941690930265ffffffffffff60901b1990951677ffffffffffffffffffffffff00000000000000000000000019909316929092179390931790556001600160a01b03851681526006909152604090208054839081106121a7576121a76151b3565b60009182526020822060029091020190815560010180547fffffffffffffffff00000000000000000000000000000000000000000000000016905592915050565b600080600c83815481106121fe576121fe6151b3565b600091825260208083206040805160e081018252939091015465ffffffffffff8082168552600160301b82048116938501849052600160601b8204811692850192909252600160901b810482166060850152600160c01b8104909116608084015260ff600160f01b8204811660a0850152600160f81b90910416151560c083015290925061228c90426151df565b9050816040015165ffffffffffff1681600a86815481106122af576122af6151b3565b9060005260206000209060060201600201546122cb91906153ae565b6122d591906153cd565b949350505050565b600a81815481106122ed57600080fd5b60009182526020909120600690910201805460018201546002830154600384015460048501546005909501549395506001600160a01b0383169460ff600160a01b8504811695600160a81b909504169388565b600061234b826121e8565b600a838154811061235e5761235e6151b3565b9060005260206000209060060201600201546108f791906151df565b60006108f7826105d28461310e565b600e60205281600052604060002081815481106123a557600080fd5b90600052602060002001600091509150505481565b600b81815481106123ca57600080fd5b6000918252602090912060049091020180546001820154600283015460039093015460ff90921693509165ffffffffffff80821692600160301b909204169085565b6001600160a01b03821660009081526006602052604081208054829182918590811061243a5761243a6151b3565b60009182526020918290206040805160a0810182526002909302909101805480845260019091015465ffffffffffff80821695850195909552600160301b8104851692840192909252600160601b8204841660608401819052600160901b909204909316608083015291945091501580156124c1575042816040015165ffffffffffff1611155b80156124cd5750805115155b9150509250929050565b60606000805b600a54811015612515576124f08161088c565b1561250357816124ff8161546c565b9250505b8061250d8161546c565b9150506124dd565b5060008167ffffffffffffffff81111561253157612531614da9565b60405190808252806020026020018201604052801561255a578160200160208202803683370190505b5090506000805b600a548110156125b7576125748161088c565b156125a5578083838151811061258c5761258c6151b3565b6020908102919091010152816125a18161546c565b9250505b806125af8161546c565b915050612561565b50909392505050565b600042815b835181101561269c576000806125f4878785815181106125e7576125e76151b3565b602002602001015161240c565b915091508015612687576001600160a01b0387166000908152600660205260409020865185919088908690811061262d5761262d6151b3565b602002602001015181548110612645576126456151b3565b9060005260206000209060020201600101600c6101000a81548165ffffffffffff021916908365ffffffffffff1602179055508185612684919061543b565b94505b505080806126949061546c565b9150506125c5565b5060405163a9059cbb60e01b81526001600160a01b038581166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af115801561270c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061273091906153ef565b505092915050565b336000908152600660205260409020805482908110612759576127596151b3565b600091825260209091206001600290920201015465ffffffffffff166127c15760405162461bcd60e51b815260206004820152601a60248201527f4465706f7369746f72793a206e6f7465206e6f7420666f756e6400000000000060448201526064016107e8565b3360009081526007602090815260408083209383529290522080546001600160a01b0319166001600160a01b0392909216919091179055565b600080600a8381548110612810576128106151b3565b60009182526020808320604080516101008101825260069094029091018054845260018101546001600160a01b0381169385019390935260ff600160a01b84048116151592850192909252600160a81b909204161515606083015260028101546080830152600381015460a0830152600481015460c08301526005015460e0820152600c805491935090859081106128aa576128aa6151b3565b60009182526020918290206040805160e081018252919092015465ffffffffffff8082168352600160301b8204811694830194909452600160601b8104841692820192909252600160901b820483166060820152600160c01b8204909216608083015260ff600160f01b8204811660a0840152600160f81b9091041615801560c0830152909150612e4e576000826020015190506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561297e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129a291906151f6565b90506000826001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156129e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a0891906151f6565b9050600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015612a4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a6f91906154d4565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b03161480612b0557507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316145b15612b135791929190612bbf565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161480612b8457507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316145b612bbf5760405162461bcd60e51b815260206004820152600c60248201526b24b73b30b634b2103830b4b960a11b60448201526064016107e8565b6000846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612bff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c23919061540c565b60095460ff9190911691506000906001600160a01b0316639c5d6cb787612c4b85600a61542f565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015260248101919091529088166044820152606401602060405180830381865afa158015612c9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cc39190615453565b90506000612cd283600a61542f565b612cdc83876153ae565b612ce691906153cd565b612cf0908561543b565b9050600081896001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d579190615453565b612d6990670de0b6b3a76400006153ae565b612d7391906153cd565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316876001600160a01b03161415612e3e577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632986c0e56040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e319190615453565b612e3b90826153cd565b90505b9c9b505050505050505050505050565b600082602001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eb6919061540c565b60ff16905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612f1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f3f919061540c565b60ff16905081811115612f6757612f5682826151df565b612f60908261543b565b9050612f7e565b612f7181836151df565b612f7b90826151df565b90505b6009546001600160a01b0316639c5d6cb77f0000000000000000000000000000000000000000000000000000000000000000612fbb84600a61542f565b60208801516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201526024810192909252919091166044820152606401602060405180830381865afa158015613015573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130399190615453565b9695505050505050565b6006602052816000526040600020818154811061305f57600080fd5b60009182526020909120600290910201805460019091015490925065ffffffffffff8082169250600160301b8204811691600160601b8104821691600160901b9091041685565b600c81815481106130b657600080fd5b60009182526020909120015465ffffffffffff8082169250600160301b8204811691600160601b8104821691600160901b8204811691600160c01b81049091169060ff600160f01b8204811691600160f81b90041687565b6001600160a01b0381166000908152600660209081526040808320805482518185028101850190935280835260609493849084015b828210156131b95760008481526020908190206040805160a081018252600286029092018054835260019081015465ffffffffffff80821685870152600160301b8204811693850193909352600160601b810483166060850152600160901b900490911660808301529083529092019101613143565b505050509050600080600090505b8251811015613248578281815181106131e2576131e26151b3565b60200260200101516060015165ffffffffffff1660001480156132235750828181518110613212576132126151b3565b602002602001015160000151600014155b1561323657816132328161546c565b9250505b806132408161546c565b9150506131c7565b5060008167ffffffffffffffff81111561326457613264614da9565b60405190808252806020026020018201604052801561328d578160200160208202803683370190505b5090506000805b84518110156113fb578481815181106132af576132af6151b3565b60200260200101516060015165ffffffffffff1660001480156132f057508481815181106132df576132df6151b3565b602002602001015160000151600014155b156133215780838381518110613308576133086151b3565b60209081029190910101528161331d8161546c565b9250505b8061332b8161546c565b915050613294565b600854604080516310c1ea0960e31b815290516000926001600160a01b03169163860f50489160048083019260209291908290030181865afa15801561337d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133a19190615453565b600c83815481106133b4576133b46151b3565b6000918252602090912001546133d590600160f01b900460ff16600a61539f565b6133de84612340565b6133e891906153ae565b6108f791906153cd565b6000818152600d6020908152604080832081516080810183528154815260019091015465ffffffffffff80821694830194909452600160301b810490931691810191909152600160601b90910460ff1615156060820181905282918291613464576000806000935093509350506134cd565b6020810151613473904261551b565b9250806040015165ffffffffffff168365ffffffffffff161091508161349a5780516134c9565b806040015165ffffffffffff168365ffffffffffff1682600001516134bf91906153ae565b6134c991906153cd565b9350505b9193909250565b6134dd826121e8565b600a83815481106134f0576134f06151b3565b9060005260206000209060060201600201600082825461351091906151df565b9250508190555080600c838154811061352b5761352b6151b3565b60009182526020808320909101805465ffffffffffff94909416600160301b026bffffffffffff0000000000001990941693909317909255838152600d909152604090206001015460ff600160601b9091041615610a37576000828152600d6020526040812090808061359d866133f2565b92509250925082600b87815481106135b7576135b76151b3565b906000526020600020906004020160010160008282546135d791906151df565b9091555050801561366f57828460000160008282546135f691906151df565b9091555050600184018054839190600690613621908490600160301b900465ffffffffffff1661551b565b92506101000a81548165ffffffffffff021916908365ffffffffffff160217905550848460010160006101000a81548165ffffffffffff021916908365ffffffffffff160217905550613688565b6001840180546cff000000000000000000000000191690555b505050505050565b600080600c83815481106136a6576136a66151b3565b6000918252602090912001546136c790600160f01b900460ff16600a61539f565b6136d084614091565b600b85815481106136e3576136e36151b3565b9060005260206000209060040201600101546136ff91906153ae565b61370991906153cd565b6009549091506001600160a01b0316156108f757600061097984614162565b6000600a858154811061373d5761373d6151b3565b60009182526020808320604080516101008101825260069094029091018054845260018101546001600160a01b0381169385019390935260ff600160a01b84048116151592850192909252600160a81b90920416158015606084015260028201546080840152600382015460a0840152600482015460c084015260059091015460e083015290925081906138955760208301516137e5906001600160a01b03163330896147d2565b6137ef8585614903565b92509050600082613800838861543b565b61380a919061543b565b600854602086015160405163bc157ac160e01b8152600481018b90526001600160a01b03918216602482015260448101849052929350169063bc157ac1906064016020604051808303816000875af115801561386a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061388e9190615453565b505061394c565b60085460208401516138b6916001600160a01b0391821691339116896147d2565b6138c08585614903565b6008549093509091506001600160a01b03166340c10f1930846138e3858a61543b565b6138ed919061543b565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561393357600080fd5b505af1158015613947573d6000803e3d6000fd5b505050505b811561395b5761395b82614af1565b6040516356e4bb9760e11b8152306004820152602481018690527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063adc9772e906044016020604051808303816000875af11580156139c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139ec9190615453565b5050505050505050565b6001600160a01b03848116600090815260066020526040908190208054825160a08101938490526319a948db60e21b90935260a483018790529290919081907f0000000000000000000000000000000000000000000000000000000000000000166366a5236c60c48301602060405180830381865afa158015613a7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aa19190615453565b815265ffffffffffff4281166020808401919091529681166040808401919091526000606080850182905297831660809485015285546001818101885596825290899020855160029092020190815597840151979094018054948401519684015193909201518116600160901b0265ffffffffffff60901b19938216600160601b029390931677ffffffffffffffffffffffff00000000000000000000000019968216600160301b026bffffffffffffffffffffffff1990951697909116969096179290921793909316939093179190911790915592915050565b6000600c8381548110613b9157613b916151b3565b60009182526020918290206040805160e081018252919092015465ffffffffffff808216808452600160301b8304821695840195909552600160601b8204811693830193909352600160901b810483166060830152600160c01b81049092166080820181905260ff600160f01b8404811660a0840152600160f81b909304909216151560c08201529250613c2491615487565b65ffffffffffff168265ffffffffffff161061408c576000600a8481548110613c4f57613c4f6151b3565b60009182526020808320604080516101008101825260069094029091018054845260018101546001600160a01b0381169385019390935260ff600160a01b84048116151592850192909252600160a81b909204161515606083015260028101546080830152600381015460a0830152600481015460c08301526005015460e0820152600b8054919350859187908110613cea57613cea6151b3565b906000526020600020906004020160020160069054906101000a900465ffffffffffff16613d18919061551b565b65ffffffffffff1690506000613d2d86613690565b905060008360400151613d41578351613d82565b60a0850151613d5190600a61539f565b84518390613d6e906ec097ce7bc90715b34b9f10000000006153ae565b613d7891906153cd565b613d8291906153cd565b905082856060015165ffffffffffff1682613d9d91906153ae565b613da791906153cd565b600a8881548110613dba57613dba6151b3565b906000526020600020906006020160030181905550600083866040015165ffffffffffff1683613dea91906153ae565b613df491906153cd565b9050600081600860009054906101000a90046001600160a01b03166001600160a01b031663860f50486040518163ffffffff1660e01b8152600401602060405180830381865afa158015613e4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e709190615453565b613e7a90866153ae565b613e8491906153cd565b9050887f78f9c01d72705dba80d6ce051d36a1f987bf2a3800fee938c111a2ae741e57d1600b8b81548110613ebb57613ebb6151b3565b90600052602060002090600402016001015483604051613ee5929190918252602082015260400190565b60405180910390a2600b8981548110613f0057613f006151b3565b9060005260206000209060040201600101548110613f465780600b8a81548110613f2c57613f2c6151b3565b90600052602060002090600402016001018190555061404a565b600081600b8b81548110613f5c57613f5c6151b3565b906000526020600020906004020160010154613f7891906151df565b905060405180608001604052808281526020018a65ffffffffffff168152602001896080015165ffffffffffff16815260200160011515815250600d60008c81526020019081526020016000206000820151816000015560208201518160010160006101000a81548165ffffffffffff021916908365ffffffffffff16021790555060408201518160010160066101000a81548165ffffffffffff021916908365ffffffffffff160217905550606082015181600101600c6101000a81548160ff021916908315150217905550905050505b87600c8a8154811061405e5761405e6151b3565b6000918252602090912001805465ffffffffffff191665ffffffffffff929092169190911790555050505050505b505050565b600854604080516310c1ea0960e31b815290516000926001600160a01b03169163860f50489160048083019260209291908290030181865afa1580156140db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140ff9190615453565b600c8381548110614112576141126151b3565b60009182526020909120015461413390600160f01b900460ff16600a61539f565b600a8481548110614146576141466151b3565b9060005260206000209060060201600201546133e891906153ae565b600080600a8381548110614178576141786151b3565b60009182526020808320604080516101008101825260069094029091018054845260018101546001600160a01b0381169385019390935260ff600160a01b84048116151592850192909252600160a81b909204161515606083015260028101546080830152600381015460a0830152600481015460c08301526005015460e0820152600c80549193509085908110614212576142126151b3565b60009182526020918290206040805160e081018252919092015465ffffffffffff8082168352600160301b8204811694830194909452600160601b8104841692820192909252600160901b820483166060820152600160c01b8204909216608083015260ff600160f01b8204811660a0840152600160f81b9091041615801560c0830152909150614609576000826020015190506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156142e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061430a91906151f6565b90506000826001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561434c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061437091906151f6565b9050600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156143b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143d791906154d4565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316148061446d57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316145b1561447b5791929190614527565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031614806144ec57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316145b6145275760405162461bcd60e51b815260206004820152600c60248201526b24b73b30b634b2103830b4b960a11b60448201526064016107e8565b6000846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015614567573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061458b919061540c565b60095460ff9190911691506000906001600160a01b0316638c86f1e4876145b385600a61542f565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152602481019190915290881660448201526064016020604051808303816000875af1158015612c9f573d6000803e3d6000fd5b600082602001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561464d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614671919061540c565b60ff16905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156146d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146fa919061540c565b60ff169050818111156147225761471182826151df565b61471b908261543b565b9050614739565b61472c81836151df565b61473690826151df565b90505b6009546001600160a01b0316638c86f1e47f000000000000000000000000000000000000000000000000000000000000000061477684600a61542f565b60208801516040516001600160e01b031960e086901b1681526001600160a01b03938416600482015260248101929092529190911660448201526064016020604051808303816000875af1158015613015573d6000803e3d6000fd5b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b179052915160009283929088169161484b9190615542565b6000604051808303816000865af19150503d8060008114614888576040519150601f19603f3d011682016040523d82523d6000602084013e61488d565b606091505b50915091508180156148b75750805115806148b75750808060200190518101906148b791906153ef565b6136885760405162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c454400000000000000000000000060448201526064016107e8565b6000806127106002548561491791906153ae565b61492191906153cd565b91506127106003548561493491906153ae565b61493e91906153cd565b6001600160a01b03841660009081526005602052604090205490915060ff1615614a3b576001600160a01b0383166000908152600460205260408120805484929061498a90849061543b565b90915550506001546040805163fbfa77cf60e01b8152905183926004926000926001600160a01b039092169163fbfa77cf9180860191602091819003870181865afa1580156149dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a0191906151f6565b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254614a30919061543b565b90915550614aea9050565b614a45828261543b565b6001546040805163fbfa77cf60e01b815290516004926000926001600160a01b039091169163fbfa77cf9180860191602091819003870181865afa158015614a91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614ab591906151f6565b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254614ae4919061543b565b90915550505b9250929050565b600060046000600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614b4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b6e91906151f6565b6001600160a01b03166001600160a01b03168152602001908152602001600020549050600081118015614ba15750818110155b15610a37578160046000600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614bfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614c2291906151f6565b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254614c5191906151df565b90915550506001546040805163fbfa77cf60e01b815290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169363a9059cbb9391169163fbfa77cf916004808201926020929091908290030181865afa158015614cc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614ced91906151f6565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018590526044016020604051808303816000875af1158015614d3a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061408c91906153ef565b6001600160a01b0381168114611f5257600080fd5b600060208284031215614d8557600080fd5b813561073681614d5e565b600060208284031215614da257600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715614de257614de2614da9565b60405290565b6040516080810167ffffffffffffffff81118282101715614de257614de2614da9565b604051601f8201601f1916810167ffffffffffffffff81118282101715614e3457614e34614da9565b604052919050565b60006040516060810181811067ffffffffffffffff82111715614e6157614e61614da9565b6040529050806060830184811115614e7857600080fd5b835b81811015614e92578035835260209283019201614e7a565b50505092915050565b8015158114611f5257600080fd5b600082601f830112614eba57600080fd5b614ec2614dbf565b806040840185811115614ed457600080fd5b845b818110156113fb578035845260209384019301614ed6565b63ffffffff81168114611f5257600080fd5b600082601f830112614f1157600080fd5b614f19614dbf565b806040840185811115614f2b57600080fd5b845b818110156113fb578035614f4081614eee565b845260209384019301614f2d565b60008060008060006101808688031215614f6757600080fd5b8535614f7281614d5e565b94506020603f87018813614f8557600080fd5b614f9188828901614e3c565b945087609f880112614fa257600080fd5b614faa614de8565b8061010089018a811115614fbd57600080fd5b60808a015b81811015614fe2578035614fd581614e9b565b8452928401928401614fc2565b50819650614ff08b82614ea9565b955050505050615004876101408801614f00565b90509295509295909350565b6020808252825182820181905260009190848201906040850190845b818110156150485783518352928401929184019160010161502c565b50909695505050505050565b6000806040838503121561506757600080fd5b50508035926020909101359150565b600080600080600060a0868803121561508e57600080fd5b85359450602086013593506040860135925060608601356150ae81614d5e565b915060808601356150be81614d5e565b809150509295509295909350565b600080604083850312156150df57600080fd5b82356150ea81614d5e565b946020939093013593505050565b6000806040838503121561510b57600080fd5b823561511681614d5e565b915060208381013567ffffffffffffffff8082111561513457600080fd5b818601915086601f83011261514857600080fd5b81358181111561515a5761515a614da9565b8060051b915061516b848301614e0b565b818152918301840191848101908984111561518557600080fd5b938501935b838510156151a35784358252938501939085019061518a565b8096505050505050509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156151f1576151f16151c9565b500390565b60006020828403121561520857600080fd5b815161073681614d5e565b600060208083526000845481600182811c91508083168061523557607f831692505b85831081141561525357634e487b7160e01b85526022600452602485fd5b8786018381526020018180156152705760018114615281576152ac565b60ff198616825287820196506152ac565b60008b81526020902060005b868110156152a65781548482015290850190890161528d565b83019750505b50949998505050505050505050565b600181815b808511156152f65781600019048211156152dc576152dc6151c9565b808516156152e957918102915b93841c93908002906152c0565b509250929050565b60008261530d575060016108f7565b8161531a575060006108f7565b8160018114615330576002811461533a57615356565b60019150506108f7565b60ff84111561534b5761534b6151c9565b50506001821b6108f7565b5060208310610133831016604e8410600b8410161715615379575081810a6108f7565b61538383836152bb565b8060001904821115615397576153976151c9565b029392505050565b600061073660ff8416836152fe565b60008160001904831182151516156153c8576153c86151c9565b500290565b6000826153ea57634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561540157600080fd5b815161073681614e9b565b60006020828403121561541e57600080fd5b815160ff8116811461073657600080fd5b600061073683836152fe565b6000821982111561544e5761544e6151c9565b500190565b60006020828403121561546557600080fd5b5051919050565b6000600019821415615480576154806151c9565b5060010190565b600065ffffffffffff8083168185168083038211156154a8576154a86151c9565b01949350505050565b80516dffffffffffffffffffffffffffff811681146154cf57600080fd5b919050565b6000806000606084860312156154e957600080fd5b6154f2846154b1565b9250615500602085016154b1565b9150604084015161551081614eee565b809150509250925092565b600065ffffffffffff8381169083168181101561553a5761553a6151c9565b039392505050565b6000825160005b818110156155635760208186018101518583015201615549565b81811115615572576000828501525b50919091019291505056fea164736f6c634300080a000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "close(uint256)": {
        "params": {
          "_id": "ID of market to close"
        }
      },
      "create(address,uint256[3],bool[4],uint256[2],uint32[2])": {
        "details": "current price should be in 18 decimals.",
        "params": {
          "_booleans": "[capacity in quote, quote is reserve, quote is LP, fixed term]",
          "_intervals": "[deposit interval (seconds), tune interval (seconds)]",
          "_market": "[capacity (in PANA or quote), initial price / PANA (18 decimals), debt buffer (3 decimals)]",
          "_quoteToken": "token used to deposit",
          "_terms": "[vesting length (if fixed term) or vested timestamp, conclusion timestamp]"
        },
        "returns": {
          "id_": "        ID of new bond market"
        }
      },
      "currentControlVariable(uint256)": {
        "details": "accounts for control variable adjustment",
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "control variable for market in PANA decimals"
        }
      },
      "currentDebt(uint256)": {
        "details": "accounts for debt decay since last deposit",
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "current debt for market in PANA decimals"
        }
      },
      "debtDecay(uint256)": {
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "amount of debt to decay"
        }
      },
      "debtRatio(uint256)": {
        "details": "uses current debt, which accounts for debt decay since last deposit (vs _debtRatio())",
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "debt ratio for market in quote decimals"
        }
      },
      "deposit(uint256,uint256,uint256,address,address)": {
        "params": {
          "_amount": "the amount of quote token to spend",
          "_id": "the ID of the market",
          "_maxPrice": "the maximum price at which to buy",
          "_referral": "the front end operator address",
          "_user": "the recipient of the payout"
        },
        "returns": {
          "expiry_": "    the timestamp at which payout is redeemable",
          "index_": "     the user index of the Note (used to redeem or query information)",
          "payout_": "    the amount of KARSHA due"
        }
      },
      "getOraclePriceView(uint256)": {
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "oracle price for market in PANA decimals"
        }
      },
      "indexesFor(address)": {
        "params": {
          "_user": "the user to query notes for"
        },
        "returns": {
          "_0": "the pending notes for the user"
        }
      },
      "isLive(uint256)": {
        "params": {
          "_id": "ID of market"
        }
      },
      "liveMarketsFor(address)": {
        "params": {
          "_token": "quote token to check for"
        }
      },
      "marketPrice(uint256)": {
        "params": {
          "_id": "market ID"
        },
        "returns": {
          "_0": "price for market in PANA decimals"
        }
      },
      "pendingFor(address,uint256)": {
        "params": {
          "_index": "the index of the note in the user's array",
          "_user": "the user that the note belongs to"
        },
        "returns": {
          "matured_": "   if the payout can be redeemed",
          "payout_": "    the payout due, in Karsha"
        }
      },
      "pullNote(address,uint256)": {
        "params": {
          "_from": "the address that approved the note transfer",
          "_index": "the index of the note to transfer (in the sender's array)"
        }
      },
      "pushNote(address,uint256)": {
        "params": {
          "_index": "index of note to approve transfer for",
          "_to": "address to approve note transfer for"
        }
      },
      "redeem(address,uint256[])": {
        "params": {
          "_indexes": "the note indexes to redeem",
          "_user": "the user to redeem for"
        },
        "returns": {
          "payout_": "    sum of payout sent, in Karsha"
        }
      },
      "redeemAll(address)": {
        "details": "if possible, query indexesFor() off-chain and input in redeem() to save gas",
        "params": {
          "_user": "user to redeem all notes for"
        },
        "returns": {
          "_0": "sum of payout sent, in Karsha"
        }
      }
    },
    "title": "Pana Bond Depository",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "close(uint256)": {
        "notice": "disable existing market"
      },
      "create(address,uint256[3],bool[4],uint256[2],uint32[2])": {
        "notice": "creates a new market type"
      },
      "currentControlVariable(uint256)": {
        "notice": "up to date control variable"
      },
      "currentDebt(uint256)": {
        "notice": "calculate debt factoring in decay"
      },
      "debtDecay(uint256)": {
        "notice": "amount of debt to decay from total debt for market ID"
      },
      "debtRatio(uint256)": {
        "notice": "calculate current ratio of debt to supply"
      },
      "deposit(uint256,uint256,uint256,address,address)": {
        "notice": "deposit quote tokens in exchange for a bond from a specified market"
      },
      "getOraclePriceView(uint256)": {
        "notice": "View Only - gets token price in quote tokens from oracle"
      },
      "getTreasuryRewards()": {
        "notice": "Manually fetch remaining rewards for Treasury"
      },
      "indexesFor(address)": {
        "notice": "all pending notes for user"
      },
      "isLive(uint256)": {
        "notice": "is a given market accepting deposits"
      },
      "liveMarkets()": {
        "notice": "returns an array of all active market IDs"
      },
      "liveMarketsFor(address)": {
        "notice": "returns an array of all active market IDs for a given quote token"
      },
      "marketPrice(uint256)": {
        "notice": "View Only Function - calculate current market price of quote token in base token"
      },
      "pendingFor(address,uint256)": {
        "notice": "calculate amount available for claim for a single note"
      },
      "pullNote(address,uint256)": {
        "notice": "transfer a note that has been approved by an address"
      },
      "pushNote(address,uint256)": {
        "notice": "approve an address to transfer a note"
      },
      "redeem(address,uint256[])": {
        "notice": "redeem notes for user"
      },
      "redeemAll(address)": {
        "notice": "redeem all redeemable markets for user"
      },
      "setPriceOracle(address)": {
        "notice": "sets price oracle for bond depository"
      },
      "setRewards(uint256,uint256)": {
        "notice": "set rewards for front end operators and DAO"
      },
      "whitelist(address)": {
        "notice": "add or remove addresses from the reward whitelist"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 315,
        "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
        "label": "UNAUTHORIZED",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 318,
        "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
        "label": "authority",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IPanaAuthority)4735"
      },
      {
        "astId": 7626,
        "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
        "label": "refReward",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 7628,
        "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
        "label": "treasuryReward",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 7632,
        "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
        "label": "rewards",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7636,
        "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
        "label": "whitelisted",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2700,
        "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
        "label": "notes",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_struct(Note)4555_storage)dyn_storage)"
      },
      {
        "astId": 2706,
        "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
        "label": "noteTransfers",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))"
      },
      {
        "astId": 2715,
        "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
        "label": "treasury",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(ITreasury)4969"
      },
      {
        "astId": 816,
        "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
        "label": "priceOracle",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IPriceOracle)4760"
      },
      {
        "astId": 820,
        "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
        "label": "markets",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_struct(Market)4130_storage)dyn_storage"
      },
      {
        "astId": 824,
        "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
        "label": "terms",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_struct(Terms)4141_storage)dyn_storage"
      },
      {
        "astId": 828,
        "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
        "label": "metadata",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_struct(Metadata)4156_storage)dyn_storage"
      },
      {
        "astId": 833,
        "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
        "label": "adjustments",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_struct(Adjustment)4165_storage)"
      },
      {
        "astId": 838,
        "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
        "label": "marketsForQuote",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Market)4130_storage)dyn_storage": {
        "base": "t_struct(Market)4130_storage",
        "encoding": "dynamic_array",
        "label": "struct IBondDepository.Market[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Metadata)4156_storage)dyn_storage": {
        "base": "t_struct(Metadata)4156_storage",
        "encoding": "dynamic_array",
        "label": "struct IBondDepository.Metadata[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Note)4555_storage)dyn_storage": {
        "base": "t_struct(Note)4555_storage",
        "encoding": "dynamic_array",
        "label": "struct INoteKeeper.Note[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Terms)4141_storage)dyn_storage": {
        "base": "t_struct(Terms)4141_storage",
        "encoding": "dynamic_array",
        "label": "struct IBondDepository.Terms[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)4417": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPanaAuthority)4735": {
        "encoding": "inplace",
        "label": "contract IPanaAuthority",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceOracle)4760": {
        "encoding": "inplace",
        "label": "contract IPriceOracle",
        "numberOfBytes": "20"
      },
      "t_contract(ITreasury)4969": {
        "encoding": "inplace",
        "label": "contract ITreasury",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(Note)4555_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct INoteKeeper.Note[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Note)4555_storage)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Adjustment)4165_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IBondDepository.Adjustment)",
        "numberOfBytes": "32",
        "value": "t_struct(Adjustment)4165_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Adjustment)4165_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Adjustment",
        "members": [
          {
            "astId": 4158,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "change",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4160,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "lastAdjustment",
            "offset": 0,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 4162,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "timeToAdjusted",
            "offset": 6,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 4164,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "active",
            "offset": 12,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Market)4130_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Market",
        "members": [
          {
            "astId": 4114,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "capacity",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4117,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "quoteToken",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)4417"
          },
          {
            "astId": 4119,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "capacityInQuote",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 4121,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "quoteTokenIsReserve",
            "offset": 21,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 4123,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "totalDebt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4125,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "maxPayout",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4127,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "sold",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4129,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "purchased",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Metadata)4156_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Metadata",
        "members": [
          {
            "astId": 4143,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "lastTune",
            "offset": 0,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 4145,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "lastDecay",
            "offset": 6,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 4147,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "length",
            "offset": 12,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 4149,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "depositInterval",
            "offset": 18,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 4151,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "tuneInterval",
            "offset": 24,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 4153,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "quoteDecimals",
            "offset": 30,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 4155,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "quoteIsLPToken",
            "offset": 31,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Note)4555_storage": {
        "encoding": "inplace",
        "label": "struct INoteKeeper.Note",
        "members": [
          {
            "astId": 4546,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "payout",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4548,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "created",
            "offset": 0,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 4550,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "matured",
            "offset": 6,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 4552,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "redeemed",
            "offset": 12,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 4554,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "marketID",
            "offset": 18,
            "slot": "1",
            "type": "t_uint48"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Terms)4141_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Terms",
        "members": [
          {
            "astId": 4132,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "fixedTerm",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 4134,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "controlVariable",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4136,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "vesting",
            "offset": 0,
            "slot": "2",
            "type": "t_uint48"
          },
          {
            "astId": 4138,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "conclusion",
            "offset": 6,
            "slot": "2",
            "type": "t_uint48"
          },
          {
            "astId": 4140,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "maxDebt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}