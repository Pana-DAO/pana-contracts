{
  "address": "0x32c90D5e7Aa30DD15b8aebBEF565CF0bC732B329",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pPANA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_PANA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dai",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dao",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "circulatingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimRedeemable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "exercise",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "newOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pullOwnership",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oldWallet",
          "type": "address"
        }
      ],
      "name": "pullWalletChange",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "pushOwnership",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newWallet",
          "type": "address"
        }
      ],
      "name": "pushWalletChange",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vester",
          "type": "address"
        }
      ],
      "name": "redeemableFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vester",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_lockDuration",
          "type": "uint256"
        }
      ],
      "name": "setLaunchParticipantTerms",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vester",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountCanClaim",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockDuration",
          "type": "uint256"
        }
      ],
      "name": "setTerms",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "terms",
      "outputs": [
        {
          "internalType": "bool",
          "name": "supplyBased",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "percent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "exercised",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "locked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockExpiry",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "walletChange",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3283cbd7e800b6efa12f75b7c0a6b40d95b0e068e0e3ee56115d61756b3322c7",
  "receipt": {
    "to": null,
    "from": "0x2d494Cb0a923009C471B9512571048560a44556A",
    "contractAddress": "0x32c90D5e7Aa30DD15b8aebBEF565CF0bC732B329",
    "transactionIndex": 0,
    "gasUsed": "20413783",
    "logsBloom": "0x
    "blockHash": "0x34a76b226a6d56acbc99479147db8ff24bf304252f5391102cc0e8552c6c20de",
    "transactionHash": "0x3283cbd7e800b6efa12f75b7c0a6b40d95b0e068e0e3ee56115d61756b3322c7",
    "logs": [],
    "blockNumber": 12005069,
    "cumulativeGasUsed": "9261083",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x404D1F1300f28bFeE5FdED5fE9D5F898b93e65f5",
    "0x1709AF1e73225E1a8BaC94D921d03449B9e331C6",
    "0x327459343E34F4c2Cc3fE6678ea8cA3Cf22fBfC8",
    "0xf7A4a8efC0153262bc449D021f268A63F4b49417",
    "0xde9eB6AB368290D17eb207206e2a067C65D98F15"
  ],
  "solcInputHash": "77dd4a31559746813e3615af0775ea75",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pPANA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_PANA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRedeemable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"exercise\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldWallet\",\"type\":\"address\"}],\"name\":\"pullWalletChange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"pushOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"pushWalletChange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vester\",\"type\":\"address\"}],\"name\":\"redeemableFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vester\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lockDuration\",\"type\":\"uint256\"}],\"name\":\"setLaunchParticipantTerms\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vester\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountCanClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockDuration\",\"type\":\"uint256\"}],\"name\":\"setTerms\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"terms\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"supplyBased\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exercised\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"locked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockExpiry\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletChange\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/redemption/PPanaRedeem.sol\":\"PPanaRedeem\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0ac286be11c2345f71d938119e638483fc1ddb9f56b7da00dd470adcd977f439\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa142440b0e1c51ece24b6d074ac883b34e1f33a2472773eeaaf4871875904d09\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IPana.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IPana is IERC20 {\\n  function mint(address account_, uint256 amount_) external;\\n\\n  function burn(uint256 amount) external;\\n\\n  function burnFrom(address account_, uint256 amount_) external;\\n}\\n\",\"keccak256\":\"0xa24b14413d5aa0c90292c87ba2c2f6edd64678640c652aa35e83ae2d05eb47f2\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface ITreasury {\\n    function deposit(\\n        uint256 _amount,\\n        address _token,\\n        uint256 _profit\\n    ) external returns (uint256);\\n\\n    function withdraw(uint256 _amount, address _token) external;\\n\\n    function tokenValue(address _token, uint256 _amount) external view returns (uint256 value_);\\n\\n    function mint(address _recipient, uint256 _amount) external;\\n\\n    function manage(address _token, uint256 _amount) external;\\n\\n    function incurDebt(uint256 amount_, address token_) external;\\n\\n    function repayDebtWithReserve(uint256 amount_, address token_) external;\\n\\n    function excessReserves() external view returns (uint256);\\n\\n    function baseSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3a7e171916da6bf9b28904c2adc6ede32896a841e7f7ede0ad60da6804659c56\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IpPana.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IpPana is IERC20 {\\n  function mint(address account_, uint256 amount_) external;\\n\\n  function burn(uint256 amount) external;\\n\\n  function burnFrom(address account_, uint256 amount_) external;\\n}\\n\",\"keccak256\":\"0xd5ca1db4c77b1e2a81e9bcab26d8953c65b785256a2e3e75a1930868401b6ab3\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\n\\n/// @notice Safe IERC20 and ETH transfer library that safely handles missing return values.\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/TransferHelper.sol)\\n/// Taken from Solmate\\nlibrary SafeERC20 {\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.approve.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        (bool success, ) = to.call{value: amount}(new bytes(0));\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n}\",\"keccak256\":\"0xbdd4f99088de7c23383b043055646de013b1312166a9bfa05e3995cdcf7ae022\",\"license\":\"AGPL-3.0-only\"},\"contracts/redemption/PPanaRedeem.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../libraries/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IpPana.sol\\\";\\nimport \\\"../interfaces/IPana.sol\\\";\\nimport \\\"../interfaces/ITreasury.sol\\\";\\n\\ncontract PPanaRedeem {\\n    using SafeMathUpgradeable for uint;\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IPana;\\n\\n    address public owner;\\n    address public newOwner;\\n\\n    // Addresses\\n    IPana internal immutable PANA; // the base token\\n    IpPana internal immutable pPANA; // pPANA token\\n    ITreasury internal immutable treasury; // the purchaser of quote tokens\\n\\n    address internal immutable DAI;\\n    address internal immutable dao; \\n\\n    struct Term {\\n        bool supplyBased;  // True if the redeemable is based on total supply.\\n        uint percent; // 6 decimals ( 500000 = 0.5% )  eg: If person X has 4% of teams total allocation(7.8%), then this would be = 0.00312 * 1e6 = 3120\\n        uint max;     // In pPana (with 1e18 decimal) eg: pPana team supply = 300 Million. If person X has 4% of teams total allocation, then this would be = 12 Million * 1e18\\n        uint256 lockDuration; // In seconds. For 5 days it would be 5*24*60*60= 432000\\n        uint exercised; // In pPana (with 1e18 decimal)\\n        uint locked; // In pana (with 1e18 decimal)\\n        uint lockExpiry; // end of warmup period\\n        bool active;\\n    }\\n    mapping( address => Term ) public terms;\\n\\n    mapping( address => address ) public walletChange;\\n\\n    constructor( address _pPANA, address _PANA, \\n        address _dai, address _treasury, address _dao ) {\\n        owner = _dao;\\n        require( _pPANA != address(0) );\\n        pPANA = IpPana(_pPANA);\\n        require( _PANA != address(0) );\\n        PANA = IPana(_PANA);\\n        require( _dai != address(0) );\\n        DAI = _dai;\\n        require( _treasury != address(0) );\\n        treasury = ITreasury(_treasury);\\n        require( _dao != address(0) );\\n        dao = _dao;\\n    }\\n\\n    // Sets terms for a new wallet\\n    function setTerms(address _vester, uint _amountCanClaim, uint _rate, uint _lockDuration ) external returns ( bool ) {\\n        require( msg.sender == owner, \\\"Sender is not owner\\\" );\\n        if(terms[ _vester ].active) {\\n            require( terms[ _vester ].supplyBased == true, \\\"Vesting terms already set for this address\\\" );\\n        }        \\n        require( _amountCanClaim >= terms[ _vester ].max, \\\"cannot lower amount claimable\\\" );\\n        require( _rate >= terms[ _vester ].percent, \\\"cannot lower vesting rate\\\" );\\n\\n        terms[ _vester ].max = _amountCanClaim;\\n        terms[ _vester ].percent = _rate;\\n        terms[ _vester ].lockDuration = _lockDuration;\\n        terms[ _vester ].supplyBased = true;\\n        terms[ _vester ].active = true;\\n\\n        return true;\\n    }\\n\\n    // Sets terms for a new wallet\\n    function setLaunchParticipantTerms(address _vester, uint _lockDuration ) external returns ( bool ) {\\n        require( msg.sender == owner, \\\"Sender is not owner\\\" );\\n        if(terms[ _vester ].active) {\\n            require( terms[ _vester ].supplyBased == false, \\\"Vesting terms already set for this address\\\" );\\n        }\\n\\n        terms[ _vester ].lockDuration = _lockDuration;\\n        terms[ _vester ].supplyBased = false;\\n        terms[ _vester ].active = true;\\n        return true;\\n    }\\n\\n    // Allows wallet to redeem pPana for Pana\\n    function exercise( uint _amount ) external returns ( bool ) {\\n        Term memory info = terms[ msg.sender ];\\n        require( info.active == true, 'Account not setup for pPana redemption');\\n        require( redeemableFor( msg.sender ) >= _amount, 'Not enough vested' );\\n        require( info.locked == 0, 'Account has locked or unclaimed pana' );\\n        if(info.supplyBased) {\\n            require( info.max.sub( info.exercised ) >= _amount, 'Exercised over max' );\\n        }\\n\\n        IERC20( DAI ).safeTransferFrom( msg.sender, address( this ), _amount );\\n        pPANA.burnFrom( msg.sender, _amount );\\n\\n        IERC20( DAI ).approve( address(treasury), _amount );\\n        uint panaRedeemed = treasury.deposit( _amount, DAI, 0 );\\n\\n        terms[ msg.sender ].lockExpiry = block.timestamp.add(info.lockDuration);\\n        terms[ msg.sender ].exercised = info.exercised.add( _amount );\\n        terms[ msg.sender ].locked = panaRedeemed;\\n        return true;\\n    }\\n\\n    // Allow wallet owner to claim Pana after the lock duration is over\\n    function claimRedeemable() external returns (uint256) {\\n        Term memory info = terms[ msg.sender ];\\n        require( info.locked > 0 , 'Account does not have locked or unclaimed pana' );\\n        require( block.timestamp >= info.lockExpiry , 'Pana is in lock period' );\\n        \\n        uint panaRedeemed = info.locked;\\n        PANA.safeTransfer(msg.sender, panaRedeemed); \\n        terms[ msg.sender ].locked = 0;\\n        terms[ msg.sender ].lockExpiry = 0;\\n        return panaRedeemed;\\n    }\\n\\n    // Allows wallet owner to transfer rights to a new address\\n    function pushWalletChange( address _newWallet ) external returns ( bool ) {\\n        require( terms[ msg.sender ].percent != 0 );\\n        walletChange[ msg.sender ] = _newWallet;\\n        return true;\\n    }\\n\\n    // Allows wallet to pull rights from an old address\\n    function pullWalletChange( address _oldWallet ) external returns ( bool ) {\\n        require( walletChange[ _oldWallet ] == msg.sender, \\\"wallet did not push\\\" );\\n\\n        walletChange[ _oldWallet ] = address(0);\\n        terms[ msg.sender ] = terms[ _oldWallet ];\\n        delete terms[ _oldWallet ];\\n\\n        return true;\\n    }\\n\\n     // Amount a wallet can redeem based on current supply\\n    function redeemableFor( address _vester ) public view returns (uint) {\\n        Term memory info = terms[ _vester ];\\n        require( info.active == true, 'Account not setup as pPana redemption');\\n        uint256 pPanaBalance = pPANA.balanceOf(_vester);\\n\\n        if(pPanaBalance > 0 && info.supplyBased) {\\n            uint256 redeemableBalance = supplyBasedRedeemable( terms[ _vester ]);\\n            if(redeemableBalance > pPanaBalance) \\n                return pPanaBalance;\\n            else\\n                return redeemableBalance;\\n        }\\n        return pPanaBalance;\\n    }\\n\\n    function supplyBasedRedeemable( Term memory _info ) internal view returns ( uint ) { // returns interms of pPana\\n        return ( circulatingSupply().mul( _info.percent ).div( 1e8 ) ) //(6 digits for Term.percent + 2 digits for pana to pPana conversion)\\n            .sub( _info.exercised );\\n    }\\n\\n    function circulatingSupply() public view returns (uint256) {\\n        return treasury.baseSupply().sub(PANA.balanceOf(dao));\\n    } \\n\\n    function pushOwnership( address _newOwner ) external returns ( bool ) {\\n        require( msg.sender == owner, \\\"Sender is not owner\\\" );\\n        require( _newOwner != address(0) );\\n        newOwner = _newOwner;\\n        return true;\\n    }\\n\\n    function pullOwnership() external returns ( bool ) {\\n        require( msg.sender == newOwner );\\n        owner = newOwner;\\n        newOwner = address(0);\\n        return true;\\n    }\\n}\",\"keccak256\":\"0x88cb74befaa43fbd758dcd73c0c53b50bc4771f18f7ee82638a0da5e44c53f60\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b5060405162001870380380620018708339810160408190526200003591620000fe565b600080546001600160a01b0319166001600160a01b038381169190911790915585166200006157600080fd5b6001600160a01b0380861660a05284166200007b57600080fd5b6001600160a01b0380851660805283166200009557600080fd5b6001600160a01b0380841660e0528216620000af57600080fd5b6001600160a01b0380831660c0528116620000c957600080fd5b6001600160a01b031661010052506200016e92505050565b80516001600160a01b0381168114620000f957600080fd5b919050565b600080600080600060a086880312156200011757600080fd5b6200012286620000e1565b94506200013260208701620000e1565b93506200014260408701620000e1565b92506200015260608701620000e1565b91506200016260808701620000e1565b90509295509295909350565b60805160a05160c05160e05161010051611693620001dd60003960006104a2015260008181610aaf01528181610b9b0152610c2901526000818161053e01528181610b6c0152610c5b015260008181610af30152610e3d0152600081816104d1015261084b01526116936000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063a4cea3b21161008c578063c8c819ac11610066578063c8c819ac146101dd578063d39ce77c14610274578063d4ee1d9014610287578063f2cdac9b1461029a57600080fd5b8063a4cea3b2146101af578063b07f0a41146101b7578063c7e41d37146101ca57600080fd5b80638da5cb5b116100c85780638da5cb5b146101605780638dd031ed146101735780639358928b146101865780639971b2b91461019c57600080fd5b806347c52135146100ef5780635d8fb88d146101175780637ff28d3a14610158575b600080fd5b6101026100fd3660046114f3565b6102ad565b60405190151581526020015b60405180910390f35b6101406101253660046114f3565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161010e565b6101026103f9565b600054610140906001600160a01b031681565b6101026101813660046114f3565b61043c565b61018e61048b565b60405190815260200161010e565b6101026101aa36600461150e565b6105c9565b61018e6106fc565b6101026101c5366004611538565b610892565b61018e6101d83660046114f3565b610d29565b6102356101eb3660046114f3565b60026020819052600091825260409091208054600182015492820154600383015460048401546005850154600686015460079096015460ff95861697969495939492939192911688565b6040805198151589526020890197909752958701949094526060860192909252608085015260a084015260c0830152151560e08201526101000161010e565b6101026102823660046114f3565b610f63565b600154610140906001600160a01b031681565b6101026102a8366004611551565b610feb565b6001600160a01b03818116600090815260036020526040812054909116331461031d5760405162461bcd60e51b815260206004820152601360248201527f77616c6c657420646964206e6f7420707573680000000000000000000000000060448201526064015b60405180910390fd5b506001600160a01b0316600081815260036020818152604080842080546001600160a01b03191690556002918290528084203385529084208154815460ff1990811660ff928316151517835560018481018054858301558587018054978601979097558588018054988601989098556004808701805491870191909155600580880180549188019190915560068089018054918901919091556007808a0180549190990180548816919098161515179096559a8a5286548416909655889055948790559486905591859055948490559290925582541690915590565b6001546000906001600160a01b0316331461041357600080fd5b5060018054600080546001600160a01b03199081166001600160a01b0384161790915516815590565b3360009081526002602052604081206001015461045857600080fd5b5033600090815260036020526040902080546001600160a01b0319166001600160a01b0392909216919091179055600190565b6040516370a0823160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000916105c4917f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610518573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053c919061158a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663860f50486040518163ffffffff1660e01b8152600401602060405180830381865afa15801561059a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105be919061158a565b9061120a565b905090565b600080546001600160a01b0316331461061a5760405162461bcd60e51b815260206004820152601360248201527229b2b73232b91034b9903737ba1037bbb732b960691b6044820152606401610314565b6001600160a01b03831660009081526002602052604090206007015460ff16156106ba576001600160a01b03831660009081526002602052604090205460ff16156106ba5760405162461bcd60e51b815260206004820152602a60248201527f56657374696e67207465726d7320616c72656164792073657420666f722074686044820152696973206164647265737360b01b6064820152608401610314565b506001600160a01b038216600090815260026020526040902060038101829055805460ff19908116825560079091018054909116600190811790915592915050565b336000908152600260208181526040808420815161010081018352815460ff9081161515825260018301549482019490945293810154918401919091526003810154606084015260048101546080840152600581015460a08401819052600682015460c0850152600790910154909116151560e08301526107e55760405162461bcd60e51b815260206004820152602e60248201527f4163636f756e7420646f6573206e6f742068617665206c6f636b6564206f722060448201527f756e636c61696d65642070616e610000000000000000000000000000000000006064820152608401610314565b8060c001514210156108395760405162461bcd60e51b815260206004820152601660248201527f50616e6120697320696e206c6f636b20706572696f64000000000000000000006044820152606401610314565b60a08101516108726001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383611216565b336000908152600260205260408120600581018290556006015592915050565b336000908152600260208181526040808420815161010081018352815460ff908116151582526001808401549583019590955294820154928101929092526003810154606083015260048101546080830152600581015460a0830152600681015460c083015260070154909216151560e083018190521461097b5760405162461bcd60e51b815260206004820152602660248201527f4163636f756e74206e6f7420736574757020666f72207050616e61207265646560448201527f6d7074696f6e00000000000000000000000000000000000000000000000000006064820152608401610314565b8261098533610d29565b10156109d35760405162461bcd60e51b815260206004820152601160248201527f4e6f7420656e6f756768207665737465640000000000000000000000000000006044820152606401610314565b60a081015115610a315760405162461bcd60e51b8152602060048201526024808201527f4163636f756e7420686173206c6f636b6564206f7220756e636c61696d65642060448201526370616e6160e01b6064820152608401610314565b805115610aa25782610a548260800151836040015161120a90919063ffffffff16565b1015610aa25760405162461bcd60e51b815260206004820152601260248201527f457865726369736564206f766572206d617800000000000000000000000000006044820152606401610314565b610ad76001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333086611346565b60405163079cc67960e41b8152336004820152602481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906379cc679090604401600060405180830381600087803b158015610b3f57600080fd5b505af1158015610b53573d6000803e3d6000fd5b505060405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018790527f000000000000000000000000000000000000000000000000000000000000000016925063095ea7b391506044016020604051808303816000875af1158015610be6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0a91906115a3565b5060405163bc157ac160e01b8152600481018490526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166024830152600060448301819052917f00000000000000000000000000000000000000000000000000000000000000009091169063bc157ac1906064016020604051808303816000875af1158015610ca6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cca919061158a565b9050610ce382606001514261147f90919063ffffffff16565b336000908152600260205260409020600601556080820151610d05908561147f565b33600090815260026020526040902060048101919091556005015550600192915050565b6001600160a01b0381166000908152600260208181526040808420815161010081018352815460ff908116151582526001808401549583019590955294820154928101929092526003810154606083015260048101546080830152600581015460a0830152600681015460c083015260070154909216151560e0830181905214610e1b5760405162461bcd60e51b815260206004820152602560248201527f4163636f756e74206e6f74207365747570206173207050616e6120726564656d60448201527f7074696f6e0000000000000000000000000000000000000000000000000000006064820152608401610314565b6040516370a0823160e01b81526001600160a01b0384811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906370a0823190602401602060405180830381865afa158015610e86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eaa919061158a565b9050600081118015610eba575081515b15610f5c576001600160a01b0384166000908152600260208181526040808420815161010081018352815460ff9081161515825260018301549482019490945293810154918401919091526003810154606084015260048101546080840152600581015460a0840152600681015460c08401526007015416151560e0820152610f429061148b565b905081811115610f5457509392505050565b949350505050565b9392505050565b600080546001600160a01b03163314610fb45760405162461bcd60e51b815260206004820152601360248201527229b2b73232b91034b9903737ba1037bbb732b960691b6044820152606401610314565b6001600160a01b038216610fc757600080fd5b50600180546001600160a01b0319166001600160a01b039290921691909117815590565b600080546001600160a01b0316331461103c5760405162461bcd60e51b815260206004820152601360248201527229b2b73232b91034b9903737ba1037bbb732b960691b6044820152606401610314565b6001600160a01b03851660009081526002602052604090206007015460ff16156110e0576001600160a01b03851660009081526002602052604090205460ff1615156001146110e05760405162461bcd60e51b815260206004820152602a60248201527f56657374696e67207465726d7320616c72656164792073657420666f722074686044820152696973206164647265737360b01b6064820152608401610314565b6001600160a01b0385166000908152600260208190526040909120015484101561114c5760405162461bcd60e51b815260206004820152601d60248201527f63616e6e6f74206c6f77657220616d6f756e7420636c61696d61626c650000006044820152606401610314565b6001600160a01b0385166000908152600260205260409020600101548310156111b75760405162461bcd60e51b815260206004820152601960248201527f63616e6e6f74206c6f7765722076657374696e672072617465000000000000006044820152606401610314565b506001600160a01b03939093166000908152600260208190526040909120908101929092556001808301919091556003820192909255805460ff1990811683178255600790910180549091168217905590565b6000610f5c82846115db565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b179052915160009283929087169161128791906115f2565b6000604051808303816000865af19150503d80600081146112c4576040519150601f19603f3d011682016040523d82523d6000602084013e6112c9565b606091505b50915091508180156112f35750805115806112f35750808060200190518101906112f391906115a3565b61133f5760405162461bcd60e51b815260206004820152600f60248201527f5452414e534645525f4641494c454400000000000000000000000000000000006044820152606401610314565b5050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b17905291516000928392908816916113bf91906115f2565b6000604051808303816000865af19150503d80600081146113fc576040519150601f19603f3d011682016040523d82523d6000602084013e611401565b606091505b509150915081801561142b57508051158061142b57508080602001905181019061142b91906115a3565b6114775760405162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c45440000000000000000000000006044820152606401610314565b505050505050565b6000610f5c828461162d565b60006114b982608001516105be6305f5e1006114b386602001516114ad61048b565b906114bf565b906114cb565b92915050565b6000610f5c8284611645565b6000610f5c8284611664565b80356001600160a01b03811681146114ee57600080fd5b919050565b60006020828403121561150557600080fd5b610f5c826114d7565b6000806040838503121561152157600080fd5b61152a836114d7565b946020939093013593505050565b60006020828403121561154a57600080fd5b5035919050565b6000806000806080858703121561156757600080fd5b611570856114d7565b966020860135965060408601359560600135945092505050565b60006020828403121561159c57600080fd5b5051919050565b6000602082840312156115b557600080fd5b81518015158114610f5c57600080fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156115ed576115ed6115c5565b500390565b6000825160005b8181101561161357602081860181015185830152016115f9565b81811115611622576000828501525b509190910192915050565b60008219821115611640576116406115c5565b500190565b600081600019048311821515161561165f5761165f6115c5565b500290565b60008261168157634e487b7160e01b600052601260045260246000fd5b50049056fea164736f6c634300080a000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063a4cea3b21161008c578063c8c819ac11610066578063c8c819ac146101dd578063d39ce77c14610274578063d4ee1d9014610287578063f2cdac9b1461029a57600080fd5b8063a4cea3b2146101af578063b07f0a41146101b7578063c7e41d37146101ca57600080fd5b80638da5cb5b116100c85780638da5cb5b146101605780638dd031ed146101735780639358928b146101865780639971b2b91461019c57600080fd5b806347c52135146100ef5780635d8fb88d146101175780637ff28d3a14610158575b600080fd5b6101026100fd3660046114f3565b6102ad565b60405190151581526020015b60405180910390f35b6101406101253660046114f3565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161010e565b6101026103f9565b600054610140906001600160a01b031681565b6101026101813660046114f3565b61043c565b61018e61048b565b60405190815260200161010e565b6101026101aa36600461150e565b6105c9565b61018e6106fc565b6101026101c5366004611538565b610892565b61018e6101d83660046114f3565b610d29565b6102356101eb3660046114f3565b60026020819052600091825260409091208054600182015492820154600383015460048401546005850154600686015460079096015460ff95861697969495939492939192911688565b6040805198151589526020890197909752958701949094526060860192909252608085015260a084015260c0830152151560e08201526101000161010e565b6101026102823660046114f3565b610f63565b600154610140906001600160a01b031681565b6101026102a8366004611551565b610feb565b6001600160a01b03818116600090815260036020526040812054909116331461031d5760405162461bcd60e51b815260206004820152601360248201527f77616c6c657420646964206e6f7420707573680000000000000000000000000060448201526064015b60405180910390fd5b506001600160a01b0316600081815260036020818152604080842080546001600160a01b03191690556002918290528084203385529084208154815460ff1990811660ff928316151517835560018481018054858301558587018054978601979097558588018054988601989098556004808701805491870191909155600580880180549188019190915560068089018054918901919091556007808a0180549190990180548816919098161515179096559a8a5286548416909655889055948790559486905591859055948490559290925582541690915590565b6001546000906001600160a01b0316331461041357600080fd5b5060018054600080546001600160a01b03199081166001600160a01b0384161790915516815590565b3360009081526002602052604081206001015461045857600080fd5b5033600090815260036020526040902080546001600160a01b0319166001600160a01b0392909216919091179055600190565b6040516370a0823160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000916105c4917f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610518573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053c919061158a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663860f50486040518163ffffffff1660e01b8152600401602060405180830381865afa15801561059a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105be919061158a565b9061120a565b905090565b600080546001600160a01b0316331461061a5760405162461bcd60e51b815260206004820152601360248201527229b2b73232b91034b9903737ba1037bbb732b960691b6044820152606401610314565b6001600160a01b03831660009081526002602052604090206007015460ff16156106ba576001600160a01b03831660009081526002602052604090205460ff16156106ba5760405162461bcd60e51b815260206004820152602a60248201527f56657374696e67207465726d7320616c72656164792073657420666f722074686044820152696973206164647265737360b01b6064820152608401610314565b506001600160a01b038216600090815260026020526040902060038101829055805460ff19908116825560079091018054909116600190811790915592915050565b336000908152600260208181526040808420815161010081018352815460ff9081161515825260018301549482019490945293810154918401919091526003810154606084015260048101546080840152600581015460a08401819052600682015460c0850152600790910154909116151560e08301526107e55760405162461bcd60e51b815260206004820152602e60248201527f4163636f756e7420646f6573206e6f742068617665206c6f636b6564206f722060448201527f756e636c61696d65642070616e610000000000000000000000000000000000006064820152608401610314565b8060c001514210156108395760405162461bcd60e51b815260206004820152601660248201527f50616e6120697320696e206c6f636b20706572696f64000000000000000000006044820152606401610314565b60a08101516108726001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383611216565b336000908152600260205260408120600581018290556006015592915050565b336000908152600260208181526040808420815161010081018352815460ff908116151582526001808401549583019590955294820154928101929092526003810154606083015260048101546080830152600581015460a0830152600681015460c083015260070154909216151560e083018190521461097b5760405162461bcd60e51b815260206004820152602660248201527f4163636f756e74206e6f7420736574757020666f72207050616e61207265646560448201527f6d7074696f6e00000000000000000000000000000000000000000000000000006064820152608401610314565b8261098533610d29565b10156109d35760405162461bcd60e51b815260206004820152601160248201527f4e6f7420656e6f756768207665737465640000000000000000000000000000006044820152606401610314565b60a081015115610a315760405162461bcd60e51b8152602060048201526024808201527f4163636f756e7420686173206c6f636b6564206f7220756e636c61696d65642060448201526370616e6160e01b6064820152608401610314565b805115610aa25782610a548260800151836040015161120a90919063ffffffff16565b1015610aa25760405162461bcd60e51b815260206004820152601260248201527f457865726369736564206f766572206d617800000000000000000000000000006044820152606401610314565b610ad76001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333086611346565b60405163079cc67960e41b8152336004820152602481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906379cc679090604401600060405180830381600087803b158015610b3f57600080fd5b505af1158015610b53573d6000803e3d6000fd5b505060405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018790527f000000000000000000000000000000000000000000000000000000000000000016925063095ea7b391506044016020604051808303816000875af1158015610be6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0a91906115a3565b5060405163bc157ac160e01b8152600481018490526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166024830152600060448301819052917f00000000000000000000000000000000000000000000000000000000000000009091169063bc157ac1906064016020604051808303816000875af1158015610ca6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cca919061158a565b9050610ce382606001514261147f90919063ffffffff16565b336000908152600260205260409020600601556080820151610d05908561147f565b33600090815260026020526040902060048101919091556005015550600192915050565b6001600160a01b0381166000908152600260208181526040808420815161010081018352815460ff908116151582526001808401549583019590955294820154928101929092526003810154606083015260048101546080830152600581015460a0830152600681015460c083015260070154909216151560e0830181905214610e1b5760405162461bcd60e51b815260206004820152602560248201527f4163636f756e74206e6f74207365747570206173207050616e6120726564656d60448201527f7074696f6e0000000000000000000000000000000000000000000000000000006064820152608401610314565b6040516370a0823160e01b81526001600160a01b0384811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906370a0823190602401602060405180830381865afa158015610e86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eaa919061158a565b9050600081118015610eba575081515b15610f5c576001600160a01b0384166000908152600260208181526040808420815161010081018352815460ff9081161515825260018301549482019490945293810154918401919091526003810154606084015260048101546080840152600581015460a0840152600681015460c08401526007015416151560e0820152610f429061148b565b905081811115610f5457509392505050565b949350505050565b9392505050565b600080546001600160a01b03163314610fb45760405162461bcd60e51b815260206004820152601360248201527229b2b73232b91034b9903737ba1037bbb732b960691b6044820152606401610314565b6001600160a01b038216610fc757600080fd5b50600180546001600160a01b0319166001600160a01b039290921691909117815590565b600080546001600160a01b0316331461103c5760405162461bcd60e51b815260206004820152601360248201527229b2b73232b91034b9903737ba1037bbb732b960691b6044820152606401610314565b6001600160a01b03851660009081526002602052604090206007015460ff16156110e0576001600160a01b03851660009081526002602052604090205460ff1615156001146110e05760405162461bcd60e51b815260206004820152602a60248201527f56657374696e67207465726d7320616c72656164792073657420666f722074686044820152696973206164647265737360b01b6064820152608401610314565b6001600160a01b0385166000908152600260208190526040909120015484101561114c5760405162461bcd60e51b815260206004820152601d60248201527f63616e6e6f74206c6f77657220616d6f756e7420636c61696d61626c650000006044820152606401610314565b6001600160a01b0385166000908152600260205260409020600101548310156111b75760405162461bcd60e51b815260206004820152601960248201527f63616e6e6f74206c6f7765722076657374696e672072617465000000000000006044820152606401610314565b506001600160a01b03939093166000908152600260208190526040909120908101929092556001808301919091556003820192909255805460ff1990811683178255600790910180549091168217905590565b6000610f5c82846115db565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b179052915160009283929087169161128791906115f2565b6000604051808303816000865af19150503d80600081146112c4576040519150601f19603f3d011682016040523d82523d6000602084013e6112c9565b606091505b50915091508180156112f35750805115806112f35750808060200190518101906112f391906115a3565b61133f5760405162461bcd60e51b815260206004820152600f60248201527f5452414e534645525f4641494c454400000000000000000000000000000000006044820152606401610314565b5050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b17905291516000928392908816916113bf91906115f2565b6000604051808303816000865af19150503d80600081146113fc576040519150601f19603f3d011682016040523d82523d6000602084013e611401565b606091505b509150915081801561142b57508051158061142b57508080602001905181019061142b91906115a3565b6114775760405162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c45440000000000000000000000006044820152606401610314565b505050505050565b6000610f5c828461162d565b60006114b982608001516105be6305f5e1006114b386602001516114ad61048b565b906114bf565b906114cb565b92915050565b6000610f5c8284611645565b6000610f5c8284611664565b80356001600160a01b03811681146114ee57600080fd5b919050565b60006020828403121561150557600080fd5b610f5c826114d7565b6000806040838503121561152157600080fd5b61152a836114d7565b946020939093013593505050565b60006020828403121561154a57600080fd5b5035919050565b6000806000806080858703121561156757600080fd5b611570856114d7565b966020860135965060408601359560600135945092505050565b60006020828403121561159c57600080fd5b5051919050565b6000602082840312156115b557600080fd5b81518015158114610f5c57600080fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156115ed576115ed6115c5565b500390565b6000825160005b8181101561161357602081860181015185830152016115f9565b81811115611622576000828501525b509190910192915050565b60008219821115611640576116406115c5565b500190565b600081600019048311821515161561165f5761165f6115c5565b500290565b60008261168157634e487b7160e01b600052601260045260246000fd5b50049056fea164736f6c634300080a000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7110,
        "contract": "contracts/redemption/PPanaRedeem.sol:PPanaRedeem",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7112,
        "contract": "contracts/redemption/PPanaRedeem.sol:PPanaRedeem",
        "label": "newOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 7147,
        "contract": "contracts/redemption/PPanaRedeem.sol:PPanaRedeem",
        "label": "terms",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(Term)7142_storage)"
      },
      {
        "astId": 7151,
        "contract": "contracts/redemption/PPanaRedeem.sol:PPanaRedeem",
        "label": "walletChange",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_struct(Term)7142_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PPanaRedeem.Term)",
        "numberOfBytes": "32",
        "value": "t_struct(Term)7142_storage"
      },
      "t_struct(Term)7142_storage": {
        "encoding": "inplace",
        "label": "struct PPanaRedeem.Term",
        "members": [
          {
            "astId": 7127,
            "contract": "contracts/redemption/PPanaRedeem.sol:PPanaRedeem",
            "label": "supplyBased",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 7129,
            "contract": "contracts/redemption/PPanaRedeem.sol:PPanaRedeem",
            "label": "percent",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7131,
            "contract": "contracts/redemption/PPanaRedeem.sol:PPanaRedeem",
            "label": "max",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7133,
            "contract": "contracts/redemption/PPanaRedeem.sol:PPanaRedeem",
            "label": "lockDuration",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7135,
            "contract": "contracts/redemption/PPanaRedeem.sol:PPanaRedeem",
            "label": "exercised",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7137,
            "contract": "contracts/redemption/PPanaRedeem.sol:PPanaRedeem",
            "label": "locked",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 7139,
            "contract": "contracts/redemption/PPanaRedeem.sol:PPanaRedeem",
            "label": "lockExpiry",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 7141,
            "contract": "contracts/redemption/PPanaRedeem.sol:PPanaRedeem",
            "label": "active",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}