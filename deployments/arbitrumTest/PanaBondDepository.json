{
  "address": "0x6CCE39A7E74aB4b5533Bba4E9BED78c8C3aF1Ca6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IPanaAuthority",
          "name": "_authority",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_pana",
          "type": "address"
        },
        {
          "internalType": "contract IKarsha",
          "name": "_karsha",
          "type": "address"
        },
        {
          "internalType": "contract IStaking",
          "name": "_staking",
          "type": "address"
        },
        {
          "internalType": "contract ITreasury",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IPanaAuthority",
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "AuthorityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "Bond",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "CloseMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "quoteToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialPrice",
          "type": "uint256"
        }
      ],
      "name": "CreateMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldControlVariable",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newControlVariable",
          "type": "uint256"
        }
      ],
      "name": "Tuned",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "adjustments",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "change",
          "type": "uint256"
        },
        {
          "internalType": "uint48",
          "name": "lastAdjustment",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "timeToAdjusted",
          "type": "uint48"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "internalType": "contract IPanaAuthority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "close",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_quoteToken",
          "type": "address"
        },
        {
          "internalType": "uint256[3]",
          "name": "_market",
          "type": "uint256[3]"
        },
        {
          "internalType": "bool[4]",
          "name": "_booleans",
          "type": "bool[4]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_terms",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint32[2]",
          "name": "_intervals",
          "type": "uint32[2]"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "currentControlVariable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "currentDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "debtDecay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "debtRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_referral",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getOraclePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTreasuryRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "indexesFor",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "isLive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liveMarkets",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "liveMarketsFor",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "marketPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "capacity",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "quoteToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "capacityInQuote",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "quoteTokenIsReserve",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "totalDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPayout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "purchased",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "marketsForQuote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "metadata",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "lastTune",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "lastDecay",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "length",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "depositInterval",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "tuneInterval",
          "type": "uint48"
        },
        {
          "internalType": "uint8",
          "name": "quoteDecimals",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "quoteIsLPToken",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "notes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "internalType": "uint48",
          "name": "created",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "matured",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "redeemed",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "marketID",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "payoutFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "pendingFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout_",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "matured_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceOracle",
      "outputs": [
        {
          "internalType": "contract IPriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "pullNote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newIndex_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "pushNote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_indexes",
          "type": "uint256[]"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "redeemAll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPanaAuthority",
          "name": "_newAuthority",
          "type": "address"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPriceOracle",
          "name": "_priceOracle",
          "type": "address"
        }
      ],
      "name": "setPriceOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_toFrontEnd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_toDAO",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_toTreasury",
          "type": "uint256"
        }
      ],
      "name": "setRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "terms",
      "outputs": [
        {
          "internalType": "bool",
          "name": "fixedTerm",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "controlVariable",
          "type": "uint256"
        },
        {
          "internalType": "uint48",
          "name": "vesting",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "conclusion",
          "type": "uint48"
        },
        {
          "internalType": "uint256",
          "name": "maxDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf6636dec29c86f636855f857bb223b1c9cbcf7256e6952e8eeab48927a8cad11",
  "receipt": {
    "to": null,
    "from": "0x2d494Cb0a923009C471B9512571048560a44556A",
    "contractAddress": "0x6CCE39A7E74aB4b5533Bba4E9BED78c8C3aF1Ca6",
    "transactionIndex": 0,
    "gasUsed": "73948099",
    "logsBloom": "0x
    "blockHash": "0x128235517e1d5765f9e21035abde5b18c0dc704f2e6b53b553955986e4fb5f42",
    "transactionHash": "0xf6636dec29c86f636855f857bb223b1c9cbcf7256e6952e8eeab48927a8cad11",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 13417094,
        "transactionHash": "0xf6636dec29c86f636855f857bb223b1c9cbcf7256e6952e8eeab48927a8cad11",
        "address": "0x6CCE39A7E74aB4b5533Bba4E9BED78c8C3aF1Ca6",
        "topics": [
          "0x2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad",
          "0x000000000000000000000000afdc0d2247b20d37b905ccbfb0650fcc606d11eb"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x128235517e1d5765f9e21035abde5b18c0dc704f2e6b53b553955986e4fb5f42"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 13417094,
        "transactionHash": "0xf6636dec29c86f636855f857bb223b1c9cbcf7256e6952e8eeab48927a8cad11",
        "address": "0x29f55058bE3104EdE589fA51ff74B2F07eBb46F6",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000006cce39a7e74ab4b5533bba4e9bed78c8c3af1ca6",
          "0x000000000000000000000000c51cf1e652fee25e3b6ce408808c08a04bb5563b"
        ],
        "data": "0x000000000000000000000000002cd76fe086b93ce2f768a00b22a00000000000",
        "logIndex": 1,
        "blockHash": "0x128235517e1d5765f9e21035abde5b18c0dc704f2e6b53b553955986e4fb5f42"
      }
    ],
    "blockNumber": 13417094,
    "cumulativeGasUsed": "34151198",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xafdc0D2247B20D37b905ccbFB0650FCc606D11eB",
    "0x29f55058bE3104EdE589fA51ff74B2F07eBb46F6",
    "0x405418027E76337BA7D8B7f7125CDBF4E3503e6d",
    "0xc51cf1E652FeE25E3b6Ce408808c08a04BB5563b",
    "0xBcc4638aD5919aAE37baA8b67951Fd77621414bE"
  ],
  "solcInputHash": "101820d40db3996a1a85de879b15c5b8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IPanaAuthority\",\"name\":\"_authority\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_pana\",\"type\":\"address\"},{\"internalType\":\"contract IKarsha\",\"name\":\"_karsha\",\"type\":\"address\"},{\"internalType\":\"contract IStaking\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"contract ITreasury\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IPanaAuthority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Bond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"CloseMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialPrice\",\"type\":\"uint256\"}],\"name\":\"CreateMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldControlVariable\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newControlVariable\",\"type\":\"uint256\"}],\"name\":\"Tuned\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"adjustments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"change\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"lastAdjustment\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"timeToAdjusted\",\"type\":\"uint48\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract IPanaAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_quoteToken\",\"type\":\"address\"},{\"internalType\":\"uint256[3]\",\"name\":\"_market\",\"type\":\"uint256[3]\"},{\"internalType\":\"bool[4]\",\"name\":\"_booleans\",\"type\":\"bool[4]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_terms\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint32[2]\",\"name\":\"_intervals\",\"type\":\"uint32[2]\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"currentControlVariable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"currentDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"debtDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"debtRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getOraclePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasuryRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"indexesFor\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liveMarkets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"liveMarketsFor\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"marketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"capacityInQuote\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"quoteTokenIsReserve\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchased\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketsForQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"lastTune\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"lastDecay\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"length\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"depositInterval\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"tuneInterval\",\"type\":\"uint48\"},{\"internalType\":\"uint8\",\"name\":\"quoteDecimals\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"quoteIsLPToken\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"notes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"created\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"matured\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"redeemed\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"marketID\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"payoutFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"pendingFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"matured_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"pullNote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newIndex_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"pushNote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_indexes\",\"type\":\"uint256[]\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"redeemAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPanaAuthority\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"_priceOracle\",\"type\":\"address\"}],\"name\":\"setPriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_toFrontEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toDAO\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toTreasury\",\"type\":\"uint256\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"terms\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"fixedTerm\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"controlVariable\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"vesting\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"conclusion\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"maxDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"close(uint256)\":{\"params\":{\"_id\":\"ID of market to close\"}},\"create(address,uint256[3],bool[4],uint256[2],uint32[2])\":{\"details\":\"current price should be in 18 decimals.\",\"params\":{\"_booleans\":\"[capacity in quote, quote is reserve, quote is LP, fixed term]\",\"_intervals\":\"[deposit interval (seconds), tune interval (seconds)]\",\"_market\":\"[capacity (in PANA or quote), initial price / PANA (18 decimals), debt buffer (3 decimals)]\",\"_quoteToken\":\"token used to deposit\",\"_terms\":\"[vesting length (if fixed term) or vested timestamp, conclusion timestamp]\"},\"returns\":{\"id_\":\"        ID of new bond market\"}},\"currentControlVariable(uint256)\":{\"details\":\"accounts for control variable adjustment\",\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"control variable for market in PANA decimals\"}},\"currentDebt(uint256)\":{\"details\":\"accounts for debt decay since last deposit\",\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"current debt for market in PANA decimals\"}},\"debtDecay(uint256)\":{\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"amount of debt to decay\"}},\"debtRatio(uint256)\":{\"details\":\"uses current debt, which accounts for debt decay since last deposit (vs _debtRatio())\",\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"debt ratio for market in quote decimals\"}},\"deposit(uint256,uint256,uint256,address,address)\":{\"params\":{\"_amount\":\"the amount of quote token to spend\",\"_id\":\"the ID of the market\",\"_maxPrice\":\"the maximum price at which to buy\",\"_referral\":\"the front end operator address\",\"_user\":\"the recipient of the payout\"},\"returns\":{\"expiry_\":\"    the timestamp at which payout is redeemable\",\"index_\":\"     the user index of the Note (used to redeem or query information)\",\"payout_\":\"    the amount of KARSHA due\"}},\"getOraclePrice(uint256)\":{\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"oracle price for market in PANA decimals\"}},\"indexesFor(address)\":{\"params\":{\"_user\":\"the user to query notes for\"},\"returns\":{\"_0\":\"the pending notes for the user\"}},\"isLive(uint256)\":{\"params\":{\"_id\":\"ID of market\"}},\"liveMarketsFor(address)\":{\"params\":{\"_token\":\"quote token to check for\"}},\"marketPrice(uint256)\":{\"details\":\"accounts for debt and control variable decay since last deposit (vs _marketPrice())\",\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"price for market in PANA decimals price is derived from the equation p = cv * dr where p = price cv = control variable dr = debt ratio dr = d / s  where d = debt s = supply of token at market creation d -= ( d * (dt / l) )  where dt = change in time l = length of program\"}},\"payoutFor(uint256,uint256)\":{\"details\":\"accounts for debt and control variable decay so it is up to date1e36 = PANA decimals (18) + market price decimals (18)\",\"params\":{\"_amount\":\"amount of quote tokens to spend\",\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"amount of PANA to be paid in PANA decimals\"}},\"pendingFor(address,uint256)\":{\"params\":{\"_index\":\"the index of the note in the user's array\",\"_user\":\"the user that the note belongs to\"},\"returns\":{\"matured_\":\"   if the payout can be redeemed\",\"payout_\":\"    the payout due, in Karsha\"}},\"pullNote(address,uint256)\":{\"params\":{\"_from\":\"the address that approved the note transfer\",\"_index\":\"the index of the note to transfer (in the sender's array)\"}},\"pushNote(address,uint256)\":{\"params\":{\"_index\":\"index of note to approve transfer for\",\"_to\":\"address to approve note transfer for\"}},\"redeem(address,uint256[])\":{\"params\":{\"_indexes\":\"the note indexes to redeem\",\"_user\":\"the user to redeem for\"},\"returns\":{\"payout_\":\"    sum of payout sent, in Karsha\"}},\"redeemAll(address)\":{\"details\":\"if possible, query indexesFor() off-chain and input in redeem() to save gas\",\"params\":{\"_user\":\"user to redeem all notes for\"},\"returns\":{\"_0\":\"sum of payout sent, in Karsha\"}}},\"title\":\"Pana Bond Depository\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"close(uint256)\":{\"notice\":\"disable existing market\"},\"create(address,uint256[3],bool[4],uint256[2],uint32[2])\":{\"notice\":\"creates a new market type\"},\"currentControlVariable(uint256)\":{\"notice\":\"up to date control variable\"},\"currentDebt(uint256)\":{\"notice\":\"calculate debt factoring in decay\"},\"debtDecay(uint256)\":{\"notice\":\"amount of debt to decay from total debt for market ID\"},\"debtRatio(uint256)\":{\"notice\":\"calculate current ratio of debt to supply\"},\"deposit(uint256,uint256,uint256,address,address)\":{\"notice\":\"deposit quote tokens in exchange for a bond from a specified market\"},\"getOraclePrice(uint256)\":{\"notice\":\"gets token price in quote tokens from oracle\"},\"getTreasuryRewards()\":{\"notice\":\"Manually fetch remaining rewards for Treasury\"},\"indexesFor(address)\":{\"notice\":\"all pending notes for user\"},\"isLive(uint256)\":{\"notice\":\"is a given market accepting deposits\"},\"liveMarkets()\":{\"notice\":\"returns an array of all active market IDs\"},\"liveMarketsFor(address)\":{\"notice\":\"returns an array of all active market IDs for a given quote token\"},\"marketPrice(uint256)\":{\"notice\":\"calculate current market price of quote token in base token\"},\"payoutFor(uint256,uint256)\":{\"notice\":\"payout due for amount of quote tokens\"},\"pendingFor(address,uint256)\":{\"notice\":\"calculate amount available for claim for a single note\"},\"pullNote(address,uint256)\":{\"notice\":\"transfer a note that has been approved by an address\"},\"pushNote(address,uint256)\":{\"notice\":\"approve an address to transfer a note\"},\"redeem(address,uint256[])\":{\"notice\":\"redeem notes for user\"},\"redeemAll(address)\":{\"notice\":\"redeem all redeemable markets for user\"},\"setPriceOracle(address)\":{\"notice\":\"sets price oracle for bond depository\"},\"setRewards(uint256,uint256,uint256)\":{\"notice\":\"set rewards for front end operators and DAO\"},\"whitelist(address)\":{\"notice\":\"add or remove addresses from the reward whitelist\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bond/BondDepository.sol\":\"PanaBondDepository\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/access/PanaAccessControlled.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport \\\"../interfaces/IPanaAuthority.sol\\\";\\n\\nabstract contract PanaAccessControlled {\\n\\n    /* ========== EVENTS ========== */\\n\\n    event AuthorityUpdated(IPanaAuthority indexed authority);\\n\\n    string UNAUTHORIZED = \\\"UNAUTHORIZED\\\"; // save gas\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IPanaAuthority public authority;\\n\\n\\n    /* ========== Constructor ========== */\\n\\n    constructor(IPanaAuthority _authority) {\\n        authority = _authority;\\n        emit AuthorityUpdated(_authority);\\n    }\\n    \\n\\n    /* ========== MODIFIERS ========== */\\n    \\n    modifier onlyGovernor() {\\n        require(msg.sender == authority.governor(), UNAUTHORIZED);\\n        _;\\n    }\\n    \\n    modifier onlyGuardian() {\\n        require(msg.sender == authority.guardian(), UNAUTHORIZED);\\n        _;\\n    }\\n    \\n    modifier onlyPolicy() {\\n        require(msg.sender == authority.policy(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyVault() {\\n        require(msg.sender == authority.vault(), UNAUTHORIZED);\\n        _;\\n    }\\n    \\n    /* ========== GOV ONLY ========== */\\n    \\n    function setAuthority(IPanaAuthority _newAuthority) external onlyGovernor {\\n        authority = _newAuthority;\\n        emit AuthorityUpdated(_newAuthority);\\n    }\\n}\\n\",\"keccak256\":\"0x034e5499a57b5a80ba7315a07b54a800876e4e9143ec38855118dc2ff0af9311\",\"license\":\"AGPL-3.0-only\"},\"contracts/bond/BondDepository.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.10;\\n\\nimport \\\"../bond/NoteKeeper.sol\\\";\\n\\nimport \\\"../libraries/SafeERC20.sol\\\";\\n\\nimport \\\"../interfaces/IStaking.sol\\\";\\nimport \\\"../interfaces/ITreasury.sol\\\";\\nimport \\\"../interfaces/IERC20Metadata.sol\\\";\\nimport \\\"../interfaces/IBondDepository.sol\\\";\\nimport \\\"../interfaces/IPriceOracle.sol\\\";\\n\\nimport \\\"../interfaces/IUniswapV2ERC20.sol\\\";\\nimport \\\"../interfaces/IUniswapV2Pair.sol\\\";\\n\\n/// @title Pana Bond Depository\\n\\ncontract PanaBondDepository is IBondDepository, NoteKeeper {\\n/* ======== DEPENDENCIES ======== */\\n\\n  using SafeERC20 for IERC20;\\n\\n/* ======== EVENTS ======== */\\n\\n  event CreateMarket(uint256 indexed id, address indexed baseToken, address indexed quoteToken, uint256 initialPrice);\\n  event CloseMarket(uint256 indexed id);\\n  event Bond(uint256 indexed id, uint256 amount, uint256 price);\\n  event Tuned(uint256 indexed id, uint256 oldControlVariable, uint256 newControlVariable);\\n\\n/* ======== STATE VARIABLES ======== */\\n\\n  IPriceOracle public priceOracle;\\n\\n  // Storage\\n  Market[] public markets; // persistent market data\\n  Terms[] public terms; // deposit construction data\\n  Metadata[] public metadata; // extraneous market data\\n  mapping(uint256 => Adjustment) public adjustments; // control variable changes\\n\\n  // Queries\\n  mapping(address => uint256[]) public marketsForQuote; // market IDs for quote token\\n\\n/* ======== CONSTRUCTOR ======== */\\n\\n  constructor(\\n    IPanaAuthority _authority,\\n    IERC20 _pana,\\n    IKarsha _karsha,\\n    IStaking _staking,\\n    ITreasury _treasury\\n  ) NoteKeeper(_authority, _pana, _karsha, _staking, _treasury) {\\n    // save gas for users by bulk approving stake() transactions\\n    _pana.approve(address(_staking), 1e45);\\n  }\\n\\n  /**\\n   * @notice             sets price oracle for bond depository\\n   */\\n  function setPriceOracle(IPriceOracle _priceOracle) external onlyGovernor {\\n      priceOracle = _priceOracle;\\n  }\\n\\n/* ======== DEPOSIT ======== */\\n\\n  /**\\n   * @notice             deposit quote tokens in exchange for a bond from a specified market\\n   * @param _id          the ID of the market\\n   * @param _amount      the amount of quote token to spend\\n   * @param _maxPrice    the maximum price at which to buy\\n   * @param _user        the recipient of the payout\\n   * @param _referral    the front end operator address\\n   * @return payout_     the amount of KARSHA due\\n   * @return expiry_     the timestamp at which payout is redeemable\\n   * @return index_      the user index of the Note (used to redeem or query information)\\n   */\\n  function deposit(\\n    uint256 _id,\\n    uint256 _amount,\\n    uint256 _maxPrice,\\n    address _user,\\n    address _referral\\n  ) external override returns (\\n    uint256 payout_, \\n    uint256 expiry_,\\n    uint256 index_\\n  ) {\\n    Market storage market = markets[_id];\\n    Terms memory term = terms[_id];\\n    uint48 currentTime = uint48(block.timestamp);\\n\\n    // Markets end at a defined timestamp\\n    // |-------------------------------------| t\\n    require(currentTime < term.conclusion, \\\"Depository: market concluded\\\");\\n\\n    // Debt and the control variable decay over time\\n    _decay(_id, currentTime);\\n\\n    // Users input a maximum price, which protects them from price changes after\\n    // entering the mempool. max price is a slippage mitigation measure\\n    { // add block scoping to avoid stack too deep\\n    uint256 price = _marketPrice(_id);\\n\\n    require(price <= _maxPrice, \\\"Depository: more than max price\\\"); \\n\\n    /**\\n     * payout for the deposit = amount / price\\n     *\\n     * where\\n     * payout = PANA out\\n     * amount = quote tokens in\\n     * price = quote tokens : PANA \\n     *\\n     * 1e36 = PANA decimals (18) + price decimals (18)\\n     */\\n    payout_ = (_amount * 1e36 / price) / (10 ** metadata[_id].quoteDecimals);\\n\\n    // markets have a max payout amount, capping size because deposits\\n    // do not experience slippage. max payout is recalculated upon tuning\\n    require(payout_ <= market.maxPayout, \\\"Depository: max size exceeded\\\");\\n    \\n    /*\\n     * each market is initialized with a capacity\\n     *\\n     * this is either the number of PANA that the market can sell\\n     * (if capacity in quote is false), \\n     *\\n     * or the number of quote tokens that the market can buy\\n     * (if capacity in quote is true)\\n     */\\n    market.capacity -= market.capacityInQuote\\n      ? _amount\\n      : payout_;\\n\\n    /**\\n     * bonds mature with a cliff at a set timestamp\\n     * prior to the expiry timestamp, no payout tokens are accessible to the user\\n     * after the expiry timestamp, the entire payout can be redeemed\\n     *\\n     * there are two types of bonds: fixed-term and fixed-expiration\\n     *\\n     * fixed-term bonds mature in a set amount of time from deposit\\n     * i.e. term = 1 week. when alice deposits on day 1, her bond\\n     * expires on day 8. when bob deposits on day 2, his bond expires day 9.\\n     *\\n     * fixed-expiration bonds mature at a set timestamp\\n     * i.e. expiration = day 10. when alice deposits on day 1, her term\\n     * is 9 days. when bob deposits on day 2, his term is 8 days.\\n     */\\n    expiry_ = term.fixedTerm\\n      ? term.vesting + currentTime\\n      : term.vesting;\\n\\n    // markets keep track of how many quote tokens have been\\n    // purchased, and how much PANA has been sold\\n    market.purchased += _amount;\\n    market.sold += uint256(payout_);\\n\\n    // incrementing total debt raises the price of the next bond\\n    market.totalDebt += uint256(payout_);\\n\\n    emit Bond(_id, _amount, price);\\n    }\\n\\n    // send quote token to treasury, mint PANA, and stake the payout\\n    _sendToTreasury(_id, _amount, payout_, _referral);\\n\\n    /**\\n     * user data is stored as Notes. these are isolated array entries\\n     * storing the amount due, the time created, the time when payout\\n     * is redeemable, the time when payout was redeemed, and the ID\\n     * of the market deposited into\\n     */\\n    index_ = addNote(\\n      _user,\\n      payout_,\\n      uint48(expiry_),\\n      uint48(_id)\\n    );\\n\\n    // if max debt is breached, the market is closed \\n    // this a circuit breaker\\n    if (term.maxDebt < market.totalDebt) {\\n        market.capacity = 0;\\n        emit CloseMarket(_id);\\n    } else {\\n      // if market will continue, the control variable is tuned to hit targets on time\\n      _tune(_id, currentTime);\\n    }\\n  }\\n\\n  /**\\n    * @notice             sends funds to treasury and mints correct amount of PANA for payout\\n    * @param _id          the ID of the market\\n    * @param _amount      the amount of quote token being sent\\n    * @param _payout      the amount of PANA to be paid to depositor\\n    */\\n  function _sendToTreasury(uint256 _id, uint256 _amount, uint256 _payout, address _referral) internal {\\n      /**\\n        * payment is transferred to the treasury and PANA is minted for \\n        * the user payout. if the quoteToken is a reserve asset or LP\\n        * token, then it should be deposited to the treasury. if not,\\n        * it should be transferred.\\n        */\\n      Market memory market = markets[_id];\\n      \\n      uint256 toTreasury = 0;\\n      uint256 toRef = 0;\\n      uint256 toDAO = 0;\\n          \\n      if (market.quoteTokenIsReserve) {\\n          // transfer payment from user to this contract\\n          market.quoteToken.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n          // get tokenValue from treasury to calculate profit for deposit\\n          uint256 value = treasury.tokenValue(address(market.quoteToken), _amount);\\n\\n          // get rewards for DAO, Treasury and referral\\n          if (value > _payout) {\\n            (toRef, toDAO, toTreasury) = giveRewards(_payout, _referral, value - _payout);\\n          }\\n\\n          // calculate amount to mint\\n          uint256 toMint = _payout + toRef + toDAO + toTreasury;\\n\\n          // calculate profit\\n          uint256 profit = 0;\\n          if (value > toMint) {\\n            profit = value - toMint;\\n          }\\n          \\n          // deposit the payment to the treasury\\n          treasury.deposit(_amount, address(market.quoteToken), profit);\\n      } else {\\n          // transfer payment from user to treasury directly\\n          market.quoteToken.safeTransferFrom(msg.sender, address(treasury), _amount);\\n          \\n          // get rewards for DAO, Treasury and referral\\n          (toRef, toDAO, toTreasury) = giveRewards(_payout, _referral, type(uint256).max);\\n\\n          // mint PANA for payout and reward\\n          treasury.mint(address(this), _payout + toRef + toDAO + toTreasury);\\n      }\\n\\n      if (toTreasury > 0) {\\n        // Rewards generated for Treasury should be sent to Treasury immediately\\n        sendRewardsToTreasury(toTreasury);\\n      }\\n\\n      // stake the payout while vesting\\n      staking.stake(address(this), _payout);\\n  }\\n\\n\\n  /**\\n   * @notice             decay debt, and adjust control variable if there is an active change\\n   * @param _id          ID of market\\n   * @param _time        uint48 timestamp (saves gas when passed in)\\n   */\\n  function _decay(uint256 _id, uint48 _time) internal {\\n\\n    // Debt decay\\n\\n    /*\\n     * Debt is a time-decayed sum of tokens spent in a market\\n     * Debt is added when deposits occur and removed over time\\n     * |\\n     * |    debt falls with\\n     * |   / \\\\  inactivity       / \\\\\\n     * | /     \\\\              /\\\\/    \\\\\\n     * |         \\\\           /         \\\\\\n     * |           \\\\      /\\\\/            \\\\\\n     * |             \\\\  /  and rises       \\\\\\n     * |                with deposits\\n     * |\\n     * |------------------------------------| t\\n     */\\n    markets[_id].totalDebt -= debtDecay(_id);\\n    metadata[_id].lastDecay = _time;\\n\\n\\n    // Control variable decay\\n\\n    // The bond control variable is continually tuned. When it is lowered (which\\n    // lowers the market price), the change is carried out smoothly over time.\\n    if (adjustments[_id].active) {\\n      Adjustment storage adjustment = adjustments[_id];\\n\\n      (uint256 adjustBy, uint48 secondsSince, bool stillActive) = _controlDecay(_id);\\n      terms[_id].controlVariable -= adjustBy;\\n\\n      if (stillActive) {\\n        adjustment.change -= adjustBy;\\n        adjustment.timeToAdjusted -= secondsSince;\\n        adjustment.lastAdjustment = _time;\\n      } else {\\n        adjustment.active = false;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice             auto-adjust control variable to hit capacity/spend target\\n   * @param _id          ID of market\\n   * @param _time        uint48 timestamp (saves gas when passed in)\\n   */\\n  function _tune(uint256 _id, uint48 _time) internal {\\n    Metadata memory meta = metadata[_id];\\n\\n    if (_time >= meta.lastTune + meta.tuneInterval) {\\n      Market memory market = markets[_id];\\n      \\n      // compute seconds remaining until market will conclude\\n      uint256 timeRemaining = terms[_id].conclusion - _time;\\n      uint256 price = _marketPrice(_id);\\n\\n      // standardize capacity into an base token amount\\n      // PANA decimals (18) + price decimals (18)\\n      uint256 capacity = market.capacityInQuote\\n        ? (market.capacity * 1e36 / price) / (10 ** meta.quoteDecimals)\\n        : market.capacity;\\n\\n      /**\\n       * calculate the correct payout to complete on time assuming each bond\\n       * will be max size in the desired deposit interval for the remaining time\\n       *\\n       * i.e. market has 10 days remaining. deposit interval is 1 day. capacity\\n       * is 10,000 PANA. max payout would be 1,000 PANA (10,000 * 1 / 10).\\n       */  \\n      markets[_id].maxPayout = uint256(capacity * meta.depositInterval / timeRemaining);\\n\\n      // calculate the ideal total debt to satisfy capacity in the remaining time\\n      uint256 targetDebt = capacity * meta.length / timeRemaining;\\n\\n      // derive a new control variable from the target debt and current supply\\n      uint256 newControlVariable = uint256(price * treasury.baseSupply() / targetDebt);\\n\\n      emit Tuned(_id, terms[_id].controlVariable, newControlVariable);\\n\\n      if (newControlVariable >= terms[_id].controlVariable) {\\n        terms[_id].controlVariable = newControlVariable;\\n      } else {\\n        // if decrease, control variable change will be carried out over the tune interval\\n        // this is because price will be lowered\\n        uint256 change = terms[_id].controlVariable - newControlVariable;\\n        adjustments[_id] = Adjustment(change, _time, meta.tuneInterval, true);\\n      }\\n      metadata[_id].lastTune = _time;\\n    }\\n  }\\n\\n/* ======== CREATE ======== */\\n\\n  /**\\n   * @notice             creates a new market type\\n   * @dev                current price should be in 18 decimals.\\n   * @param _quoteToken  token used to deposit\\n   * @param _market      [capacity (in PANA or quote), initial price / PANA (18 decimals), debt buffer (3 decimals)]\\n   * @param _booleans    [capacity in quote, quote is reserve, quote is LP, fixed term]\\n   * @param _terms       [vesting length (if fixed term) or vested timestamp, conclusion timestamp]\\n   * @param _intervals   [deposit interval (seconds), tune interval (seconds)]\\n   * @return id_         ID of new bond market\\n   */\\n  function create(\\n    IERC20 _quoteToken,\\n    uint256[3] memory _market,\\n    bool[4] memory _booleans,\\n    uint256[2] memory _terms,\\n    uint32[2] memory _intervals\\n  ) external override onlyPolicy returns (uint256 id_) {\\n\\n    // the length of the program, in seconds\\n    uint256 secondsToConclusion = _terms[1] - block.timestamp;\\n\\n    // the decimal count of the quote token\\n    uint256 decimals = IERC20Metadata(address(_quoteToken)).decimals();\\n\\n    /* \\n     * initial target debt is equal to capacity (this is the amount of debt\\n     * that will decay over in the length of the program if price remains the same).\\n     * it is converted into base token terms if passed in in quote token terms.\\n     *\\n     * 1e36 = PANA decimals (18) + initial price decimals (18)\\n     */\\n    uint256 targetDebt = uint256(_booleans[0] ?\\n    (_market[0] * 1e36 / _market[1]) / 10 ** decimals \\n    : _market[0]\\n    );\\n\\n    /*\\n     * max payout is the amount of capacity that should be utilized in a deposit\\n     * interval. for example, if capacity is 1,000 PANA, there are 10 days to conclusion, \\n     * and the preferred deposit interval is 1 day, max payout would be 100 PANA.\\n     */\\n    uint256 maxPayout = uint256(targetDebt * _intervals[0] / secondsToConclusion);\\n\\n    /*\\n     * max debt serves as a circuit breaker for the market. let's say the quote\\n     * token is a stablecoin, and that stablecoin depegs. without max debt, the\\n     * market would continue to buy until it runs out of capacity. this is\\n     * configurable with a 3 decimal buffer (1000 = 1% above initial price).\\n     * note that its likely advisable to keep this buffer wide.\\n     * note that the buffer is above 100%. i.e. 10% buffer = initial debt * 1.1\\n     */\\n    uint256 maxDebt = targetDebt + (targetDebt * _market[2] / 1e5); // 1e5 = 100,000. 10,000 / 100,000 = 10%.\\n\\n    /*\\n     * the control variable is set so that initial price equals the desired\\n     * initial price. the control variable is the ultimate determinant of price,\\n     * so we compute this last.\\n     *\\n     * price = control variable * debt ratio\\n     * debt ratio = total debt / supply\\n     * therefore, control variable = price / debt ratio\\n     */\\n    uint256 controlVariable = _market[1] * treasury.baseSupply() / targetDebt;\\n\\n    // depositing into, or getting info for, the created market uses this ID\\n    id_ = markets.length;\\n\\n    markets.push(Market({\\n      quoteToken: _quoteToken, \\n      quoteTokenIsReserve: _booleans[1],\\n      capacityInQuote: _booleans[0],\\n      capacity: _market[0],\\n      totalDebt: targetDebt, \\n      maxPayout: maxPayout,\\n      purchased: 0,\\n      sold: 0\\n    }));\\n\\n    terms.push(Terms({\\n      fixedTerm: _booleans[3], \\n      controlVariable: uint256(controlVariable),\\n      vesting: uint48(_terms[0]), \\n      conclusion: uint48(_terms[1]), \\n      maxDebt: uint256(maxDebt) \\n    }));\\n\\n    metadata.push(Metadata({\\n      lastTune: uint48(block.timestamp),\\n      lastDecay: uint48(block.timestamp),\\n      length: uint48(secondsToConclusion),\\n      depositInterval: _intervals[0],\\n      tuneInterval: _intervals[1],\\n      quoteDecimals: uint8(decimals),\\n      quoteIsLPToken: _booleans[2]\\n    }));\\n\\n    marketsForQuote[address(_quoteToken)].push(id_);\\n\\n    // Approve the treasury for quoteToken if quoteTokenIsReserve\\n    if (_booleans[1]) _quoteToken.approve(address(treasury), type(uint256).max);\\n\\n    emit CreateMarket(id_, address(pana), address(_quoteToken), _market[1]);\\n  }\\n\\n  /**\\n   * @notice             disable existing market\\n   * @param _id          ID of market to close\\n   */\\n  function close(uint256 _id) external override onlyPolicy {\\n    terms[_id].conclusion = uint48(block.timestamp);\\n    markets[_id].capacity = 0;\\n    emit CloseMarket(_id);\\n  }\\n\\n  /**\\n   * @notice             gets token price in quote tokens from oracle\\n   * @param _id          ID of market\\n   * @return             oracle price for market in PANA decimals\\n   */\\n  function getOraclePrice(uint256 _id) public view returns (uint256) {\\n    Market memory market = markets[_id];\\n    Metadata memory meta = metadata[_id];\\n\\n    if (meta.quoteIsLPToken) {\\n      /**\\n       * to find a price of 1 LP token, we need:\\n       * - call oracle to get the price of other token in Pana\\n       * - calculate LP total reserves in Pana\\n       * - divide LP total supply by total reserves \\n       */\\n\\n      IUniswapV2Pair pair = IUniswapV2Pair(address(market.quoteToken));\\n\\n      address token = pair.token0();\\n      address token1 = pair.token1();\\n      (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(pair).getReserves();\\n      \\n      if (token == address(pana) || token == address(karsha)) {\\n        (token, token1) = (token1, token);\\n        (reserve0, reserve1) = (reserve1, reserve0);\\n      }\\n      else {\\n        require(token1 == address(pana) || token1 == address(karsha), \\\"Invalid pair\\\");\\n      }\\n\\n      uint256 tokenDecimals = IERC20Metadata(token).decimals();\\n\\n      // X Pana/Karsha per 1 token\\n      // Passing amount = 10**18 to the consult function\\n      // works only for pairing of Pana with other 18 decimal tokens.\\n      // In case of pairing with different decimal tokens relevant\\n      // adjustments need to be made.\\n      uint256 tokenPrice = priceOracle.consult(token, 10**18, token1);\\n\\n      // total reserves calculated in Pana/Karsha\\n      uint256 totalReserves = reserve1 + reserve0 * tokenPrice / (10 ** tokenDecimals);\\n\\n      // price of 1 pana/Karsha in LP token\\n      uint256 oraclePrice = pair.totalSupply() * 1e18 / totalReserves;\\n\\n      if (token1 == address(karsha)) {\\n        //adjust karsha price to pana per current index\\n        oraclePrice = oraclePrice / staking.index();\\n      }\\n\\n      return oraclePrice;\\n    }\\n    else {\\n      // Passing amount = 10**18 to the consult function\\n      // works only for pairing of Pana with other 18 decimal tokens.\\n      // In case of pairing with different decimal tokens relevant\\n      // adjustments need to be made.\\n      return priceOracle.consult(address(pana), 10**18, address(market.quoteToken)); \\n    }\\n  }\\n\\n/* ======== EXTERNAL VIEW ======== */\\n\\n  /**\\n   * @notice             calculate current market price of quote token in base token\\n   * @dev                accounts for debt and control variable decay since last deposit (vs _marketPrice())\\n   * @param _id          ID of market\\n   * @return             price for market in PANA decimals\\n   *\\n   * price is derived from the equation\\n   *\\n   * p = cv * dr\\n   *\\n   * where\\n   * p = price\\n   * cv = control variable\\n   * dr = debt ratio\\n   *\\n   * dr = d / s\\n   * \\n   * where\\n   * d = debt\\n   * s = supply of token at market creation\\n   *\\n   * d -= ( d * (dt / l) )\\n   * \\n   * where\\n   * dt = change in time\\n   * l = length of program\\n   */\\n  function marketPrice(uint256 _id) public view override returns (uint256) {\\n    return \\n      currentControlVariable(_id)\\n      * debtRatio(_id)\\n      / (10 ** metadata[_id].quoteDecimals);\\n  }\\n\\n  /**\\n   * @notice             payout due for amount of quote tokens\\n   * @dev                accounts for debt and control variable decay so it is up to date\\n   * @param _amount      amount of quote tokens to spend\\n   * @param _id          ID of market\\n   * @return             amount of PANA to be paid in PANA decimals\\n   *\\n   * @dev 1e36 = PANA decimals (18) + market price decimals (18)\\n   */\\n  function payoutFor(uint256 _amount, uint256 _id) external view override returns (uint256) {\\n    Metadata memory meta = metadata[_id];\\n    return \\n      _amount\\n      * 1e36\\n      / marketPrice(_id)\\n      / 10 ** meta.quoteDecimals;\\n  }\\n\\n  /**\\n   * @notice             calculate current ratio of debt to supply\\n   * @dev                uses current debt, which accounts for debt decay since last deposit (vs _debtRatio())\\n   * @param _id          ID of market\\n   * @return             debt ratio for market in quote decimals\\n   */\\n  function debtRatio(uint256 _id) public view override returns (uint256) {\\n    return \\n      currentDebt(_id)\\n      * (10 ** metadata[_id].quoteDecimals)\\n      / treasury.baseSupply(); \\n  }\\n\\n  /**\\n   * @notice             calculate debt factoring in decay\\n   * @dev                accounts for debt decay since last deposit\\n   * @param _id          ID of market\\n   * @return             current debt for market in PANA decimals\\n   */\\n  function currentDebt(uint256 _id) public view override returns (uint256) {\\n    return markets[_id].totalDebt - debtDecay(_id);\\n  }\\n\\n  /**\\n   * @notice             amount of debt to decay from total debt for market ID\\n   * @param _id          ID of market\\n   * @return             amount of debt to decay\\n   */\\n  function debtDecay(uint256 _id) public view override returns (uint256) {\\n    Metadata memory meta = metadata[_id];\\n\\n    uint256 secondsSince = block.timestamp - meta.lastDecay;\\n\\n    return uint256(markets[_id].totalDebt * secondsSince / meta.length);\\n  }\\n\\n  /**\\n   * @notice             up to date control variable\\n   * @dev                accounts for control variable adjustment\\n   * @param _id          ID of market\\n   * @return             control variable for market in PANA decimals\\n   */\\n  function currentControlVariable(uint256 _id) public view returns (uint256) {\\n    (uint256 decay,,) = _controlDecay(_id);\\n    return terms[_id].controlVariable - decay;\\n  }\\n\\n  /**\\n   * @notice             is a given market accepting deposits\\n   * @param _id          ID of market\\n   */\\n  function isLive(uint256 _id) public view override returns (bool) {\\n    return (markets[_id].capacity != 0 && terms[_id].conclusion > block.timestamp);\\n  }\\n\\n  /**\\n   * @notice returns an array of all active market IDs\\n   */\\n  function liveMarkets() external view override returns (uint256[] memory) {\\n    uint256 num;\\n    for (uint256 i = 0; i < markets.length; i++) {\\n      if (isLive(i)) num++;\\n    }\\n\\n    uint256[] memory ids = new uint256[](num);\\n    uint256 nonce;\\n    for (uint256 i = 0; i < markets.length; i++) {\\n      if (isLive(i)) {\\n        ids[nonce] = i;\\n        nonce++;\\n      }\\n    }\\n    return ids;\\n  }\\n\\n  /**\\n   * @notice             returns an array of all active market IDs for a given quote token\\n   * @param _token       quote token to check for\\n   */\\n  function liveMarketsFor(address _token) external view override returns (uint256[] memory) {\\n    uint256[] memory mkts = marketsForQuote[_token];\\n    uint256 num;\\n\\n    for (uint256 i = 0; i < mkts.length; i++) {\\n      if (isLive(mkts[i])) num++;\\n    }\\n\\n    uint256[] memory ids = new uint256[](num);\\n    uint256 nonce;\\n\\n    for (uint256 i = 0; i < mkts.length; i++) {\\n      if (isLive(mkts[i])) {\\n        ids[nonce] = mkts[i];\\n        nonce++;\\n      }\\n    }\\n    return ids;\\n  }\\n\\n/* ======== INTERNAL VIEW ======== */\\n\\n  /**\\n   * @notice                  calculate current market price of quote token in base token\\n   * @dev                     see marketPrice() for explanation of price computation\\n   * @dev                     uses info from storage because data has been updated before call (vs marketPrice())\\n   * @param _id               market ID\\n   * @return                  price for market in PANA decimals\\n   */ \\n  function _marketPrice(uint256 _id) internal view returns (uint256) {\\n    uint256 price =  terms[_id].controlVariable \\n      * _debtRatio(_id) \\n      / (10 ** metadata[_id].quoteDecimals);\\n\\n    // check oracle price and select minimum\\n    if (address(priceOracle) != address(0)) {\\n      uint256 oraclePrice = getOraclePrice(_id);\\n      if (oraclePrice < price) {\\n        price = oraclePrice;\\n      }\\n    }\\n\\n    // limit market price floor at token basic valuation level\\n    uint256 basePrice = 10 ** (metadata[_id].quoteDecimals + 18)\\n      / treasury.tokenValue(address(markets[_id].quoteToken), 10 ** metadata[_id].quoteDecimals);\\n\\n    if (price < basePrice) {\\n      price = basePrice;\\n    }\\n\\n    return price;  \\n  }\\n  \\n  /**\\n   * @notice                  calculate debt factoring in decay\\n   * @dev                     uses info from storage because data has been updated before call (vs debtRatio())\\n   * @param _id               market ID\\n   * @return                  current debt for market in quote decimals\\n   */ \\n  function _debtRatio(uint256 _id) internal view returns (uint256) {\\n    return \\n      markets[_id].totalDebt\\n      * (10 ** metadata[_id].quoteDecimals)\\n      / treasury.baseSupply(); \\n  }\\n\\n  /**\\n   * @notice                  amount to decay control variable by\\n   * @param _id               ID of market\\n   * @return decay_           change in control variable\\n   * @return secondsSince_    seconds since last change in control variable\\n   * @return active_          whether or not change remains active\\n   */ \\n  function _controlDecay(uint256 _id) internal view returns (uint256 decay_, uint48 secondsSince_, bool active_) {\\n    Adjustment memory info = adjustments[_id];\\n    if (!info.active) return (0, 0, false);\\n\\n    secondsSince_ = uint48(block.timestamp) - info.lastAdjustment;\\n\\n    active_ = secondsSince_ < info.timeToAdjusted;\\n    decay_ = active_ \\n      ? info.change * secondsSince_ / info.timeToAdjusted\\n      : info.change;\\n  }\\n}\",\"keccak256\":\"0xe8a791ce648b0316c40048f5d8715384407d0159502f2f3b7ef1df6d83807510\",\"license\":\"AGPL-3.0\"},\"contracts/bond/NoteKeeper.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.10;\\n\\nimport \\\"../treasury/FrontEndRewarder.sol\\\";\\n\\nimport \\\"../interfaces/IKarsha.sol\\\";\\nimport \\\"../interfaces/IStaking.sol\\\";\\nimport \\\"../interfaces/ITreasury.sol\\\";\\nimport \\\"../interfaces/INoteKeeper.sol\\\";\\n\\nabstract contract NoteKeeper is INoteKeeper, FrontEndRewarder {\\n\\n  mapping(address => Note[]) public notes; // user deposit data\\n  mapping(address => mapping(uint256 => address)) private noteTransfers; // change note ownership\\n\\n  IKarsha internal immutable karsha;\\n  IStaking internal immutable staking;\\n  ITreasury internal treasury;\\n\\n  constructor (\\n    IPanaAuthority _authority,\\n    IERC20 _pana,\\n    IKarsha _karsha,\\n    IStaking _staking,\\n    ITreasury _treasury\\n  ) FrontEndRewarder(_authority, _pana) {\\n    karsha = _karsha;\\n    staking = _staking;\\n    treasury = _treasury;\\n  }\\n\\n  // if treasury address changes on authority, update it\\n  function updateTreasury() external {\\n    require(\\n      msg.sender == authority.governor() ||\\n      msg.sender == authority.guardian() ||\\n      msg.sender == authority.policy(),\\n      \\\"Only authorized\\\"\\n    );\\n    treasury = ITreasury(authority.vault());\\n  }\\n\\n/* ========== ADD ========== */\\n\\n  /**\\n   * @notice             adds a new Note for a user, stores the front end & DAO rewards, and mints & stakes payout & rewards\\n   * @param _user        the user that owns the Note\\n   * @param _payout      the amount of Pana due to the user\\n   * @param _expiry      the timestamp when the Note is redeemable\\n   * @param _marketID    the ID of the market deposited into\\n   * @return index_      the index of the Note in the user's array\\n   */\\n  function addNote(\\n    address _user, \\n    uint256 _payout, \\n    uint48 _expiry, \\n    uint48 _marketID\\n  ) internal returns (uint256 index_) {\\n    // the index of the note is the next in the user's array\\n    index_ = notes[_user].length;\\n\\n    // the new note is pushed to the user's array\\n    notes[_user].push(\\n      Note({\\n        payout: karsha.balanceTo(_payout),\\n        created: uint48(block.timestamp),\\n        matured: _expiry,\\n        redeemed: 0,\\n        marketID: _marketID\\n      })\\n    );\\n  }\\n\\n/* ========== REDEEM ========== */\\n\\n  /**\\n   * @notice             redeem notes for user\\n   * @param _user        the user to redeem for\\n   * @param _indexes     the note indexes to redeem\\n   * @return payout_     sum of payout sent, in Karsha\\n   */\\n  function redeem(address _user, uint256[] memory _indexes) public override returns (uint256 payout_) {\\n    uint48 time = uint48(block.timestamp);\\n\\n    for (uint256 i = 0; i < _indexes.length; i++) {\\n      (uint256 pay, bool matured) = pendingFor(_user, _indexes[i]);\\n\\n      if (matured) {\\n        notes[_user][_indexes[i]].redeemed = time; // mark as redeemed\\n        payout_ += pay;\\n      }\\n    }\\n\\n    karsha.transfer(_user, payout_); // send payout as Karsha\\n  }\\n\\n  /**\\n   * @notice             redeem all redeemable markets for user\\n   * @dev                if possible, query indexesFor() off-chain and input in redeem() to save gas\\n   * @param _user        user to redeem all notes for\\n   * @return             sum of payout sent, in Karsha\\n   */ \\n  function redeemAll(address _user) external override returns (uint256) {\\n    return redeem(_user, indexesFor(_user));\\n  }\\n\\n/* ========== TRANSFER ========== */\\n\\n  /**\\n   * @notice             approve an address to transfer a note\\n   * @param _to          address to approve note transfer for\\n   * @param _index       index of note to approve transfer for\\n   */ \\n  function pushNote(address _to, uint256 _index) external override {\\n    require(notes[msg.sender][_index].created != 0, \\\"Depository: note not found\\\");\\n    noteTransfers[msg.sender][_index] = _to;\\n  }\\n\\n  /**\\n   * @notice             transfer a note that has been approved by an address\\n   * @param _from        the address that approved the note transfer\\n   * @param _index       the index of the note to transfer (in the sender's array)\\n   */ \\n  function pullNote(address _from, uint256 _index) external override returns (uint256 newIndex_) {\\n    require(noteTransfers[_from][_index] == msg.sender, \\\"Depository: transfer not found\\\");\\n    require(notes[_from][_index].redeemed == 0, \\\"Depository: note redeemed\\\");\\n\\n    newIndex_ = notes[msg.sender].length;\\n    notes[msg.sender].push(notes[_from][_index]);\\n\\n    delete notes[_from][_index];\\n  }\\n\\n/* ========== VIEW ========== */\\n\\n  // Note info\\n\\n  /**\\n   * @notice             all pending notes for user\\n   * @param _user        the user to query notes for\\n   * @return             the pending notes for the user\\n   */\\n  function indexesFor(address _user) public view override returns (uint256[] memory) {\\n    Note[] memory info = notes[_user];\\n\\n    uint256 length;\\n    for (uint256 i = 0; i < info.length; i++) {\\n        if (info[i].redeemed == 0 && info[i].payout != 0) length++;\\n    }\\n\\n    uint256[] memory indexes = new uint256[](length);\\n    uint256 position;\\n\\n    for (uint256 i = 0; i < info.length; i++) {\\n        if (info[i].redeemed == 0 && info[i].payout != 0) {\\n            indexes[position] = i;\\n            position++;\\n        }\\n    }\\n\\n    return indexes;\\n  }\\n\\n  /**\\n   * @notice             calculate amount available for claim for a single note\\n   * @param _user        the user that the note belongs to\\n   * @param _index       the index of the note in the user's array\\n   * @return payout_     the payout due, in Karsha\\n   * @return matured_    if the payout can be redeemed\\n   */\\n  function pendingFor(address _user, uint256 _index) public view override returns (uint256 payout_, bool matured_) {\\n    Note memory note = notes[_user][_index];\\n    payout_ = note.payout;\\n    matured_ = note.redeemed == 0 && note.matured <= block.timestamp && note.payout != 0;\\n  }\\n}\\n\",\"keccak256\":\"0x4401959a9d04feb41692aa3f6d56a0e25896df6037b2d93779b191b6bfb89208\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/IBondDepository.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IBondDepository {\\n\\n  // Info about each type of market\\n  struct Market {\\n    uint256 capacity; // capacity remaining\\n    IERC20 quoteToken; // token to accept as payment\\n    bool capacityInQuote; // capacity limit is in payment token (true) or in PANA (false, default)\\n    bool quoteTokenIsReserve; // quoteToken is a reserve asset/PANA LP pair (true) or not a reserve asset (false)\\n    uint256 totalDebt; // total debt from market\\n    uint256 maxPayout; // max tokens in/out (determined by capacityInQuote false/true, respectively)\\n    uint256 sold; // base tokens out\\n    uint256 purchased; // quote tokens in\\n  }\\n\\n  // Info for creating new markets\\n  struct Terms {\\n    bool fixedTerm; // fixed term or fixed expiration\\n    uint256 controlVariable; // scaling variable for price\\n    uint48 vesting; // length of time from deposit to maturity if fixed-term\\n    uint48 conclusion; // timestamp when market no longer offered (doubles as time when market matures if fixed-expiry)\\n    uint256 maxDebt; // 18 decimal debt maximum in PANA\\n  }\\n\\n  // Additional info about market.\\n  struct Metadata {\\n    uint48 lastTune; // last timestamp when control variable was tuned\\n    uint48 lastDecay; // last timestamp when market was created and debt was decayed\\n    uint48 length; // time from creation to conclusion. used as speed to decay debt.\\n    uint48 depositInterval; // target frequency of deposits\\n    uint48 tuneInterval; // frequency of tuning\\n    uint8 quoteDecimals; // decimals of quote token\\n    bool quoteIsLPToken; // quote token is liquidity pair token\\n  }\\n\\n  // Control variable adjustment data\\n  struct Adjustment {\\n    uint256 change;\\n    uint48 lastAdjustment;\\n    uint48 timeToAdjusted;\\n    bool active;\\n  }\\n\\n\\n  /**\\n   * @notice deposit market\\n   * @param _bid uint256\\n   * @param _amount uint256\\n   * @param _maxPrice uint256\\n   * @param _user address\\n   * @param _referral address\\n   * @return payout_ uint256\\n   * @return expiry_ uint256\\n   * @return index_ uint256\\n   */\\n  function deposit(\\n    uint256 _bid,\\n    uint256 _amount,\\n    uint256 _maxPrice,\\n    address _user,\\n    address _referral\\n  ) external returns (\\n    uint256 payout_, \\n    uint256 expiry_,\\n    uint256 index_\\n  );\\n\\n  function create (\\n    IERC20 _quoteToken, // token used to deposit\\n    uint256[3] memory _market, // [capacity, initial price]\\n    bool[4] memory _booleans, // [capacity in quote, quote is reserve, quote is LP, fixed term]\\n    uint256[2] memory _terms, // [vesting, conclusion]\\n    uint32[2] memory _intervals // [deposit interval, tune interval]\\n  ) external returns (uint256 id_);\\n  function close(uint256 _id) external;\\n\\n  function isLive(uint256 _bid) external view returns (bool);\\n  function liveMarkets() external view returns (uint256[] memory);\\n  function liveMarketsFor(address _quoteToken) external view returns (uint256[] memory);\\n  function payoutFor(uint256 _amount, uint256 _bid) external view returns (uint256);\\n  function marketPrice(uint256 _bid) external view returns (uint256);\\n  function currentDebt(uint256 _bid) external view returns (uint256);\\n  function debtRatio(uint256 _bid) external view returns (uint256);\\n  function debtDecay(uint256 _bid) external view returns (uint256);\\n}\",\"keccak256\":\"0x58702ec715a1f6d0bb864cd9869d2770f36105a36702fdc21aba0ef544e47386\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa142440b0e1c51ece24b6d074ac883b34e1f33a2472773eeaaf4871875904d09\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IERC20Metadata is IERC20 {\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\",\"keccak256\":\"0x6dfa58ba4a241b2201f3ecb3ba26345ce4dd66f0a553f18b2a284341f5aacd72\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IKarsha.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IKarsha is IERC20 {\\n  function mint(address _to, uint256 _amount) external;\\n\\n  function burn(address _from, uint256 _amount) external;\\n\\n  function index() external view returns (uint256);\\n  \\n  function balanceOfPANA(address _address) external view returns (uint256);\\n\\n  function balanceFrom(uint256 _amount) external view returns (uint256);\\n\\n  function balanceTo(uint256 _amount) external view returns (uint256);\\n\\n  function migrate( address _staking, address _sPana ) external;\\n\\n  function transfer(address _to,uint256 _amount) external override returns (bool);\\n  function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool);\\n}\\n\",\"keccak256\":\"0x5874fe68f485df39d4e8da989a3a2840ec140a7b37637ef202250c5c06b4d61a\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/INoteKeeper.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\ninterface INoteKeeper {\\n  // Info for market note\\n  struct Note {\\n    uint256 payout; // KARSHA remaining to be paid\\n    uint48 created; // time market was created\\n    uint48 matured; // timestamp when market is matured\\n    uint48 redeemed; // time market was redeemed\\n    uint48 marketID; // market ID of deposit. uint48 to avoid adding a slot.\\n  }\\n\\n  function redeem(address _user, uint256[] memory _indexes) external returns (uint256);\\n  function redeemAll(address _user) external returns (uint256);\\n  function pushNote(address to, uint256 index) external;\\n  function pullNote(address from, uint256 index) external returns (uint256 newIndex_);\\n\\n  function indexesFor(address _user) external view returns (uint256[] memory);\\n  function pendingFor(address _user, uint256 _index) external view returns (uint256 payout_, bool matured_);\\n}\",\"keccak256\":\"0x938ea165ff32eba4b4ca7725fb5711c8ab2c101c49d58323c0d6cce9c1bfffc7\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/IPanaAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IPanaAuthority {\\n    /* ========== EVENTS ========== */\\n    \\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event DistributionVaultPushed(address indexed from, address indexed to, bool _effectiveImmediately); \\n\\n    event GovernorPulled(address indexed from, address indexed to);\\n    event GuardianPulled(address indexed from, address indexed to);\\n    event PolicyPulled(address indexed from, address indexed to);\\n    event VaultPulled(address indexed from, address indexed to);\\n    event DistributionVaultPulled(address indexed from, address indexed to);\\n\\n    /* ========== VIEW ========== */\\n    \\n    function governor() external view returns (address);\\n    function guardian() external view returns (address);\\n    function policy() external view returns (address);\\n    function vault() external view returns (address);\\n    function distributionVault() external view returns (address);\\n}\",\"keccak256\":\"0xc49dc603c39b5cbd2e18e02176ef489bd89dde552495236e9798ae49a9f2e875\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IPriceOracle {\\n    function consult(address tokenIn, uint amountIn, address tokenOut) external view returns (uint amountOut);\\n}\",\"keccak256\":\"0x0b183ce5261f1410c2ddffc8c135fac1cacc8ed731ee69758609a6e43c68d130\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IStaking {\\n    function stake(\\n        address _to,\\n        uint256 _amount\\n    ) external returns (uint256);\\n\\n    function claim(address _recipient, bool _rebasing) external returns (uint256);\\n\\n    function forfeit() external returns (uint256);\\n\\n    function toggleLock() external;\\n\\n    function unstake(\\n        address _to,\\n        uint256 _amount,\\n        bool _trigger\\n    ) external returns (uint256);\\n\\n    function rebase() external;\\n\\n    function index() external view returns (uint256);\\n\\n    function setBondDepositor(address _bondDepositor) external;\\n\\n    function allowExternalStaking(bool allow) external;\\n}\\n\",\"keccak256\":\"0xc2f700affdcad1edabc2aa09c395e9b9d5efec373b073015c406b177fbf463b2\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface ITreasury {\\n    function deposit(\\n        uint256 _amount,\\n        address _token,\\n        uint256 _profit\\n    ) external returns (uint256);\\n\\n    function depositForRedemption(uint _amount, address _token) external returns (uint256 send_);\\n\\n    function withdraw(uint256 _amount, address _token) external;\\n\\n    function tokenValue(address _token, uint256 _amount) external view returns (uint256 value_);\\n\\n    function mint(address _recipient, uint256 _amount) external;\\n\\n    function manage(address _token, uint256 _amount) external;\\n\\n    function incurDebt(uint256 amount_, address token_) external;\\n\\n    function repayDebtWithReserve(uint256 amount_, address token_) external;\\n\\n    function excessReserves() external view returns (uint256);\\n\\n    function baseSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x870d605306b86169c8de0e16d6cb0030e9e732631aa0896c2dca798670f48fc0\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IUniswapV2ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IUniswapV2ERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\",\"keccak256\":\"0xa8bc04fe333cf795f2882098679f5026bccd6d10c173f94a6f7e9d5c064e9284\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IUniswapV2ERC20.sol\\\";\\n\\ninterface IUniswapV2Pair is IUniswapV2ERC20 {\\n    function token0() external pure returns (address);\\n    function token1() external pure returns (address);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function mint(address to) external returns (uint liquidity);\\n    function sync() external;\\n}\",\"keccak256\":\"0x0e0385d9326267b126aba359474a85dc44d8529d06e9b8841a99bfddecdd8d5e\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\n\\n/// @notice Safe IERC20 and ETH transfer library that safely handles missing return values.\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/TransferHelper.sol)\\n/// Taken from Solmate\\nlibrary SafeERC20 {\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.approve.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        (bool success, ) = to.call{value: amount}(new bytes(0));\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n}\",\"keccak256\":\"0xbdd4f99088de7c23383b043055646de013b1312166a9bfa05e3995cdcf7ae022\",\"license\":\"AGPL-3.0-only\"},\"contracts/treasury/FrontEndRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.10;\\n\\nimport \\\"../access/PanaAccessControlled.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\nabstract contract FrontEndRewarder is PanaAccessControlled {\\n\\n  /* ========= STATE VARIABLES ========== */\\n\\n  uint256 public daoReward; // % reward for dao (3 decimals: 100 = 1%)\\n  uint256 public refReward; // % reward for referrer (3 decimals: 100 = 1%)\\n  uint256 public treasuryReward; // % reward for Treasury (3 decimals: 100 = 1%)\\n  mapping(address => uint256) public rewards; // front end operator rewards\\n  mapping(address => bool) public whitelisted; // whitelisted status for operators\\n\\n  IERC20 internal immutable pana; // reward token\\n\\n  constructor(\\n    IPanaAuthority _authority, \\n    IERC20 _pana\\n  ) PanaAccessControlled(_authority) {\\n    pana = _pana;\\n  }\\n\\n  /* ========= EXTERNAL FUNCTIONS ========== */\\n\\n  // pay reward to front end operator\\n  function getReward() external {\\n    uint256 reward = rewards[msg.sender];\\n\\n    rewards[msg.sender] = 0;\\n    pana.transfer(msg.sender, reward);\\n  }\\n\\n  /* ========= INTERNAL ========== */\\n\\n  /** \\n   * @notice adds rewards amount for front end operators and DAO based on _payout\\n   */\\n  function giveRewards(\\n    uint256 _payout,\\n    address _referral,\\n    uint256 _rewardLimit\\n  ) internal returns (uint256 toRef, uint256 toDAO, uint256 toTreasury) {\\n    // first we calculate rewards paid to the DAO, Treasury and to the front end operator (referrer)\\n    toDAO = _payout * daoReward / 1e4;\\n    toRef = _payout * refReward / 1e4;\\n    toTreasury = _payout * treasuryReward / 1e4;\\n\\n    // adjust rewards if we exceed limits\\n    if ((toDAO + toRef + toTreasury) > _rewardLimit) {\\n      if (toRef >= _rewardLimit) {\\n        toRef = _rewardLimit;\\n        toTreasury = 0;\\n        toDAO = 0;\\n      } else {\\n        _rewardLimit = _rewardLimit - toRef;\\n        if ((toDAO + toTreasury) > _rewardLimit) {\\n          toTreasury = toTreasury > _rewardLimit ? _rewardLimit : toTreasury;\\n          toDAO = _rewardLimit > toTreasury ? _rewardLimit - toTreasury : 0;\\n        }\\n      }\\n    }\\n\\n    // and store them in our rewards mapping\\n    if (whitelisted[_referral]) {\\n      rewards[_referral] += toRef;\\n      rewards[authority.guardian()] += toDAO;\\n      rewards[authority.vault()] += toTreasury;\\n    } else { // the Treasury receives both rewards if referrer is not whitelisted\\n      rewards[authority.guardian()] += toDAO;\\n      rewards[authority.vault()] += toTreasury + toRef;\\n    }\\n  }\\n\\n  /**\\n   * @notice Send rewards to treasury which was minted as per giveRewards logic\\n   */\\n  function sendRewardsToTreasury(uint256 _toTreasury) internal {\\n    uint256 reward = rewards[authority.vault()];\\n\\n    if (reward > 0 && reward >= _toTreasury) {\\n      rewards[authority.vault()] -= _toTreasury;\\n      pana.transfer(authority.vault(), _toTreasury);\\n    }\\n  }\\n\\n  /**\\n   * @notice set rewards for front end operators and DAO\\n   */\\n  function setRewards(uint256 _toFrontEnd, uint256 _toDAO, uint256 _toTreasury) external onlyGovernor {\\n    refReward = _toFrontEnd;\\n    daoReward = _toDAO;\\n    treasuryReward = _toTreasury;\\n  }\\n\\n  /**\\n   * @notice add or remove addresses from the reward whitelist\\n   */\\n  function whitelist(address _operator) external onlyPolicy {\\n    whitelisted[_operator] = !whitelisted[_operator];\\n  }\\n\\n  /**\\n   * @notice Manually fetch remaining rewards for Treasury\\n   */\\n  function getTreasuryRewards() external onlyGovernor {\\n    uint256 reward = rewards[authority.vault()];\\n\\n    if (reward > 0) {\\n      rewards[authority.vault()] = 0;\\n      pana.transfer(authority.vault(), reward);\\n    }\\n  }\\n}\",\"keccak256\":\"0x3e0b2fc4c986c4d96c0b9c2fe704a10a9d04e76f15d02ad06b35f52f3879e3d8\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x610120604052600c60e08190526b15539055551213d49256915160a21b6101009081526200003191600091906200017b565b503480156200003f57600080fd5b50604051620056dc380380620056dc83398101604081905262000062916200023a565b600180546001600160a01b0319166001600160a01b038716908117909155604051869186918691869186918691869183917f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a2506001600160a01b0390811660805293841660a0525090821660c052600980546001600160a01b03191691831691909117905560405163095ea7b360e01b81528582166004820152722cd76fe086b93ce2f768a00b22a000000000006024820152908716925063095ea7b391506044016020604051808303816000875af115801562000149573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200016f9190620002ba565b50505050505062000322565b8280546200018990620002e5565b90600052602060002090601f016020900481019282620001ad5760008555620001f8565b82601f10620001c857805160ff1916838001178555620001f8565b82800160010185558215620001f8579182015b82811115620001f8578251825591602001919060010190620001db565b50620002069291506200020a565b5090565b5b808211156200020657600081556001016200020b565b6001600160a01b03811681146200023757600080fd5b50565b600080600080600060a086880312156200025357600080fd5b8551620002608162000221565b6020870151909550620002738162000221565b6040870151909450620002868162000221565b6060870151909350620002998162000221565b6080870151909250620002ac8162000221565b809150509295509295909350565b600060208284031215620002cd57600080fd5b81518015158114620002de57600080fd5b9392505050565b600181811c90821680620002fa57607f821691505b602082108114156200031c57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05161533d6200039f60003960008181611f270152613b34015260008181611c4701528181611cc601528181611eed01528181612df90152613bf50152600081816109e50152818161115501528181611c0c01528181611c8b01528181611fe3015281816125c301526149d5015261533d6000f3fe608060405234801561001057600080fd5b50600436106102ad5760003560e01c8063a42206101161017b578063c9b67af5116100d8578063e3684e391161008c578063f1b7dc7811610071578063f1b7dc7814610719578063f3191a461461072c578063f36d1e4e1461073557600080fd5b8063e3684e39146106a7578063e481b2651461070657600080fd5b8063d6db4df8116100bd578063d6db4df814610629578063d936547e1461063c578063e0b117ff1461065f57600080fd5b8063c9b67af51461060e578063d2390aa21461061657600080fd5b8063be399be51161012f578063c0680e2011610114578063c0680e201461058b578063c0aa0e8a1461059e578063c3e0fb1c146105e657600080fd5b8063be399be514610565578063bf7e214f1461057857600080fd5b8063b1283e7711610160578063b1283e771461047e578063bc3b2b12146104da578063bcb296671461055257600080fd5b8063a422061014610458578063abbf4b171461046b57600080fd5b80634889bf6d116102295780637c770aae116101dd5780639b19251a116101c25780639b19251a146104355780639c76978714610448578063a2594ea91461045057600080fd5b80637c770aae146103f457806384a07dcb1461042257600080fd5b8063649144391161020e57806364914439146103ae5780636a6c575d146103ce5780637a9e5e4b146103e157600080fd5b80634889bf6d14610388578063530e784f1461039b57600080fd5b80631def0708116102805780632750745811610265578063275074581461034a5780633adec5a71461036d5780633d18b9121461038057600080fd5b80631def0708146103165780632630c12f1461031f57600080fd5b80630700037d146102b25780630a9d85eb146102e55780630aebeb4e146102f85780631885f5801461030d575b600080fd5b6102d26102c0366004614ad5565b60056020526000908152604090205481565b6040519081526020015b60405180910390f35b6102d26102f3366004614af2565b610748565b61030b610306366004614af2565b61078f565b005b6102d260025481565b6102d260045481565b600a54610332906001600160a01b031681565b6040516001600160a01b0390911681526020016102dc565b61035d610358366004614af2565b6108de565b60405190151581526020016102dc565b6102d261037b366004614af2565b61094f565b61030b6109ab565b6102d2610396366004614cb0565b610a57565b61030b6103a9366004614ad5565b6111c5565b6103c16103bc366004614ad5565b611293565b6040516102dc9190614d72565b6102d26103dc366004614db6565b611422565b61030b6103ef366004614ad5565b611509565b610407610402366004614dd8565b6115ff565b604080519384526020840192909252908201526060016102dc565b6102d2610430366004614af2565b611970565b61030b610443366004614ad5565b61206c565b61030b612141565b61030b6123d5565b6102d2610466366004614e2e565b61269d565b6102d2610479366004614af2565b612930565b61049161048c366004614af2565b612a13565b604080519889526001600160a01b039097166020890152941515958701959095529115156060860152608085015260a084015260c083019190915260e0820152610100016102dc565b6105216104e8366004614af2565b600e602052600090815260409020805460019091015465ffffffffffff80821691600160301b810490911690600160601b900460ff1684565b6040516102dc949392919093845265ffffffffffff9283166020850152911660408301521515606082015260800190565b6102d2610560366004614af2565b612a76565b6102d2610573366004614ad5565b612ab0565b600154610332906001600160a01b031681565b6102d2610599366004614e2e565b612abf565b6105b16105ac366004614af2565b612af0565b604080519515158652602086019490945265ffffffffffff92831693850193909352166060830152608082015260a0016102dc565b6105f96105f4366004614e2e565b612b42565b604080519283529015156020830152016102dc565b6103c1612c0d565b6102d2610624366004614e5a565b612cf6565b61030b610637366004614e2e565b612e6e565b61035d61064a366004614ad5565b60066020526000908152604090205460ff1681565b61067261066d366004614e2e565b612f30565b6040805195865265ffffffffffff9485166020870152928416928501929092528216606084015216608082015260a0016102dc565b6106ba6106b5366004614af2565b612f93565b6040805165ffffffffffff98891681529688166020880152948716948601949094529185166060850152909316608083015260ff90921660a082015290151560c082015260e0016102dc565b6103c1610714366004614ad5565b612ffb565b6102d2610727366004614af2565b613220565b6102d260035481565b61030b610743366004614f15565b6132cb565b60008061075483613385565b5050905080600c848154811061076c5761076c614f41565b9060005260206000209060040201600101546107889190614f6d565b9392505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108069190614f84565b6001600160a01b0316336001600160a01b0316146000906108435760405162461bcd60e51b815260040161083a9190614fa1565b60405180910390fd5b5042600c828154811061085857610858614f41565b906000526020600020906004020160020160066101000a81548165ffffffffffff021916908365ffffffffffff1602179055506000600b82815481106108a0576108a0614f41565b6000918252602082206006909102019190915560405182917f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe591a250565b6000600b82815481106108f3576108f3614f41565b906000526020600020906006020160000154600014158015610949575042600c838154811061092457610924614f41565b6000918252602090912060049091020160020154600160301b900465ffffffffffff16115b92915050565b6000600d828154811061096457610964614f41565b60009182526020909120015461098590600160f01b900460ff16600a61512d565b61098e83613220565b61099784610748565b6109a1919061513c565b610949919061515b565b3360008181526005602052604080822080549290555163a9059cbb60e01b8152600481019290925260248201819052906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044015b6020604051808303816000875af1158015610a2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a53919061517d565b5050565b60015460408051630505c8c960e01b815290516000926001600160a01b031691630505c8c99160048083019260209291908290030181865afa158015610aa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac59190614f84565b6001600160a01b0316336001600160a01b031614600090610af95760405162461bcd60e51b815260040161083a9190614fa1565b506020830151600090610b0d904290614f6d565b90506000876001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b73919061519a565b60ff169050600086816020020151610b8c578751610bcb565b610b9782600a6151bd565b60208901518951610bb7906ec097ce7bc90715b34b9f100000000061513c565b610bc1919061515b565b610bcb919061515b565b85519091506000908490610be59063ffffffff168461513c565b610bef919061515b565b90506000620186a08a60026020020151610c09908561513c565b610c13919061515b565b610c1d90846151c9565b9050600083600960009054906101000a90046001600160a01b03166001600160a01b031663860f50486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9991906151e1565b60208d0151610ca8919061513c565b610cb2919061515b565b600b805460408051610100810190915290995091925090808d6000602002015181526020018e6001600160a01b031681526020018c600060048110610cf957610cf9614f41565b6020020151151581526020018c600160048110610d1857610d18614f41565b6020908102919091015115158252818101889052604080830188905260006060808501829052608094850182905286546001808201895597835291849020865160069093020191825585840151828801805488860151898501511515600160a81b027fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff911515600160a01b027fffffffffffffffffffffff0000000000000000000000000000000000000000009093166001600160a01b0390951694909417919091171691909117905593850151600282015560a080860151600383015560c0860151600483015560e090950151600590910155805193840181528e830151151584529083018590528c5165ffffffffffff1690830152600c92908201908c906020908102919091015165ffffffffffff90811683529181018690528354600180820186556000958652948290208451600490920201805491151560ff199092169190911781558382015194810194909455604080840151600280870180546060808901518816600160301b026bffffffffffffffffffffffff1990921694881694909417179055608095860151600390970196909655815160e08101835242851680825281850152938c16918401919091528c5163ffffffff90811691840191909152908c0151169181019190915260ff871660a0820152600d9160c08201908d90602002015115158152509080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548165ffffffffffff021916908365ffffffffffff16021790555060208201518160000160066101000a81548165ffffffffffff021916908365ffffffffffff160217905550604082015181600001600c6101000a81548165ffffffffffff021916908365ffffffffffff16021790555060608201518160000160126101000a81548165ffffffffffff021916908365ffffffffffff16021790555060808201518160000160186101000a81548165ffffffffffff021916908365ffffffffffff16021790555060a082015181600001601e6101000a81548160ff021916908360ff16021790555060c082015181600001601f6101000a81548160ff0219169083151502179055505050600f60008d6001600160a01b03166001600160a01b03168152602001908152602001600020879080600181540180825580915050600190039060005260206000200160009091909190915055896001600481106110c3576110c3614f41565b6020020151156111475760095460405163095ea7b360e01b81526001600160a01b0391821660048201526000196024820152908d169063095ea7b3906044016020604051808303816000875af1158015611121573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611145919061517d565b505b6001600160a01b03808d16907f000000000000000000000000000000000000000000000000000000000000000016887f2f6ff727bd580b1d1b8332e28aa93ed4ec9d8b08d6e30d6b4c9f7aa63ca17f638e600160200201516040516111ae91815260200190565b60405180910390a450505050505095945050505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611218573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123c9190614f84565b6001600160a01b0316336001600160a01b0316146000906112705760405162461bcd60e51b815260040161083a9190614fa1565b50600a80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381166000908152600f602090815260408083208054825181850281018501909352808352606094938301828280156112f257602002820191906000526020600020905b8154815260200190600101908083116112de575b50505050509050600080600090505b82518110156113515761132c83828151811061131f5761131f614f41565b60200260200101516108de565b1561133f578161133b816151fa565b9250505b80611349816151fa565b915050611301565b5060008167ffffffffffffffff81111561136d5761136d614b0b565b604051908082528060200260200182016040528015611396578160200160208202803683370190505b5090506000805b8451811015611417576113bb85828151811061131f5761131f614f41565b15611405578481815181106113d2576113d2614f41565b60200260200101518383815181106113ec576113ec614f41565b602090810291909101015281611401816151fa565b9250505b8061140f816151fa565b91505061139d565b509095945050505050565b600080600d838154811061143857611438614f41565b60009182526020918290206040805160e081018252919092015465ffffffffffff8082168352600160301b8204811694830194909452600160601b8104841692820192909252600160901b820483166060820152600160c01b8204909216608083015260ff600160f01b8204811660a08401819052600160f81b90920416151560c08301529091506114cb90600a61512d565b6114d48461094f565b6114ed866ec097ce7bc90715b34b9f100000000061513c565b6114f7919061515b565b611501919061515b565b949350505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa15801561155c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115809190614f84565b6001600160a01b0316336001600160a01b0316146000906115b45760405162461bcd60e51b815260040161083a9190614fa1565b50600180546001600160a01b0319166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b600080600080600b898154811061161857611618614f41565b906000526020600020906006020190506000600c8a8154811061163d5761163d614f41565b60009182526020918290206040805160a0810182526004909302909101805460ff1615158352600181015493830193909352600283015465ffffffffffff80821692840192909252600160301b900481166060830181905260039093015460808301529092504291908216106116f55760405162461bcd60e51b815260206004820152601c60248201527f4465706f7369746f72793a206d61726b657420636f6e636c7564656400000000604482015260640161083a565b6116ff8b82613467565b600061170a8c613623565b90508981111561175c5760405162461bcd60e51b815260206004820152601f60248201527f4465706f7369746f72793a206d6f7265207468616e206d617820707269636500604482015260640161083a565b600d8c8154811061176f5761176f614f41565b60009182526020909120015461179090600160f01b900460ff16600a61512d565b816117aa8d6ec097ce7bc90715b34b9f100000000061513c565b6117b4919061515b565b6117be919061515b565b965083600301548711156118145760405162461bcd60e51b815260206004820152601d60248201527f4465706f7369746f72793a206d61782073697a65206578636565646564000000604482015260640161083a565b6001840154600160a01b900460ff1661182d578661182f565b8a5b8460000160008282546118429190614f6d565b90915550508251611857578260400151611867565b8183604001516118679190615215565b65ffffffffffff1695508a84600501600082825461188591906151c9565b92505081905550868460040160008282546118a091906151c9565b92505081905550868460020160008282546118bb91906151c9565b9091555050604080518c8152602081018390528d917f7880508a48fd3aee88f7e15917d85e39c3ad059e51ad4aca9bb46e7b4938b961910160405180910390a2506119088b8b888a613819565b6119148887878e613bb4565b93508260020154826080015110156119585760008084556040518c917f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe591a2611962565b6119628b82613d3a565b505050955095509592505050565b600080600b838154811061198657611986614f41565b60009182526020808320604080516101008101825260069094029091018054845260018101546001600160a01b0381169385019390935260ff600160a01b84048116151592850192909252600160a81b909204161515606083015260028101546080830152600381015460a0830152600481015460c08301526005015460e0820152600d80549193509085908110611a2057611a20614f41565b60009182526020918290206040805160e081018252919092015465ffffffffffff8082168352600160301b8204811694830194909452600160601b8104841692820192909252600160901b820483166060820152600160c01b8204909216608083015260ff600160f01b8204811660a0840152600160f81b9091041615801560c0830152909150611fc4576000826020015190506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015611af4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b189190614f84565b90506000826001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7e9190614f84565b9050600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015611bc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be59190615262565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b03161480611c7b57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316145b15611c895791929190611d46565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161480611cfa57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316145b611d465760405162461bcd60e51b815260206004820152600c60248201527f496e76616c696420706169720000000000000000000000000000000000000000604482015260640161083a565b6000846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611daa919061519a565b600a54604051632321bc7960e21b81526001600160a01b038881166004830152670de0b6b3a76400006024830152878116604483015260ff93909316935060009290911690638c86f1e490606401602060405180830381865afa158015611e15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3991906151e1565b90506000611e4883600a6151bd565b611e52838761513c565b611e5c919061515b565b611e6690856151c9565b9050600081896001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ea9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ecd91906151e1565b611edf90670de0b6b3a764000061513c565b611ee9919061515b565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316876001600160a01b03161415611fb4577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632986c0e56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa791906151e1565b611fb1908261515b565b90505b9c9b505050505050505050505050565b600a546020830151604051632321bc7960e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152670de0b6b3a764000060248301529182166044820152911690638c86f1e490606401602060405180830381865afa158015612048573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150191906151e1565b600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156120bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120e39190614f84565b6001600160a01b0316336001600160a01b0316146000906121175760405162461bcd60e51b815260040161083a9190614fa1565b506001600160a01b03166000908152600660205260409020805460ff19811660ff90911615179055565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015612194573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b89190614f84565b6001600160a01b0316336001600160a01b0316148061225e5750600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015612225573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122499190614f84565b6001600160a01b0316336001600160a01b0316145b806122f05750600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122db9190614f84565b6001600160a01b0316336001600160a01b0316145b61233c5760405162461bcd60e51b815260206004820152600f60248201527f4f6e6c7920617574686f72697a65640000000000000000000000000000000000604482015260640161083a565b600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561238f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123b39190614f84565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015612428573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244c9190614f84565b6001600160a01b0316336001600160a01b0316146000906124805760405162461bcd60e51b815260040161083a9190614fa1565b50600060056000600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124fe9190614f84565b6001600160a01b031681526020810191909152604001600020549050801561269a57600060056000600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612579573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259d9190614f84565b6001600160a01b03166001600160a01b03168152602001908152602001600020819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612643573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126679190614f84565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401610a10565b50565b6001600160a01b03828116600090815260086020908152604080832085845290915281205490911633146127135760405162461bcd60e51b815260206004820152601e60248201527f4465706f7369746f72793a207472616e73666572206e6f7420666f756e640000604482015260640161083a565b6001600160a01b038316600090815260076020526040902080548390811061273d5761273d614f41565b6000918252602090912060029091020160010154600160601b900465ffffffffffff16156127ad5760405162461bcd60e51b815260206004820152601960248201527f4465706f7369746f72793a206e6f74652072656465656d656400000000000000604482015260640161083a565b503360009081526007602052604080822080546001600160a01b0386168452919092208054919291849081106127e5576127e5614f41565b600091825260208083208454600181810187559585528285206002948502909201805491909402909101908155918401805492909401805465ffffffffffff19811665ffffffffffff94851690811783558654600160301b908190048616026bffffffffffffffffffffffff1990921617178082558554600160601b9081900485160271ffffffffffff000000000000000000000000198216811783559554600160901b9081900490941690930265ffffffffffff60901b1990951677ffffffffffffffffffffffff00000000000000000000000019909316929092179390931790556001600160a01b03851681526007909152604090208054839081106128ef576128ef614f41565b60009182526020822060029091020190815560010180547fffffffffffffffff00000000000000000000000000000000000000000000000016905592915050565b600080600d838154811061294657612946614f41565b600091825260208083206040805160e081018252939091015465ffffffffffff8082168552600160301b82048116938501849052600160601b8204811692850192909252600160901b810482166060850152600160c01b8104909116608084015260ff600160f01b8204811660a0850152600160f81b90910416151560c08301529092506129d49042614f6d565b9050816040015165ffffffffffff1681600b86815481106129f7576129f7614f41565b9060005260206000209060060201600201546114f7919061513c565b600b8181548110612a2357600080fd5b60009182526020909120600690910201805460018201546002830154600384015460048501546005909501549395506001600160a01b0383169460ff600160a01b8504811695600160a81b909504169388565b6000612a8182612930565b600b8381548110612a9457612a94614f41565b9060005260206000209060060201600201546109499190614f6d565b60006109498261062484612ffb565b600f6020528160005260406000208181548110612adb57600080fd5b90600052602060002001600091509150505481565b600c8181548110612b0057600080fd5b6000918252602090912060049091020180546001820154600283015460039093015460ff90921693509165ffffffffffff80821692600160301b909204169085565b6001600160a01b038216600090815260076020526040812080548291829185908110612b7057612b70614f41565b60009182526020918290206040805160a0810182526002909302909101805480845260019091015465ffffffffffff80821695850195909552600160301b8104851692840192909252600160601b8204841660608401819052600160901b90920490931660808301529194509150158015612bf7575042816040015165ffffffffffff1611155b8015612c035750805115155b9150509250929050565b60606000805b600b54811015612c4b57612c26816108de565b15612c395781612c35816151fa565b9250505b80612c43816151fa565b915050612c13565b5060008167ffffffffffffffff811115612c6757612c67614b0b565b604051908082528060200260200182016040528015612c90578160200160208202803683370190505b5090506000805b600b54811015612ced57612caa816108de565b15612cdb5780838381518110612cc257612cc2614f41565b602090810291909101015281612cd7816151fa565b9250505b80612ce5816151fa565b915050612c97565b50909392505050565b600042815b8351811015612dd257600080612d2a87878581518110612d1d57612d1d614f41565b6020026020010151612b42565b915091508015612dbd576001600160a01b03871660009081526007602052604090208651859190889086908110612d6357612d63614f41565b602002602001015181548110612d7b57612d7b614f41565b9060005260206000209060020201600101600c6101000a81548165ffffffffffff021916908365ffffffffffff1602179055508185612dba91906151c9565b94505b50508080612dca906151fa565b915050612cfb565b5060405163a9059cbb60e01b81526001600160a01b038581166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015612e42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e66919061517d565b505092915050565b336000908152600760205260409020805482908110612e8f57612e8f614f41565b600091825260209091206001600290920201015465ffffffffffff16612ef75760405162461bcd60e51b815260206004820152601a60248201527f4465706f7369746f72793a206e6f7465206e6f7420666f756e64000000000000604482015260640161083a565b3360009081526008602090815260408083209383529290522080546001600160a01b0319166001600160a01b0392909216919091179055565b60076020528160005260406000208181548110612f4c57600080fd5b60009182526020909120600290910201805460019091015490925065ffffffffffff8082169250600160301b8204811691600160601b8104821691600160901b9091041685565b600d8181548110612fa357600080fd5b60009182526020909120015465ffffffffffff8082169250600160301b8204811691600160601b8104821691600160901b8204811691600160c01b81049091169060ff600160f01b8204811691600160f81b90041687565b6001600160a01b0381166000908152600760209081526040808320805482518185028101850190935280835260609493849084015b828210156130a65760008481526020908190206040805160a081018252600286029092018054835260019081015465ffffffffffff80821685870152600160301b8204811693850193909352600160601b810483166060850152600160901b900490911660808301529083529092019101613030565b505050509050600080600090505b8251811015613135578281815181106130cf576130cf614f41565b60200260200101516060015165ffffffffffff16600014801561311057508281815181106130ff576130ff614f41565b602002602001015160000151600014155b15613123578161311f816151fa565b9250505b8061312d816151fa565b9150506130b4565b5060008167ffffffffffffffff81111561315157613151614b0b565b60405190808252806020026020018201604052801561317a578160200160208202803683370190505b5090506000805b84518110156114175784818151811061319c5761319c614f41565b60200260200101516060015165ffffffffffff1660001480156131dd57508481815181106131cc576131cc614f41565b602002602001015160000151600014155b1561320e57808383815181106131f5576131f5614f41565b60209081029190910101528161320a816151fa565b9250505b80613218816151fa565b915050613181565b600954604080516310c1ea0960e31b815290516000926001600160a01b03169163860f50489160048083019260209291908290030181865afa15801561326a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061328e91906151e1565b600d83815481106132a1576132a1614f41565b6000918252602090912001546132c290600160f01b900460ff16600a61512d565b61099784612a76565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa15801561331e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133429190614f84565b6001600160a01b0316336001600160a01b0316146000906133765760405162461bcd60e51b815260040161083a9190614fa1565b50600392909255600255600455565b6000818152600e6020908152604080832081516080810183528154815260019091015465ffffffffffff80821694830194909452600160301b810490931691810191909152600160601b90910460ff16151560608201819052829182916133f757600080600093509350935050613460565b602081015161340690426152a9565b9250806040015165ffffffffffff168365ffffffffffff161091508161342d57805161345c565b806040015165ffffffffffff168365ffffffffffff168260000151613452919061513c565b61345c919061515b565b9350505b9193909250565b61347082612930565b600b838154811061348357613483614f41565b906000526020600020906006020160020160008282546134a39190614f6d565b9250508190555080600d83815481106134be576134be614f41565b60009182526020808320909101805465ffffffffffff94909416600160301b026bffffffffffff0000000000001990941693909317909255838152600e909152604090206001015460ff600160601b9091041615610a53576000828152600e6020526040812090808061353086613385565b92509250925082600c878154811061354a5761354a614f41565b9060005260206000209060040201600101600082825461356a9190614f6d565b9091555050801561360257828460000160008282546135899190614f6d565b90915550506001840180548391906006906135b4908490600160301b900465ffffffffffff166152a9565b92506101000a81548165ffffffffffff021916908365ffffffffffff160217905550848460010160006101000a81548165ffffffffffff021916908365ffffffffffff16021790555061361b565b6001840180546cff000000000000000000000000191690555b505050505050565b600080600d838154811061363957613639614f41565b60009182526020909120015461365a90600160f01b900460ff16600a61512d565b6136638461424f565b600c858154811061367657613676614f41565b906000526020600020906004020160010154613692919061513c565b61369c919061515b565b600a549091506001600160a01b0316156136cb5760006136bb84611970565b9050818110156136c9578091505b505b600954600b80546000926001600160a01b03169163f182178391879081106136f5576136f5614f41565b906000526020600020906006020160010160009054906101000a90046001600160a01b0316600d878154811061372d5761372d614f41565b60009182526020909120015461374e90600160f01b900460ff16600a61512d565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381865afa158015613797573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137bb91906151e1565b600d85815481106137ce576137ce614f41565b6000918252602090912001546137ef90600160f01b900460ff1660126152d0565b6137fa90600a61512d565b613804919061515b565b905080821015613812578091505b5092915050565b6000600b858154811061382e5761382e614f41565b60009182526020808320604080516101008101825260069094029091018054845260018101546001600160a01b0381169385019390935260ff600160a01b84048116151592850192909252600160a81b90920416158015606084015260028201546080840152600382015460a0840152600482015460c084015260059091015460e083015290925081908190613a425760208401516138d8906001600160a01b031633308a614320565b600954602085015160405163f182178360e01b81526001600160a01b039182166004820152602481018a9052600092919091169063f182178390604401602060405180830381865afa158015613932573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061395691906151e1565b90508681111561397c57613974878761396f8285614f6d565b614451565b955090935091505b6000848361398a868b6151c9565b61399491906151c9565b61399e91906151c9565b90506000818311156139b7576139b48284614f6d565b90505b600954602088015160405163bc157ac160e01b8152600481018d90526001600160a01b0391821660248201526044810184905291169063bc157ac1906064016020604051808303816000875af1158015613a15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a3991906151e1565b50505050613b09565b6009546020850151613a63916001600160a01b03918216913391168a614320565b613a708686600019614451565b60095490955091935091506001600160a01b03166340c10f19308584613a96878c6151c9565b613aa091906151c9565b613aaa91906151c9565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015613af057600080fd5b505af1158015613b04573d6000803e3d6000fd5b505050505b8215613b1857613b1883614853565b6040516356e4bb9760e11b8152306004820152602481018790527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063adc9772e906044016020604051808303816000875af1158015613b85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ba991906151e1565b505050505050505050565b6001600160a01b03848116600090815260076020526040908190208054825160a08101938490526319a948db60e21b90935260a483018790529290919081907f0000000000000000000000000000000000000000000000000000000000000000166366a5236c60c48301602060405180830381865afa158015613c3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c5f91906151e1565b815265ffffffffffff4281166020808401919091529681166040808401919091526000606080850182905297831660809485015285546001818101885596825290899020855160029092020190815597840151979094018054948401519684015193909201518116600160901b0265ffffffffffff60901b19938216600160601b029390931677ffffffffffffffffffffffff00000000000000000000000019968216600160301b026bffffffffffffffffffffffff1990951697909116969096179290921793909316939093179190911790915592915050565b6000600d8381548110613d4f57613d4f614f41565b60009182526020918290206040805160e081018252919092015465ffffffffffff808216808452600160301b8304821695840195909552600160601b8204811693830193909352600160901b810483166060830152600160c01b81049092166080820181905260ff600160f01b8404811660a0840152600160f81b909304909216151560c08201529250613de291615215565b65ffffffffffff168265ffffffffffff161061424a576000600b8481548110613e0d57613e0d614f41565b60009182526020808320604080516101008101825260069094029091018054845260018101546001600160a01b0381169385019390935260ff600160a01b84048116151592850192909252600160a81b909204161515606083015260028101546080830152600381015460a0830152600481015460c08301526005015460e0820152600c8054919350859187908110613ea857613ea8614f41565b906000526020600020906004020160020160069054906101000a900465ffffffffffff16613ed691906152a9565b65ffffffffffff1690506000613eeb86613623565b905060008360400151613eff578351613f40565b60a0850151613f0f90600a61512d565b84518390613f2c906ec097ce7bc90715b34b9f100000000061513c565b613f36919061515b565b613f40919061515b565b905082856060015165ffffffffffff1682613f5b919061513c565b613f65919061515b565b600b8881548110613f7857613f78614f41565b906000526020600020906006020160030181905550600083866040015165ffffffffffff1683613fa8919061513c565b613fb2919061515b565b9050600081600960009054906101000a90046001600160a01b03166001600160a01b031663860f50486040518163ffffffff1660e01b8152600401602060405180830381865afa15801561400a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061402e91906151e1565b614038908661513c565b614042919061515b565b9050887f78f9c01d72705dba80d6ce051d36a1f987bf2a3800fee938c111a2ae741e57d1600c8b8154811061407957614079614f41565b906000526020600020906004020160010154836040516140a3929190918252602082015260400190565b60405180910390a2600c89815481106140be576140be614f41565b90600052602060002090600402016001015481106141045780600c8a815481106140ea576140ea614f41565b906000526020600020906004020160010181905550614208565b600081600c8b8154811061411a5761411a614f41565b9060005260206000209060040201600101546141369190614f6d565b905060405180608001604052808281526020018a65ffffffffffff168152602001896080015165ffffffffffff16815260200160011515815250600e60008c81526020019081526020016000206000820151816000015560208201518160010160006101000a81548165ffffffffffff021916908365ffffffffffff16021790555060408201518160010160066101000a81548165ffffffffffff021916908365ffffffffffff160217905550606082015181600101600c6101000a81548160ff021916908315150217905550905050505b87600d8a8154811061421c5761421c614f41565b6000918252602090912001805465ffffffffffff191665ffffffffffff929092169190911790555050505050505b505050565b600954604080516310c1ea0960e31b815290516000926001600160a01b03169163860f50489160048083019260209291908290030181865afa158015614299573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142bd91906151e1565b600d83815481106142d0576142d0614f41565b6000918252602090912001546142f190600160f01b900460ff16600a61512d565b600b848154811061430457614304614f41565b9060005260206000209060060201600201546109a1919061513c565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b179052915160009283929088169161439991906152f5565b6000604051808303816000865af19150503d80600081146143d6576040519150601f19603f3d011682016040523d82523d6000602084013e6143db565b606091505b5091509150818015614405575080511580614405575080806020019051810190614405919061517d565b61361b5760405162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c4544000000000000000000000000604482015260640161083a565b600080600061271060025487614467919061513c565b614471919061515b565b915061271060035487614484919061513c565b61448e919061515b565b9250612710600454876144a1919061513c565b6144ab919061515b565b905083816144b985856151c9565b6144c391906151c9565b1115614527578383106144de57508291506000905080614527565b6144e88385614f6d565b9350836144f582846151c9565b111561452757838111614508578061450a565b835b905080841161451a576000614524565b6145248185614f6d565b91505b6001600160a01b03851660009081526006602052604090205460ff16156146df576001600160a01b038516600090815260056020526040812080548592906145709084906151c9565b925050819055508160056000600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa1580156145cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145f39190614f84565b6001600160a01b03166001600160a01b03168152602001908152602001600020600082825461462291906151c9565b925050819055508060056000600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614681573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146a59190614f84565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546146d491906151c9565b9091555061484a9050565b8160056000600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015614737573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061475b9190614f84565b6001600160a01b03166001600160a01b03168152602001908152602001600020600082825461478a91906151c9565b9091555061479a905083826151c9565b60056000600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156147f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148159190614f84565b6001600160a01b03166001600160a01b03168152602001908152602001600020600082825461484491906151c9565b90915550505b93509350939050565b600060056000600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156148ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148d09190614f84565b6001600160a01b03166001600160a01b031681526020019081526020016000205490506000811180156149035750818110155b15610a53578160056000600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614960573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149849190614f84565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546149b39190614f6d565b90915550506001546040805163fbfa77cf60e01b815290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169363a9059cbb9391169163fbfa77cf916004808201926020929091908290030181865afa158015614a2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a4f9190614f84565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018590526044016020604051808303816000875af1158015614a9c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061424a919061517d565b6001600160a01b038116811461269a57600080fd5b600060208284031215614ae757600080fd5b813561078881614ac0565b600060208284031215614b0457600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715614b4457614b44614b0b565b60405290565b6040516080810167ffffffffffffffff81118282101715614b4457614b44614b0b565b604051601f8201601f1916810167ffffffffffffffff81118282101715614b9657614b96614b0b565b604052919050565b60006040516060810181811067ffffffffffffffff82111715614bc357614bc3614b0b565b6040529050806060830184811115614bda57600080fd5b835b81811015614bf4578035835260209283019201614bdc565b50505092915050565b801515811461269a57600080fd5b600082601f830112614c1c57600080fd5b614c24614b21565b806040840185811115614c3657600080fd5b845b81811015611417578035845260209384019301614c38565b63ffffffff8116811461269a57600080fd5b600082601f830112614c7357600080fd5b614c7b614b21565b806040840185811115614c8d57600080fd5b845b81811015611417578035614ca281614c50565b845260209384019301614c8f565b60008060008060006101808688031215614cc957600080fd5b8535614cd481614ac0565b94506020603f87018813614ce757600080fd5b614cf388828901614b9e565b945087609f880112614d0457600080fd5b614d0c614b4a565b8061010089018a811115614d1f57600080fd5b60808a015b81811015614d44578035614d3781614bfd565b8452928401928401614d24565b50819650614d528b82614c0b565b955050505050614d66876101408801614c62565b90509295509295909350565b6020808252825182820181905260009190848201906040850190845b81811015614daa57835183529284019291840191600101614d8e565b50909695505050505050565b60008060408385031215614dc957600080fd5b50508035926020909101359150565b600080600080600060a08688031215614df057600080fd5b8535945060208601359350604086013592506060860135614e1081614ac0565b91506080860135614e2081614ac0565b809150509295509295909350565b60008060408385031215614e4157600080fd5b8235614e4c81614ac0565b946020939093013593505050565b60008060408385031215614e6d57600080fd5b8235614e7881614ac0565b915060208381013567ffffffffffffffff80821115614e9657600080fd5b818601915086601f830112614eaa57600080fd5b813581811115614ebc57614ebc614b0b565b8060051b9150614ecd848301614b6d565b8181529183018401918481019089841115614ee757600080fd5b938501935b83851015614f0557843582529385019390850190614eec565b8096505050505050509250929050565b600080600060608486031215614f2a57600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082821015614f7f57614f7f614f57565b500390565b600060208284031215614f9657600080fd5b815161078881614ac0565b600060208083526000845481600182811c915080831680614fc357607f831692505b858310811415614fe157634e487b7160e01b85526022600452602485fd5b878601838152602001818015614ffe576001811461500f5761503a565b60ff1986168252878201965061503a565b60008b81526020902060005b868110156150345781548482015290850190890161501b565b83019750505b50949998505050505050505050565b600181815b8085111561508457816000190482111561506a5761506a614f57565b8085161561507757918102915b93841c939080029061504e565b509250929050565b60008261509b57506001610949565b816150a857506000610949565b81600181146150be57600281146150c8576150e4565b6001915050610949565b60ff8411156150d9576150d9614f57565b50506001821b610949565b5060208310610133831016604e8410600b8410161715615107575081810a610949565b6151118383615049565b806000190482111561512557615125614f57565b029392505050565b600061078860ff84168361508c565b600081600019048311821515161561515657615156614f57565b500290565b60008261517857634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561518f57600080fd5b815161078881614bfd565b6000602082840312156151ac57600080fd5b815160ff8116811461078857600080fd5b6000610788838361508c565b600082198211156151dc576151dc614f57565b500190565b6000602082840312156151f357600080fd5b5051919050565b600060001982141561520e5761520e614f57565b5060010190565b600065ffffffffffff80831681851680830382111561523657615236614f57565b01949350505050565b80516dffffffffffffffffffffffffffff8116811461525d57600080fd5b919050565b60008060006060848603121561527757600080fd5b6152808461523f565b925061528e6020850161523f565b9150604084015161529e81614c50565b809150509250925092565b600065ffffffffffff838116908316818110156152c8576152c8614f57565b039392505050565b600060ff821660ff84168060ff038211156152ed576152ed614f57565b019392505050565b6000825160005b8181101561531657602081860181015185830152016152fc565b81811115615325576000828501525b50919091019291505056fea164736f6c634300080a000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102ad5760003560e01c8063a42206101161017b578063c9b67af5116100d8578063e3684e391161008c578063f1b7dc7811610071578063f1b7dc7814610719578063f3191a461461072c578063f36d1e4e1461073557600080fd5b8063e3684e39146106a7578063e481b2651461070657600080fd5b8063d6db4df8116100bd578063d6db4df814610629578063d936547e1461063c578063e0b117ff1461065f57600080fd5b8063c9b67af51461060e578063d2390aa21461061657600080fd5b8063be399be51161012f578063c0680e2011610114578063c0680e201461058b578063c0aa0e8a1461059e578063c3e0fb1c146105e657600080fd5b8063be399be514610565578063bf7e214f1461057857600080fd5b8063b1283e7711610160578063b1283e771461047e578063bc3b2b12146104da578063bcb296671461055257600080fd5b8063a422061014610458578063abbf4b171461046b57600080fd5b80634889bf6d116102295780637c770aae116101dd5780639b19251a116101c25780639b19251a146104355780639c76978714610448578063a2594ea91461045057600080fd5b80637c770aae146103f457806384a07dcb1461042257600080fd5b8063649144391161020e57806364914439146103ae5780636a6c575d146103ce5780637a9e5e4b146103e157600080fd5b80634889bf6d14610388578063530e784f1461039b57600080fd5b80631def0708116102805780632750745811610265578063275074581461034a5780633adec5a71461036d5780633d18b9121461038057600080fd5b80631def0708146103165780632630c12f1461031f57600080fd5b80630700037d146102b25780630a9d85eb146102e55780630aebeb4e146102f85780631885f5801461030d575b600080fd5b6102d26102c0366004614ad5565b60056020526000908152604090205481565b6040519081526020015b60405180910390f35b6102d26102f3366004614af2565b610748565b61030b610306366004614af2565b61078f565b005b6102d260025481565b6102d260045481565b600a54610332906001600160a01b031681565b6040516001600160a01b0390911681526020016102dc565b61035d610358366004614af2565b6108de565b60405190151581526020016102dc565b6102d261037b366004614af2565b61094f565b61030b6109ab565b6102d2610396366004614cb0565b610a57565b61030b6103a9366004614ad5565b6111c5565b6103c16103bc366004614ad5565b611293565b6040516102dc9190614d72565b6102d26103dc366004614db6565b611422565b61030b6103ef366004614ad5565b611509565b610407610402366004614dd8565b6115ff565b604080519384526020840192909252908201526060016102dc565b6102d2610430366004614af2565b611970565b61030b610443366004614ad5565b61206c565b61030b612141565b61030b6123d5565b6102d2610466366004614e2e565b61269d565b6102d2610479366004614af2565b612930565b61049161048c366004614af2565b612a13565b604080519889526001600160a01b039097166020890152941515958701959095529115156060860152608085015260a084015260c083019190915260e0820152610100016102dc565b6105216104e8366004614af2565b600e602052600090815260409020805460019091015465ffffffffffff80821691600160301b810490911690600160601b900460ff1684565b6040516102dc949392919093845265ffffffffffff9283166020850152911660408301521515606082015260800190565b6102d2610560366004614af2565b612a76565b6102d2610573366004614ad5565b612ab0565b600154610332906001600160a01b031681565b6102d2610599366004614e2e565b612abf565b6105b16105ac366004614af2565b612af0565b604080519515158652602086019490945265ffffffffffff92831693850193909352166060830152608082015260a0016102dc565b6105f96105f4366004614e2e565b612b42565b604080519283529015156020830152016102dc565b6103c1612c0d565b6102d2610624366004614e5a565b612cf6565b61030b610637366004614e2e565b612e6e565b61035d61064a366004614ad5565b60066020526000908152604090205460ff1681565b61067261066d366004614e2e565b612f30565b6040805195865265ffffffffffff9485166020870152928416928501929092528216606084015216608082015260a0016102dc565b6106ba6106b5366004614af2565b612f93565b6040805165ffffffffffff98891681529688166020880152948716948601949094529185166060850152909316608083015260ff90921660a082015290151560c082015260e0016102dc565b6103c1610714366004614ad5565b612ffb565b6102d2610727366004614af2565b613220565b6102d260035481565b61030b610743366004614f15565b6132cb565b60008061075483613385565b5050905080600c848154811061076c5761076c614f41565b9060005260206000209060040201600101546107889190614f6d565b9392505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108069190614f84565b6001600160a01b0316336001600160a01b0316146000906108435760405162461bcd60e51b815260040161083a9190614fa1565b60405180910390fd5b5042600c828154811061085857610858614f41565b906000526020600020906004020160020160066101000a81548165ffffffffffff021916908365ffffffffffff1602179055506000600b82815481106108a0576108a0614f41565b6000918252602082206006909102019190915560405182917f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe591a250565b6000600b82815481106108f3576108f3614f41565b906000526020600020906006020160000154600014158015610949575042600c838154811061092457610924614f41565b6000918252602090912060049091020160020154600160301b900465ffffffffffff16115b92915050565b6000600d828154811061096457610964614f41565b60009182526020909120015461098590600160f01b900460ff16600a61512d565b61098e83613220565b61099784610748565b6109a1919061513c565b610949919061515b565b3360008181526005602052604080822080549290555163a9059cbb60e01b8152600481019290925260248201819052906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044015b6020604051808303816000875af1158015610a2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a53919061517d565b5050565b60015460408051630505c8c960e01b815290516000926001600160a01b031691630505c8c99160048083019260209291908290030181865afa158015610aa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac59190614f84565b6001600160a01b0316336001600160a01b031614600090610af95760405162461bcd60e51b815260040161083a9190614fa1565b506020830151600090610b0d904290614f6d565b90506000876001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b73919061519a565b60ff169050600086816020020151610b8c578751610bcb565b610b9782600a6151bd565b60208901518951610bb7906ec097ce7bc90715b34b9f100000000061513c565b610bc1919061515b565b610bcb919061515b565b85519091506000908490610be59063ffffffff168461513c565b610bef919061515b565b90506000620186a08a60026020020151610c09908561513c565b610c13919061515b565b610c1d90846151c9565b9050600083600960009054906101000a90046001600160a01b03166001600160a01b031663860f50486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9991906151e1565b60208d0151610ca8919061513c565b610cb2919061515b565b600b805460408051610100810190915290995091925090808d6000602002015181526020018e6001600160a01b031681526020018c600060048110610cf957610cf9614f41565b6020020151151581526020018c600160048110610d1857610d18614f41565b6020908102919091015115158252818101889052604080830188905260006060808501829052608094850182905286546001808201895597835291849020865160069093020191825585840151828801805488860151898501511515600160a81b027fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff911515600160a01b027fffffffffffffffffffffff0000000000000000000000000000000000000000009093166001600160a01b0390951694909417919091171691909117905593850151600282015560a080860151600383015560c0860151600483015560e090950151600590910155805193840181528e830151151584529083018590528c5165ffffffffffff1690830152600c92908201908c906020908102919091015165ffffffffffff90811683529181018690528354600180820186556000958652948290208451600490920201805491151560ff199092169190911781558382015194810194909455604080840151600280870180546060808901518816600160301b026bffffffffffffffffffffffff1990921694881694909417179055608095860151600390970196909655815160e08101835242851680825281850152938c16918401919091528c5163ffffffff90811691840191909152908c0151169181019190915260ff871660a0820152600d9160c08201908d90602002015115158152509080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548165ffffffffffff021916908365ffffffffffff16021790555060208201518160000160066101000a81548165ffffffffffff021916908365ffffffffffff160217905550604082015181600001600c6101000a81548165ffffffffffff021916908365ffffffffffff16021790555060608201518160000160126101000a81548165ffffffffffff021916908365ffffffffffff16021790555060808201518160000160186101000a81548165ffffffffffff021916908365ffffffffffff16021790555060a082015181600001601e6101000a81548160ff021916908360ff16021790555060c082015181600001601f6101000a81548160ff0219169083151502179055505050600f60008d6001600160a01b03166001600160a01b03168152602001908152602001600020879080600181540180825580915050600190039060005260206000200160009091909190915055896001600481106110c3576110c3614f41565b6020020151156111475760095460405163095ea7b360e01b81526001600160a01b0391821660048201526000196024820152908d169063095ea7b3906044016020604051808303816000875af1158015611121573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611145919061517d565b505b6001600160a01b03808d16907f000000000000000000000000000000000000000000000000000000000000000016887f2f6ff727bd580b1d1b8332e28aa93ed4ec9d8b08d6e30d6b4c9f7aa63ca17f638e600160200201516040516111ae91815260200190565b60405180910390a450505050505095945050505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611218573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123c9190614f84565b6001600160a01b0316336001600160a01b0316146000906112705760405162461bcd60e51b815260040161083a9190614fa1565b50600a80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381166000908152600f602090815260408083208054825181850281018501909352808352606094938301828280156112f257602002820191906000526020600020905b8154815260200190600101908083116112de575b50505050509050600080600090505b82518110156113515761132c83828151811061131f5761131f614f41565b60200260200101516108de565b1561133f578161133b816151fa565b9250505b80611349816151fa565b915050611301565b5060008167ffffffffffffffff81111561136d5761136d614b0b565b604051908082528060200260200182016040528015611396578160200160208202803683370190505b5090506000805b8451811015611417576113bb85828151811061131f5761131f614f41565b15611405578481815181106113d2576113d2614f41565b60200260200101518383815181106113ec576113ec614f41565b602090810291909101015281611401816151fa565b9250505b8061140f816151fa565b91505061139d565b509095945050505050565b600080600d838154811061143857611438614f41565b60009182526020918290206040805160e081018252919092015465ffffffffffff8082168352600160301b8204811694830194909452600160601b8104841692820192909252600160901b820483166060820152600160c01b8204909216608083015260ff600160f01b8204811660a08401819052600160f81b90920416151560c08301529091506114cb90600a61512d565b6114d48461094f565b6114ed866ec097ce7bc90715b34b9f100000000061513c565b6114f7919061515b565b611501919061515b565b949350505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa15801561155c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115809190614f84565b6001600160a01b0316336001600160a01b0316146000906115b45760405162461bcd60e51b815260040161083a9190614fa1565b50600180546001600160a01b0319166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b600080600080600b898154811061161857611618614f41565b906000526020600020906006020190506000600c8a8154811061163d5761163d614f41565b60009182526020918290206040805160a0810182526004909302909101805460ff1615158352600181015493830193909352600283015465ffffffffffff80821692840192909252600160301b900481166060830181905260039093015460808301529092504291908216106116f55760405162461bcd60e51b815260206004820152601c60248201527f4465706f7369746f72793a206d61726b657420636f6e636c7564656400000000604482015260640161083a565b6116ff8b82613467565b600061170a8c613623565b90508981111561175c5760405162461bcd60e51b815260206004820152601f60248201527f4465706f7369746f72793a206d6f7265207468616e206d617820707269636500604482015260640161083a565b600d8c8154811061176f5761176f614f41565b60009182526020909120015461179090600160f01b900460ff16600a61512d565b816117aa8d6ec097ce7bc90715b34b9f100000000061513c565b6117b4919061515b565b6117be919061515b565b965083600301548711156118145760405162461bcd60e51b815260206004820152601d60248201527f4465706f7369746f72793a206d61782073697a65206578636565646564000000604482015260640161083a565b6001840154600160a01b900460ff1661182d578661182f565b8a5b8460000160008282546118429190614f6d565b90915550508251611857578260400151611867565b8183604001516118679190615215565b65ffffffffffff1695508a84600501600082825461188591906151c9565b92505081905550868460040160008282546118a091906151c9565b92505081905550868460020160008282546118bb91906151c9565b9091555050604080518c8152602081018390528d917f7880508a48fd3aee88f7e15917d85e39c3ad059e51ad4aca9bb46e7b4938b961910160405180910390a2506119088b8b888a613819565b6119148887878e613bb4565b93508260020154826080015110156119585760008084556040518c917f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe591a2611962565b6119628b82613d3a565b505050955095509592505050565b600080600b838154811061198657611986614f41565b60009182526020808320604080516101008101825260069094029091018054845260018101546001600160a01b0381169385019390935260ff600160a01b84048116151592850192909252600160a81b909204161515606083015260028101546080830152600381015460a0830152600481015460c08301526005015460e0820152600d80549193509085908110611a2057611a20614f41565b60009182526020918290206040805160e081018252919092015465ffffffffffff8082168352600160301b8204811694830194909452600160601b8104841692820192909252600160901b820483166060820152600160c01b8204909216608083015260ff600160f01b8204811660a0840152600160f81b9091041615801560c0830152909150611fc4576000826020015190506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015611af4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b189190614f84565b90506000826001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7e9190614f84565b9050600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015611bc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be59190615262565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b03161480611c7b57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316145b15611c895791929190611d46565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161480611cfa57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316145b611d465760405162461bcd60e51b815260206004820152600c60248201527f496e76616c696420706169720000000000000000000000000000000000000000604482015260640161083a565b6000846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611daa919061519a565b600a54604051632321bc7960e21b81526001600160a01b038881166004830152670de0b6b3a76400006024830152878116604483015260ff93909316935060009290911690638c86f1e490606401602060405180830381865afa158015611e15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3991906151e1565b90506000611e4883600a6151bd565b611e52838761513c565b611e5c919061515b565b611e6690856151c9565b9050600081896001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ea9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ecd91906151e1565b611edf90670de0b6b3a764000061513c565b611ee9919061515b565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316876001600160a01b03161415611fb4577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632986c0e56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa791906151e1565b611fb1908261515b565b90505b9c9b505050505050505050505050565b600a546020830151604051632321bc7960e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152670de0b6b3a764000060248301529182166044820152911690638c86f1e490606401602060405180830381865afa158015612048573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150191906151e1565b600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156120bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120e39190614f84565b6001600160a01b0316336001600160a01b0316146000906121175760405162461bcd60e51b815260040161083a9190614fa1565b506001600160a01b03166000908152600660205260409020805460ff19811660ff90911615179055565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015612194573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b89190614f84565b6001600160a01b0316336001600160a01b0316148061225e5750600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015612225573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122499190614f84565b6001600160a01b0316336001600160a01b0316145b806122f05750600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122db9190614f84565b6001600160a01b0316336001600160a01b0316145b61233c5760405162461bcd60e51b815260206004820152600f60248201527f4f6e6c7920617574686f72697a65640000000000000000000000000000000000604482015260640161083a565b600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561238f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123b39190614f84565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015612428573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244c9190614f84565b6001600160a01b0316336001600160a01b0316146000906124805760405162461bcd60e51b815260040161083a9190614fa1565b50600060056000600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124fe9190614f84565b6001600160a01b031681526020810191909152604001600020549050801561269a57600060056000600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612579573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259d9190614f84565b6001600160a01b03166001600160a01b03168152602001908152602001600020819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612643573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126679190614f84565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401610a10565b50565b6001600160a01b03828116600090815260086020908152604080832085845290915281205490911633146127135760405162461bcd60e51b815260206004820152601e60248201527f4465706f7369746f72793a207472616e73666572206e6f7420666f756e640000604482015260640161083a565b6001600160a01b038316600090815260076020526040902080548390811061273d5761273d614f41565b6000918252602090912060029091020160010154600160601b900465ffffffffffff16156127ad5760405162461bcd60e51b815260206004820152601960248201527f4465706f7369746f72793a206e6f74652072656465656d656400000000000000604482015260640161083a565b503360009081526007602052604080822080546001600160a01b0386168452919092208054919291849081106127e5576127e5614f41565b600091825260208083208454600181810187559585528285206002948502909201805491909402909101908155918401805492909401805465ffffffffffff19811665ffffffffffff94851690811783558654600160301b908190048616026bffffffffffffffffffffffff1990921617178082558554600160601b9081900485160271ffffffffffff000000000000000000000000198216811783559554600160901b9081900490941690930265ffffffffffff60901b1990951677ffffffffffffffffffffffff00000000000000000000000019909316929092179390931790556001600160a01b03851681526007909152604090208054839081106128ef576128ef614f41565b60009182526020822060029091020190815560010180547fffffffffffffffff00000000000000000000000000000000000000000000000016905592915050565b600080600d838154811061294657612946614f41565b600091825260208083206040805160e081018252939091015465ffffffffffff8082168552600160301b82048116938501849052600160601b8204811692850192909252600160901b810482166060850152600160c01b8104909116608084015260ff600160f01b8204811660a0850152600160f81b90910416151560c08301529092506129d49042614f6d565b9050816040015165ffffffffffff1681600b86815481106129f7576129f7614f41565b9060005260206000209060060201600201546114f7919061513c565b600b8181548110612a2357600080fd5b60009182526020909120600690910201805460018201546002830154600384015460048501546005909501549395506001600160a01b0383169460ff600160a01b8504811695600160a81b909504169388565b6000612a8182612930565b600b8381548110612a9457612a94614f41565b9060005260206000209060060201600201546109499190614f6d565b60006109498261062484612ffb565b600f6020528160005260406000208181548110612adb57600080fd5b90600052602060002001600091509150505481565b600c8181548110612b0057600080fd5b6000918252602090912060049091020180546001820154600283015460039093015460ff90921693509165ffffffffffff80821692600160301b909204169085565b6001600160a01b038216600090815260076020526040812080548291829185908110612b7057612b70614f41565b60009182526020918290206040805160a0810182526002909302909101805480845260019091015465ffffffffffff80821695850195909552600160301b8104851692840192909252600160601b8204841660608401819052600160901b90920490931660808301529194509150158015612bf7575042816040015165ffffffffffff1611155b8015612c035750805115155b9150509250929050565b60606000805b600b54811015612c4b57612c26816108de565b15612c395781612c35816151fa565b9250505b80612c43816151fa565b915050612c13565b5060008167ffffffffffffffff811115612c6757612c67614b0b565b604051908082528060200260200182016040528015612c90578160200160208202803683370190505b5090506000805b600b54811015612ced57612caa816108de565b15612cdb5780838381518110612cc257612cc2614f41565b602090810291909101015281612cd7816151fa565b9250505b80612ce5816151fa565b915050612c97565b50909392505050565b600042815b8351811015612dd257600080612d2a87878581518110612d1d57612d1d614f41565b6020026020010151612b42565b915091508015612dbd576001600160a01b03871660009081526007602052604090208651859190889086908110612d6357612d63614f41565b602002602001015181548110612d7b57612d7b614f41565b9060005260206000209060020201600101600c6101000a81548165ffffffffffff021916908365ffffffffffff1602179055508185612dba91906151c9565b94505b50508080612dca906151fa565b915050612cfb565b5060405163a9059cbb60e01b81526001600160a01b038581166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015612e42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e66919061517d565b505092915050565b336000908152600760205260409020805482908110612e8f57612e8f614f41565b600091825260209091206001600290920201015465ffffffffffff16612ef75760405162461bcd60e51b815260206004820152601a60248201527f4465706f7369746f72793a206e6f7465206e6f7420666f756e64000000000000604482015260640161083a565b3360009081526008602090815260408083209383529290522080546001600160a01b0319166001600160a01b0392909216919091179055565b60076020528160005260406000208181548110612f4c57600080fd5b60009182526020909120600290910201805460019091015490925065ffffffffffff8082169250600160301b8204811691600160601b8104821691600160901b9091041685565b600d8181548110612fa357600080fd5b60009182526020909120015465ffffffffffff8082169250600160301b8204811691600160601b8104821691600160901b8204811691600160c01b81049091169060ff600160f01b8204811691600160f81b90041687565b6001600160a01b0381166000908152600760209081526040808320805482518185028101850190935280835260609493849084015b828210156130a65760008481526020908190206040805160a081018252600286029092018054835260019081015465ffffffffffff80821685870152600160301b8204811693850193909352600160601b810483166060850152600160901b900490911660808301529083529092019101613030565b505050509050600080600090505b8251811015613135578281815181106130cf576130cf614f41565b60200260200101516060015165ffffffffffff16600014801561311057508281815181106130ff576130ff614f41565b602002602001015160000151600014155b15613123578161311f816151fa565b9250505b8061312d816151fa565b9150506130b4565b5060008167ffffffffffffffff81111561315157613151614b0b565b60405190808252806020026020018201604052801561317a578160200160208202803683370190505b5090506000805b84518110156114175784818151811061319c5761319c614f41565b60200260200101516060015165ffffffffffff1660001480156131dd57508481815181106131cc576131cc614f41565b602002602001015160000151600014155b1561320e57808383815181106131f5576131f5614f41565b60209081029190910101528161320a816151fa565b9250505b80613218816151fa565b915050613181565b600954604080516310c1ea0960e31b815290516000926001600160a01b03169163860f50489160048083019260209291908290030181865afa15801561326a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061328e91906151e1565b600d83815481106132a1576132a1614f41565b6000918252602090912001546132c290600160f01b900460ff16600a61512d565b61099784612a76565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa15801561331e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133429190614f84565b6001600160a01b0316336001600160a01b0316146000906133765760405162461bcd60e51b815260040161083a9190614fa1565b50600392909255600255600455565b6000818152600e6020908152604080832081516080810183528154815260019091015465ffffffffffff80821694830194909452600160301b810490931691810191909152600160601b90910460ff16151560608201819052829182916133f757600080600093509350935050613460565b602081015161340690426152a9565b9250806040015165ffffffffffff168365ffffffffffff161091508161342d57805161345c565b806040015165ffffffffffff168365ffffffffffff168260000151613452919061513c565b61345c919061515b565b9350505b9193909250565b61347082612930565b600b838154811061348357613483614f41565b906000526020600020906006020160020160008282546134a39190614f6d565b9250508190555080600d83815481106134be576134be614f41565b60009182526020808320909101805465ffffffffffff94909416600160301b026bffffffffffff0000000000001990941693909317909255838152600e909152604090206001015460ff600160601b9091041615610a53576000828152600e6020526040812090808061353086613385565b92509250925082600c878154811061354a5761354a614f41565b9060005260206000209060040201600101600082825461356a9190614f6d565b9091555050801561360257828460000160008282546135899190614f6d565b90915550506001840180548391906006906135b4908490600160301b900465ffffffffffff166152a9565b92506101000a81548165ffffffffffff021916908365ffffffffffff160217905550848460010160006101000a81548165ffffffffffff021916908365ffffffffffff16021790555061361b565b6001840180546cff000000000000000000000000191690555b505050505050565b600080600d838154811061363957613639614f41565b60009182526020909120015461365a90600160f01b900460ff16600a61512d565b6136638461424f565b600c858154811061367657613676614f41565b906000526020600020906004020160010154613692919061513c565b61369c919061515b565b600a549091506001600160a01b0316156136cb5760006136bb84611970565b9050818110156136c9578091505b505b600954600b80546000926001600160a01b03169163f182178391879081106136f5576136f5614f41565b906000526020600020906006020160010160009054906101000a90046001600160a01b0316600d878154811061372d5761372d614f41565b60009182526020909120015461374e90600160f01b900460ff16600a61512d565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381865afa158015613797573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137bb91906151e1565b600d85815481106137ce576137ce614f41565b6000918252602090912001546137ef90600160f01b900460ff1660126152d0565b6137fa90600a61512d565b613804919061515b565b905080821015613812578091505b5092915050565b6000600b858154811061382e5761382e614f41565b60009182526020808320604080516101008101825260069094029091018054845260018101546001600160a01b0381169385019390935260ff600160a01b84048116151592850192909252600160a81b90920416158015606084015260028201546080840152600382015460a0840152600482015460c084015260059091015460e083015290925081908190613a425760208401516138d8906001600160a01b031633308a614320565b600954602085015160405163f182178360e01b81526001600160a01b039182166004820152602481018a9052600092919091169063f182178390604401602060405180830381865afa158015613932573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061395691906151e1565b90508681111561397c57613974878761396f8285614f6d565b614451565b955090935091505b6000848361398a868b6151c9565b61399491906151c9565b61399e91906151c9565b90506000818311156139b7576139b48284614f6d565b90505b600954602088015160405163bc157ac160e01b8152600481018d90526001600160a01b0391821660248201526044810184905291169063bc157ac1906064016020604051808303816000875af1158015613a15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a3991906151e1565b50505050613b09565b6009546020850151613a63916001600160a01b03918216913391168a614320565b613a708686600019614451565b60095490955091935091506001600160a01b03166340c10f19308584613a96878c6151c9565b613aa091906151c9565b613aaa91906151c9565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015613af057600080fd5b505af1158015613b04573d6000803e3d6000fd5b505050505b8215613b1857613b1883614853565b6040516356e4bb9760e11b8152306004820152602481018790527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063adc9772e906044016020604051808303816000875af1158015613b85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ba991906151e1565b505050505050505050565b6001600160a01b03848116600090815260076020526040908190208054825160a08101938490526319a948db60e21b90935260a483018790529290919081907f0000000000000000000000000000000000000000000000000000000000000000166366a5236c60c48301602060405180830381865afa158015613c3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c5f91906151e1565b815265ffffffffffff4281166020808401919091529681166040808401919091526000606080850182905297831660809485015285546001818101885596825290899020855160029092020190815597840151979094018054948401519684015193909201518116600160901b0265ffffffffffff60901b19938216600160601b029390931677ffffffffffffffffffffffff00000000000000000000000019968216600160301b026bffffffffffffffffffffffff1990951697909116969096179290921793909316939093179190911790915592915050565b6000600d8381548110613d4f57613d4f614f41565b60009182526020918290206040805160e081018252919092015465ffffffffffff808216808452600160301b8304821695840195909552600160601b8204811693830193909352600160901b810483166060830152600160c01b81049092166080820181905260ff600160f01b8404811660a0840152600160f81b909304909216151560c08201529250613de291615215565b65ffffffffffff168265ffffffffffff161061424a576000600b8481548110613e0d57613e0d614f41565b60009182526020808320604080516101008101825260069094029091018054845260018101546001600160a01b0381169385019390935260ff600160a01b84048116151592850192909252600160a81b909204161515606083015260028101546080830152600381015460a0830152600481015460c08301526005015460e0820152600c8054919350859187908110613ea857613ea8614f41565b906000526020600020906004020160020160069054906101000a900465ffffffffffff16613ed691906152a9565b65ffffffffffff1690506000613eeb86613623565b905060008360400151613eff578351613f40565b60a0850151613f0f90600a61512d565b84518390613f2c906ec097ce7bc90715b34b9f100000000061513c565b613f36919061515b565b613f40919061515b565b905082856060015165ffffffffffff1682613f5b919061513c565b613f65919061515b565b600b8881548110613f7857613f78614f41565b906000526020600020906006020160030181905550600083866040015165ffffffffffff1683613fa8919061513c565b613fb2919061515b565b9050600081600960009054906101000a90046001600160a01b03166001600160a01b031663860f50486040518163ffffffff1660e01b8152600401602060405180830381865afa15801561400a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061402e91906151e1565b614038908661513c565b614042919061515b565b9050887f78f9c01d72705dba80d6ce051d36a1f987bf2a3800fee938c111a2ae741e57d1600c8b8154811061407957614079614f41565b906000526020600020906004020160010154836040516140a3929190918252602082015260400190565b60405180910390a2600c89815481106140be576140be614f41565b90600052602060002090600402016001015481106141045780600c8a815481106140ea576140ea614f41565b906000526020600020906004020160010181905550614208565b600081600c8b8154811061411a5761411a614f41565b9060005260206000209060040201600101546141369190614f6d565b905060405180608001604052808281526020018a65ffffffffffff168152602001896080015165ffffffffffff16815260200160011515815250600e60008c81526020019081526020016000206000820151816000015560208201518160010160006101000a81548165ffffffffffff021916908365ffffffffffff16021790555060408201518160010160066101000a81548165ffffffffffff021916908365ffffffffffff160217905550606082015181600101600c6101000a81548160ff021916908315150217905550905050505b87600d8a8154811061421c5761421c614f41565b6000918252602090912001805465ffffffffffff191665ffffffffffff929092169190911790555050505050505b505050565b600954604080516310c1ea0960e31b815290516000926001600160a01b03169163860f50489160048083019260209291908290030181865afa158015614299573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142bd91906151e1565b600d83815481106142d0576142d0614f41565b6000918252602090912001546142f190600160f01b900460ff16600a61512d565b600b848154811061430457614304614f41565b9060005260206000209060060201600201546109a1919061513c565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b179052915160009283929088169161439991906152f5565b6000604051808303816000865af19150503d80600081146143d6576040519150601f19603f3d011682016040523d82523d6000602084013e6143db565b606091505b5091509150818015614405575080511580614405575080806020019051810190614405919061517d565b61361b5760405162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c4544000000000000000000000000604482015260640161083a565b600080600061271060025487614467919061513c565b614471919061515b565b915061271060035487614484919061513c565b61448e919061515b565b9250612710600454876144a1919061513c565b6144ab919061515b565b905083816144b985856151c9565b6144c391906151c9565b1115614527578383106144de57508291506000905080614527565b6144e88385614f6d565b9350836144f582846151c9565b111561452757838111614508578061450a565b835b905080841161451a576000614524565b6145248185614f6d565b91505b6001600160a01b03851660009081526006602052604090205460ff16156146df576001600160a01b038516600090815260056020526040812080548592906145709084906151c9565b925050819055508160056000600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa1580156145cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145f39190614f84565b6001600160a01b03166001600160a01b03168152602001908152602001600020600082825461462291906151c9565b925050819055508060056000600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614681573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146a59190614f84565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546146d491906151c9565b9091555061484a9050565b8160056000600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015614737573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061475b9190614f84565b6001600160a01b03166001600160a01b03168152602001908152602001600020600082825461478a91906151c9565b9091555061479a905083826151c9565b60056000600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156147f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148159190614f84565b6001600160a01b03166001600160a01b03168152602001908152602001600020600082825461484491906151c9565b90915550505b93509350939050565b600060056000600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156148ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148d09190614f84565b6001600160a01b03166001600160a01b031681526020019081526020016000205490506000811180156149035750818110155b15610a53578160056000600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614960573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149849190614f84565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546149b39190614f6d565b90915550506001546040805163fbfa77cf60e01b815290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169363a9059cbb9391169163fbfa77cf916004808201926020929091908290030181865afa158015614a2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a4f9190614f84565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018590526044016020604051808303816000875af1158015614a9c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061424a919061517d565b6001600160a01b038116811461269a57600080fd5b600060208284031215614ae757600080fd5b813561078881614ac0565b600060208284031215614b0457600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715614b4457614b44614b0b565b60405290565b6040516080810167ffffffffffffffff81118282101715614b4457614b44614b0b565b604051601f8201601f1916810167ffffffffffffffff81118282101715614b9657614b96614b0b565b604052919050565b60006040516060810181811067ffffffffffffffff82111715614bc357614bc3614b0b565b6040529050806060830184811115614bda57600080fd5b835b81811015614bf4578035835260209283019201614bdc565b50505092915050565b801515811461269a57600080fd5b600082601f830112614c1c57600080fd5b614c24614b21565b806040840185811115614c3657600080fd5b845b81811015611417578035845260209384019301614c38565b63ffffffff8116811461269a57600080fd5b600082601f830112614c7357600080fd5b614c7b614b21565b806040840185811115614c8d57600080fd5b845b81811015611417578035614ca281614c50565b845260209384019301614c8f565b60008060008060006101808688031215614cc957600080fd5b8535614cd481614ac0565b94506020603f87018813614ce757600080fd5b614cf388828901614b9e565b945087609f880112614d0457600080fd5b614d0c614b4a565b8061010089018a811115614d1f57600080fd5b60808a015b81811015614d44578035614d3781614bfd565b8452928401928401614d24565b50819650614d528b82614c0b565b955050505050614d66876101408801614c62565b90509295509295909350565b6020808252825182820181905260009190848201906040850190845b81811015614daa57835183529284019291840191600101614d8e565b50909695505050505050565b60008060408385031215614dc957600080fd5b50508035926020909101359150565b600080600080600060a08688031215614df057600080fd5b8535945060208601359350604086013592506060860135614e1081614ac0565b91506080860135614e2081614ac0565b809150509295509295909350565b60008060408385031215614e4157600080fd5b8235614e4c81614ac0565b946020939093013593505050565b60008060408385031215614e6d57600080fd5b8235614e7881614ac0565b915060208381013567ffffffffffffffff80821115614e9657600080fd5b818601915086601f830112614eaa57600080fd5b813581811115614ebc57614ebc614b0b565b8060051b9150614ecd848301614b6d565b8181529183018401918481019089841115614ee757600080fd5b938501935b83851015614f0557843582529385019390850190614eec565b8096505050505050509250929050565b600080600060608486031215614f2a57600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082821015614f7f57614f7f614f57565b500390565b600060208284031215614f9657600080fd5b815161078881614ac0565b600060208083526000845481600182811c915080831680614fc357607f831692505b858310811415614fe157634e487b7160e01b85526022600452602485fd5b878601838152602001818015614ffe576001811461500f5761503a565b60ff1986168252878201965061503a565b60008b81526020902060005b868110156150345781548482015290850190890161501b565b83019750505b50949998505050505050505050565b600181815b8085111561508457816000190482111561506a5761506a614f57565b8085161561507757918102915b93841c939080029061504e565b509250929050565b60008261509b57506001610949565b816150a857506000610949565b81600181146150be57600281146150c8576150e4565b6001915050610949565b60ff8411156150d9576150d9614f57565b50506001821b610949565b5060208310610133831016604e8410600b8410161715615107575081810a610949565b6151118383615049565b806000190482111561512557615125614f57565b029392505050565b600061078860ff84168361508c565b600081600019048311821515161561515657615156614f57565b500290565b60008261517857634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561518f57600080fd5b815161078881614bfd565b6000602082840312156151ac57600080fd5b815160ff8116811461078857600080fd5b6000610788838361508c565b600082198211156151dc576151dc614f57565b500190565b6000602082840312156151f357600080fd5b5051919050565b600060001982141561520e5761520e614f57565b5060010190565b600065ffffffffffff80831681851680830382111561523657615236614f57565b01949350505050565b80516dffffffffffffffffffffffffffff8116811461525d57600080fd5b919050565b60008060006060848603121561527757600080fd5b6152808461523f565b925061528e6020850161523f565b9150604084015161529e81614c50565b809150509250925092565b600065ffffffffffff838116908316818110156152c8576152c8614f57565b039392505050565b600060ff821660ff84168060ff038211156152ed576152ed614f57565b019392505050565b6000825160005b8181101561531657602081860181015185830152016152fc565b81811115615325576000828501525b50919091019291505056fea164736f6c634300080a000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "close(uint256)": {
        "params": {
          "_id": "ID of market to close"
        }
      },
      "create(address,uint256[3],bool[4],uint256[2],uint32[2])": {
        "details": "current price should be in 18 decimals.",
        "params": {
          "_booleans": "[capacity in quote, quote is reserve, quote is LP, fixed term]",
          "_intervals": "[deposit interval (seconds), tune interval (seconds)]",
          "_market": "[capacity (in PANA or quote), initial price / PANA (18 decimals), debt buffer (3 decimals)]",
          "_quoteToken": "token used to deposit",
          "_terms": "[vesting length (if fixed term) or vested timestamp, conclusion timestamp]"
        },
        "returns": {
          "id_": "        ID of new bond market"
        }
      },
      "currentControlVariable(uint256)": {
        "details": "accounts for control variable adjustment",
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "control variable for market in PANA decimals"
        }
      },
      "currentDebt(uint256)": {
        "details": "accounts for debt decay since last deposit",
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "current debt for market in PANA decimals"
        }
      },
      "debtDecay(uint256)": {
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "amount of debt to decay"
        }
      },
      "debtRatio(uint256)": {
        "details": "uses current debt, which accounts for debt decay since last deposit (vs _debtRatio())",
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "debt ratio for market in quote decimals"
        }
      },
      "deposit(uint256,uint256,uint256,address,address)": {
        "params": {
          "_amount": "the amount of quote token to spend",
          "_id": "the ID of the market",
          "_maxPrice": "the maximum price at which to buy",
          "_referral": "the front end operator address",
          "_user": "the recipient of the payout"
        },
        "returns": {
          "expiry_": "    the timestamp at which payout is redeemable",
          "index_": "     the user index of the Note (used to redeem or query information)",
          "payout_": "    the amount of KARSHA due"
        }
      },
      "getOraclePrice(uint256)": {
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "oracle price for market in PANA decimals"
        }
      },
      "indexesFor(address)": {
        "params": {
          "_user": "the user to query notes for"
        },
        "returns": {
          "_0": "the pending notes for the user"
        }
      },
      "isLive(uint256)": {
        "params": {
          "_id": "ID of market"
        }
      },
      "liveMarketsFor(address)": {
        "params": {
          "_token": "quote token to check for"
        }
      },
      "marketPrice(uint256)": {
        "details": "accounts for debt and control variable decay since last deposit (vs _marketPrice())",
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "price for market in PANA decimals price is derived from the equation p = cv * dr where p = price cv = control variable dr = debt ratio dr = d / s  where d = debt s = supply of token at market creation d -= ( d * (dt / l) )  where dt = change in time l = length of program"
        }
      },
      "payoutFor(uint256,uint256)": {
        "details": "accounts for debt and control variable decay so it is up to date1e36 = PANA decimals (18) + market price decimals (18)",
        "params": {
          "_amount": "amount of quote tokens to spend",
          "_id": "ID of market"
        },
        "returns": {
          "_0": "amount of PANA to be paid in PANA decimals"
        }
      },
      "pendingFor(address,uint256)": {
        "params": {
          "_index": "the index of the note in the user's array",
          "_user": "the user that the note belongs to"
        },
        "returns": {
          "matured_": "   if the payout can be redeemed",
          "payout_": "    the payout due, in Karsha"
        }
      },
      "pullNote(address,uint256)": {
        "params": {
          "_from": "the address that approved the note transfer",
          "_index": "the index of the note to transfer (in the sender's array)"
        }
      },
      "pushNote(address,uint256)": {
        "params": {
          "_index": "index of note to approve transfer for",
          "_to": "address to approve note transfer for"
        }
      },
      "redeem(address,uint256[])": {
        "params": {
          "_indexes": "the note indexes to redeem",
          "_user": "the user to redeem for"
        },
        "returns": {
          "payout_": "    sum of payout sent, in Karsha"
        }
      },
      "redeemAll(address)": {
        "details": "if possible, query indexesFor() off-chain and input in redeem() to save gas",
        "params": {
          "_user": "user to redeem all notes for"
        },
        "returns": {
          "_0": "sum of payout sent, in Karsha"
        }
      }
    },
    "title": "Pana Bond Depository",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "close(uint256)": {
        "notice": "disable existing market"
      },
      "create(address,uint256[3],bool[4],uint256[2],uint32[2])": {
        "notice": "creates a new market type"
      },
      "currentControlVariable(uint256)": {
        "notice": "up to date control variable"
      },
      "currentDebt(uint256)": {
        "notice": "calculate debt factoring in decay"
      },
      "debtDecay(uint256)": {
        "notice": "amount of debt to decay from total debt for market ID"
      },
      "debtRatio(uint256)": {
        "notice": "calculate current ratio of debt to supply"
      },
      "deposit(uint256,uint256,uint256,address,address)": {
        "notice": "deposit quote tokens in exchange for a bond from a specified market"
      },
      "getOraclePrice(uint256)": {
        "notice": "gets token price in quote tokens from oracle"
      },
      "getTreasuryRewards()": {
        "notice": "Manually fetch remaining rewards for Treasury"
      },
      "indexesFor(address)": {
        "notice": "all pending notes for user"
      },
      "isLive(uint256)": {
        "notice": "is a given market accepting deposits"
      },
      "liveMarkets()": {
        "notice": "returns an array of all active market IDs"
      },
      "liveMarketsFor(address)": {
        "notice": "returns an array of all active market IDs for a given quote token"
      },
      "marketPrice(uint256)": {
        "notice": "calculate current market price of quote token in base token"
      },
      "payoutFor(uint256,uint256)": {
        "notice": "payout due for amount of quote tokens"
      },
      "pendingFor(address,uint256)": {
        "notice": "calculate amount available for claim for a single note"
      },
      "pullNote(address,uint256)": {
        "notice": "transfer a note that has been approved by an address"
      },
      "pushNote(address,uint256)": {
        "notice": "approve an address to transfer a note"
      },
      "redeem(address,uint256[])": {
        "notice": "redeem notes for user"
      },
      "redeemAll(address)": {
        "notice": "redeem all redeemable markets for user"
      },
      "setPriceOracle(address)": {
        "notice": "sets price oracle for bond depository"
      },
      "setRewards(uint256,uint256,uint256)": {
        "notice": "set rewards for front end operators and DAO"
      },
      "whitelist(address)": {
        "notice": "add or remove addresses from the reward whitelist"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 315,
        "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
        "label": "UNAUTHORIZED",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 318,
        "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
        "label": "authority",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IPanaAuthority)4575"
      },
      {
        "astId": 7413,
        "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
        "label": "daoReward",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 7415,
        "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
        "label": "refReward",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 7417,
        "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
        "label": "treasuryReward",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 7421,
        "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
        "label": "rewards",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7425,
        "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
        "label": "whitelisted",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2526,
        "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
        "label": "notes",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_struct(Note)4395_storage)dyn_storage)"
      },
      {
        "astId": 2532,
        "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
        "label": "noteTransfers",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))"
      },
      {
        "astId": 2541,
        "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
        "label": "treasury",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(ITreasury)4821"
      },
      {
        "astId": 816,
        "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
        "label": "priceOracle",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IPriceOracle)4589"
      },
      {
        "astId": 820,
        "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
        "label": "markets",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_struct(Market)3958_storage)dyn_storage"
      },
      {
        "astId": 824,
        "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
        "label": "terms",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_struct(Terms)3969_storage)dyn_storage"
      },
      {
        "astId": 828,
        "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
        "label": "metadata",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_struct(Metadata)3984_storage)dyn_storage"
      },
      {
        "astId": 833,
        "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
        "label": "adjustments",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_struct(Adjustment)3993_storage)"
      },
      {
        "astId": 838,
        "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
        "label": "marketsForQuote",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Market)3958_storage)dyn_storage": {
        "base": "t_struct(Market)3958_storage",
        "encoding": "dynamic_array",
        "label": "struct IBondDepository.Market[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Metadata)3984_storage)dyn_storage": {
        "base": "t_struct(Metadata)3984_storage",
        "encoding": "dynamic_array",
        "label": "struct IBondDepository.Metadata[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Note)4395_storage)dyn_storage": {
        "base": "t_struct(Note)4395_storage",
        "encoding": "dynamic_array",
        "label": "struct INoteKeeper.Note[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Terms)3969_storage)dyn_storage": {
        "base": "t_struct(Terms)3969_storage",
        "encoding": "dynamic_array",
        "label": "struct IBondDepository.Terms[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)4250": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPanaAuthority)4575": {
        "encoding": "inplace",
        "label": "contract IPanaAuthority",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceOracle)4589": {
        "encoding": "inplace",
        "label": "contract IPriceOracle",
        "numberOfBytes": "20"
      },
      "t_contract(ITreasury)4821": {
        "encoding": "inplace",
        "label": "contract ITreasury",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(Note)4395_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct INoteKeeper.Note[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Note)4395_storage)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Adjustment)3993_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IBondDepository.Adjustment)",
        "numberOfBytes": "32",
        "value": "t_struct(Adjustment)3993_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Adjustment)3993_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Adjustment",
        "members": [
          {
            "astId": 3986,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "change",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3988,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "lastAdjustment",
            "offset": 0,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 3990,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "timeToAdjusted",
            "offset": 6,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 3992,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "active",
            "offset": 12,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Market)3958_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Market",
        "members": [
          {
            "astId": 3942,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "capacity",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3945,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "quoteToken",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)4250"
          },
          {
            "astId": 3947,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "capacityInQuote",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 3949,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "quoteTokenIsReserve",
            "offset": 21,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 3951,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "totalDebt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3953,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "maxPayout",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3955,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "sold",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3957,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "purchased",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Metadata)3984_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Metadata",
        "members": [
          {
            "astId": 3971,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "lastTune",
            "offset": 0,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 3973,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "lastDecay",
            "offset": 6,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 3975,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "length",
            "offset": 12,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 3977,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "depositInterval",
            "offset": 18,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 3979,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "tuneInterval",
            "offset": 24,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 3981,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "quoteDecimals",
            "offset": 30,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3983,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "quoteIsLPToken",
            "offset": 31,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Note)4395_storage": {
        "encoding": "inplace",
        "label": "struct INoteKeeper.Note",
        "members": [
          {
            "astId": 4386,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "payout",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4388,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "created",
            "offset": 0,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 4390,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "matured",
            "offset": 6,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 4392,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "redeemed",
            "offset": 12,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 4394,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "marketID",
            "offset": 18,
            "slot": "1",
            "type": "t_uint48"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Terms)3969_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Terms",
        "members": [
          {
            "astId": 3960,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "fixedTerm",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3962,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "controlVariable",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3964,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "vesting",
            "offset": 0,
            "slot": "2",
            "type": "t_uint48"
          },
          {
            "astId": 3966,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "conclusion",
            "offset": 6,
            "slot": "2",
            "type": "t_uint48"
          },
          {
            "astId": 3968,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "maxDebt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}