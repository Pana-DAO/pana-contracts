{
  "address": "0x29FCD623D8329De1B8D7571EA7251Da291dE2380",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IPanaAuthority",
          "name": "_authority",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_pana",
          "type": "address"
        },
        {
          "internalType": "contract IKarsha",
          "name": "_karsha",
          "type": "address"
        },
        {
          "internalType": "contract IStaking",
          "name": "_staking",
          "type": "address"
        },
        {
          "internalType": "contract ITreasury",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IPanaAuthority",
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "AuthorityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "Bond",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "CloseMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "quoteToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialPrice",
          "type": "uint256"
        }
      ],
      "name": "CreateMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldControlVariable",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newControlVariable",
          "type": "uint256"
        }
      ],
      "name": "Tuned",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "adjustments",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "change",
          "type": "uint256"
        },
        {
          "internalType": "uint48",
          "name": "lastAdjustment",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "timeToAdjusted",
          "type": "uint48"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowUserRewards",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "internalType": "contract IPanaAuthority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "close",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "concurrentBondsPermitted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_quoteToken",
          "type": "address"
        },
        {
          "internalType": "uint256[3]",
          "name": "_market",
          "type": "uint256[3]"
        },
        {
          "internalType": "bool[4]",
          "name": "_booleans",
          "type": "bool[4]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_terms",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint32[2]",
          "name": "_intervals",
          "type": "uint32[2]"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "currentControlVariable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "currentDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "debtDecay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "debtRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_referral",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getOraclePriceView",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTreasuryRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "hasNonMaturedNotes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "indexesFor",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "isLive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liveMarkets",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "liveMarketsFor",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "marketPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "capacity",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "quoteToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "capacityInQuote",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "quoteTokenIsReserve",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "totalDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPayout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "purchased",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "marketsForQuote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "metadata",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "lastTune",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "lastDecay",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "length",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "depositInterval",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "tuneInterval",
          "type": "uint48"
        },
        {
          "internalType": "uint8",
          "name": "quoteDecimals",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "quoteIsLPToken",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "notes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "internalType": "uint48",
          "name": "created",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "matured",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "redeemed",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "marketID",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "pendingFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout_",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "matured_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "permit",
          "type": "bool"
        }
      ],
      "name": "permitConcurrentBonds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceOracle",
      "outputs": [
        {
          "internalType": "contract IPriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "pullNote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newIndex_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "pushNote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_indexes",
          "type": "uint256[]"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "redeemAll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPanaAuthority",
          "name": "_newAuthority",
          "type": "address"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPriceOracle",
          "name": "_priceOracle",
          "type": "address"
        }
      ],
      "name": "setPriceOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_toFrontEnd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_toTreasury",
          "type": "uint256"
        }
      ],
      "name": "setRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setUserRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "terms",
      "outputs": [
        {
          "internalType": "bool",
          "name": "fixedTerm",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "controlVariable",
          "type": "uint256"
        },
        {
          "internalType": "uint48",
          "name": "vesting",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "conclusion",
          "type": "uint48"
        },
        {
          "internalType": "uint256",
          "name": "maxDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x90307aa0ea497b5f3e948c691405dbc91bd235edfc47e96e96b61a6cefdd31c1",
  "receipt": {
    "to": null,
    "from": "0x2d494Cb0a923009C471B9512571048560a44556A",
    "contractAddress": "0x29FCD623D8329De1B8D7571EA7251Da291dE2380",
    "transactionIndex": 1,
    "gasUsed": "5145760",
    "logsBloom": "0x
    "blockHash": "0x92b4c4a3d3f16460effb7efcf497ba95b074e90903c4defb481b8902f7c83e28",
    "transactionHash": "0x90307aa0ea497b5f3e948c691405dbc91bd235edfc47e96e96b61a6cefdd31c1",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 678877,
        "transactionHash": "0x90307aa0ea497b5f3e948c691405dbc91bd235edfc47e96e96b61a6cefdd31c1",
        "address": "0x29FCD623D8329De1B8D7571EA7251Da291dE2380",
        "topics": [
          "0x2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad",
          "0x00000000000000000000000074db8cbccaf7aef5f5faf8b753e994563ab5edb3"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x92b4c4a3d3f16460effb7efcf497ba95b074e90903c4defb481b8902f7c83e28"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 678877,
        "transactionHash": "0x90307aa0ea497b5f3e948c691405dbc91bd235edfc47e96e96b61a6cefdd31c1",
        "address": "0x28a4d7A1da539cAAb96b615cd454e2B446B16F1c",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000029fcd623d8329de1b8d7571ea7251da291de2380",
          "0x00000000000000000000000035cd79061cc6021b4240a408916919227bddafce"
        ],
        "data": "0x000000000000000000000000002cd76fe086b93ce2f768a00b22a00000000000",
        "logIndex": 1,
        "blockHash": "0x92b4c4a3d3f16460effb7efcf497ba95b074e90903c4defb481b8902f7c83e28"
      }
    ],
    "blockNumber": 678877,
    "cumulativeGasUsed": "5145760",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x74Db8CBCCaF7aef5F5FAf8B753e994563AB5Edb3",
    "0x28a4d7A1da539cAAb96b615cd454e2B446B16F1c",
    "0x07dD7ba57DBcDC7e11f675C22F31BE58C02d84Af",
    "0x35Cd79061cc6021b4240a408916919227bDdafcE",
    "0x3B15aBa72Fb187a9a33530E37f14852Ac6067d52"
  ],
  "solcInputHash": "af66ec9a52cf7161b13a6a691e9f2d1c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IPanaAuthority\",\"name\":\"_authority\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_pana\",\"type\":\"address\"},{\"internalType\":\"contract IKarsha\",\"name\":\"_karsha\",\"type\":\"address\"},{\"internalType\":\"contract IStaking\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"contract ITreasury\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IPanaAuthority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Bond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"CloseMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialPrice\",\"type\":\"uint256\"}],\"name\":\"CreateMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldControlVariable\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newControlVariable\",\"type\":\"uint256\"}],\"name\":\"Tuned\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"adjustments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"change\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"lastAdjustment\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"timeToAdjusted\",\"type\":\"uint48\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowUserRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract IPanaAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"concurrentBondsPermitted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_quoteToken\",\"type\":\"address\"},{\"internalType\":\"uint256[3]\",\"name\":\"_market\",\"type\":\"uint256[3]\"},{\"internalType\":\"bool[4]\",\"name\":\"_booleans\",\"type\":\"bool[4]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_terms\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint32[2]\",\"name\":\"_intervals\",\"type\":\"uint32[2]\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"currentControlVariable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"currentDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"debtDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"debtRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getOraclePriceView\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasuryRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"hasNonMaturedNotes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"indexesFor\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liveMarkets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"liveMarketsFor\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"marketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"capacityInQuote\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"quoteTokenIsReserve\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchased\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketsForQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"lastTune\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"lastDecay\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"length\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"depositInterval\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"tuneInterval\",\"type\":\"uint48\"},{\"internalType\":\"uint8\",\"name\":\"quoteDecimals\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"quoteIsLPToken\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"notes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"created\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"matured\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"redeemed\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"marketID\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"pendingFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"matured_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"permit\",\"type\":\"bool\"}],\"name\":\"permitConcurrentBonds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"pullNote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newIndex_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"pushNote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_indexes\",\"type\":\"uint256[]\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"redeemAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPanaAuthority\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"_priceOracle\",\"type\":\"address\"}],\"name\":\"setPriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_toFrontEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toTreasury\",\"type\":\"uint256\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUserRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"terms\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"fixedTerm\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"controlVariable\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"vesting\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"conclusion\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"maxDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"close(uint256)\":{\"params\":{\"_id\":\"ID of market to close\"}},\"create(address,uint256[3],bool[4],uint256[2],uint32[2])\":{\"details\":\"current price should be in 18 decimals.\",\"params\":{\"_booleans\":\"[capacity in quote, quote is reserve, quote is LP, fixed term]\",\"_intervals\":\"[deposit interval (seconds), tune interval (seconds)]\",\"_market\":\"[capacity (in PANA or quote), initial price / PANA (18 decimals), debt buffer (3 decimals)]\",\"_quoteToken\":\"token used to deposit\",\"_terms\":\"[vesting length (if fixed term) or vested timestamp, conclusion timestamp]\"},\"returns\":{\"id_\":\"        ID of new bond market\"}},\"currentControlVariable(uint256)\":{\"details\":\"accounts for control variable adjustment\",\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"control variable for market in PANA decimals\"}},\"currentDebt(uint256)\":{\"details\":\"accounts for debt decay since last deposit\",\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"current debt for market in PANA decimals\"}},\"debtDecay(uint256)\":{\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"amount of debt to decay\"}},\"debtRatio(uint256)\":{\"details\":\"uses current debt, which accounts for debt decay since last deposit (vs _debtRatio())\",\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"debt ratio for market in quote decimals\"}},\"deposit(uint256,uint256,uint256,address,address)\":{\"params\":{\"_amount\":\"the amount of quote token to spend\",\"_id\":\"the ID of the market\",\"_maxPrice\":\"the maximum price at which to buy\",\"_referral\":\"the front end operator address\",\"_user\":\"the recipient of the payout\"},\"returns\":{\"expiry_\":\"    the timestamp at which payout is redeemable\",\"index_\":\"     the user index of the Note (used to redeem or query information)\",\"payout_\":\"    the amount of KARSHA due\"}},\"getOraclePriceView(uint256)\":{\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"oracle price for market in PANA decimals\"}},\"hasNonMaturedNotes(address)\":{\"params\":{\"_user\":\"the user that the note belongs to\"},\"returns\":{\"_0\":\"if the user has at least one unvested note\"}},\"indexesFor(address)\":{\"params\":{\"_user\":\"the user to query notes for\"},\"returns\":{\"_0\":\"the pending notes for the user\"}},\"isLive(uint256)\":{\"params\":{\"_id\":\"ID of market\"}},\"liveMarketsFor(address)\":{\"params\":{\"_token\":\"quote token to check for\"}},\"marketPrice(uint256)\":{\"params\":{\"_id\":\"market ID\"},\"returns\":{\"_0\":\"price for market in PANA decimals\"}},\"pendingFor(address,uint256)\":{\"params\":{\"_index\":\"the index of the note in the user's array\",\"_user\":\"the user that the note belongs to\"},\"returns\":{\"matured_\":\"   if the payout can be redeemed\",\"payout_\":\"    the payout due, in Karsha\"}},\"pullNote(address,uint256)\":{\"params\":{\"_from\":\"the address that approved the note transfer\",\"_index\":\"the index of the note to transfer (in the sender's array)\"}},\"pushNote(address,uint256)\":{\"params\":{\"_index\":\"index of note to approve transfer for\",\"_to\":\"address to approve note transfer for\"}},\"redeem(address,uint256[])\":{\"params\":{\"_indexes\":\"the note indexes to redeem\",\"_user\":\"the user to redeem for\"},\"returns\":{\"payout_\":\"    sum of payout sent, in Karsha\"}},\"redeemAll(address)\":{\"details\":\"if possible, query indexesFor() off-chain and input in redeem() to save gas\",\"params\":{\"_user\":\"user to redeem all notes for\"},\"returns\":{\"_0\":\"sum of payout sent, in Karsha\"}}},\"title\":\"Pana Bond Depository\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"close(uint256)\":{\"notice\":\"disable existing market\"},\"create(address,uint256[3],bool[4],uint256[2],uint32[2])\":{\"notice\":\"creates a new market type\"},\"currentControlVariable(uint256)\":{\"notice\":\"up to date control variable\"},\"currentDebt(uint256)\":{\"notice\":\"calculate debt factoring in decay\"},\"debtDecay(uint256)\":{\"notice\":\"amount of debt to decay from total debt for market ID\"},\"debtRatio(uint256)\":{\"notice\":\"calculate current ratio of debt to supply\"},\"deposit(uint256,uint256,uint256,address,address)\":{\"notice\":\"deposit quote tokens in exchange for a bond from a specified market\"},\"getOraclePriceView(uint256)\":{\"notice\":\"View Only - gets token price in quote tokens from oracle\"},\"getTreasuryRewards()\":{\"notice\":\"Manually fetch remaining rewards for Treasury\"},\"hasNonMaturedNotes(address)\":{\"notice\":\"checks whether the user has at least one unvested note\"},\"indexesFor(address)\":{\"notice\":\"all pending notes for user\"},\"isLive(uint256)\":{\"notice\":\"is a given market accepting deposits\"},\"liveMarkets()\":{\"notice\":\"returns an array of all active market IDs\"},\"liveMarketsFor(address)\":{\"notice\":\"returns an array of all active market IDs for a given quote token\"},\"marketPrice(uint256)\":{\"notice\":\"View Only Function - calculate current market price of quote token in base token\"},\"pendingFor(address,uint256)\":{\"notice\":\"calculate amount available for claim for a single note\"},\"pullNote(address,uint256)\":{\"notice\":\"transfer a note that has been approved by an address\"},\"pushNote(address,uint256)\":{\"notice\":\"approve an address to transfer a note\"},\"redeem(address,uint256[])\":{\"notice\":\"redeem notes for user\"},\"redeemAll(address)\":{\"notice\":\"redeem all redeemable markets for user\"},\"setPriceOracle(address)\":{\"notice\":\"sets price oracle for bond depository\"},\"setRewards(uint256,uint256)\":{\"notice\":\"set rewards for front end operators and DAO\"},\"setUserRewards()\":{\"notice\":\"toggle user having reward, only by governer\"},\"whitelist(address)\":{\"notice\":\"add or remove addresses from the reward whitelist\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bond/BondDepository.sol\":\"PanaBondDepository\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/access/PanaAccessControlled.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport \\\"../interfaces/IPanaAuthority.sol\\\";\\n\\nabstract contract PanaAccessControlled {\\n\\n    /* ========== EVENTS ========== */\\n\\n    event AuthorityUpdated(IPanaAuthority indexed authority);\\n\\n    string UNAUTHORIZED = \\\"UNAUTHORIZED\\\"; // save gas\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IPanaAuthority public authority;\\n\\n\\n    /* ========== Constructor ========== */\\n\\n    constructor(IPanaAuthority _authority) {\\n        authority = _authority;\\n        emit AuthorityUpdated(_authority);\\n    }\\n    \\n\\n    /* ========== MODIFIERS ========== */\\n    \\n    modifier onlyGovernor() {\\n        require(msg.sender == authority.governor(), UNAUTHORIZED);\\n        _;\\n    }\\n    \\n    modifier onlyGuardian() {\\n        require(msg.sender == authority.guardian(), UNAUTHORIZED);\\n        _;\\n    }\\n    \\n    modifier onlyPolicy() {\\n        require(msg.sender == authority.policy(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyVault() {\\n        require(msg.sender == authority.vault(), UNAUTHORIZED);\\n        _;\\n    }\\n    \\n    /* ========== GOV ONLY ========== */\\n    \\n    function setAuthority(IPanaAuthority _newAuthority) external onlyGovernor {\\n        authority = _newAuthority;\\n        emit AuthorityUpdated(_newAuthority);\\n    }\\n}\\n\",\"keccak256\":\"0x034e5499a57b5a80ba7315a07b54a800876e4e9143ec38855118dc2ff0af9311\",\"license\":\"AGPL-3.0-only\"},\"contracts/bond/BondDepository.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.10;\\n\\nimport \\\"../bond/NoteKeeper.sol\\\";\\n\\nimport \\\"../libraries/SafeERC20.sol\\\";\\n\\nimport \\\"../interfaces/IStaking.sol\\\";\\nimport \\\"../interfaces/ITreasury.sol\\\";\\nimport \\\"../interfaces/IERC20Metadata.sol\\\";\\nimport \\\"../interfaces/IBondDepository.sol\\\";\\nimport \\\"../interfaces/IPriceOracle.sol\\\";\\n\\nimport \\\"../interfaces/IUniswapV2ERC20.sol\\\";\\nimport \\\"../interfaces/IUniswapV2Pair.sol\\\";\\n\\n/// @title Pana Bond Depository\\n\\ncontract PanaBondDepository is IBondDepository, NoteKeeper {\\n/* ======== DEPENDENCIES ======== */\\n\\n  using SafeERC20 for IERC20;\\n\\n/* ======== EVENTS ======== */\\n\\n  event CreateMarket(uint256 indexed id, address indexed baseToken, address indexed quoteToken, uint256 initialPrice);\\n  event CloseMarket(uint256 indexed id);\\n  event Bond(uint256 indexed id, uint256 amount, uint256 price);\\n  event Tuned(uint256 indexed id, uint256 oldControlVariable, uint256 newControlVariable);\\n\\n/* ======== STATE VARIABLES ======== */\\n\\n  IPriceOracle public priceOracle;\\n\\n  // Storage\\n  Market[] public markets; // persistent market data\\n  Terms[] public terms; // deposit construction data\\n  Metadata[] public metadata; // extraneous market data\\n  mapping(uint256 => Adjustment) public adjustments; // control variable changes\\n\\n  // Queries\\n  mapping(address => uint256[]) public marketsForQuote; // market IDs for quote token\\n\\n  bool public concurrentBondsPermitted;\\n\\n/* ======== CONSTRUCTOR ======== */\\n\\n  constructor(\\n    IPanaAuthority _authority,\\n    IERC20 _pana,\\n    IKarsha _karsha,\\n    IStaking _staking,\\n    ITreasury _treasury\\n  ) NoteKeeper(_authority, _pana, _karsha, _staking, _treasury) {\\n    // save gas for users by bulk approving stake() transactions\\n    _pana.approve(address(_staking), 1e45);\\n  }\\n\\n  /**\\n   * @notice             sets price oracle for bond depository\\n   */\\n  function setPriceOracle(IPriceOracle _priceOracle) external onlyGovernor {\\n      priceOracle = _priceOracle;\\n  }\\n\\n/* ======== DEPOSIT ======== */\\n\\n  /**\\n   * @notice             deposit quote tokens in exchange for a bond from a specified market\\n   * @param _id          the ID of the market\\n   * @param _amount      the amount of quote token to spend\\n   * @param _maxPrice    the maximum price at which to buy\\n   * @param _user        the recipient of the payout\\n   * @param _referral    the front end operator address\\n   * @return payout_     the amount of KARSHA due\\n   * @return expiry_     the timestamp at which payout is redeemable\\n   * @return index_      the user index of the Note (used to redeem or query information)\\n   */\\n  function deposit(\\n    uint256 _id,\\n    uint256 _amount,\\n    uint256 _maxPrice,\\n    address _user,\\n    address _referral\\n  ) external override returns (\\n    uint256 payout_, \\n    uint256 expiry_,\\n    uint256 index_\\n  ) {\\n    require(concurrentBondsPermitted || !hasNonMaturedNotes(_user), \\\"Concurrent bonds are forbidden\\\");\\n\\n    Market storage market = markets[_id];\\n    Terms memory term = terms[_id];\\n    uint48 currentTime = uint48(block.timestamp);\\n\\n    // Markets end at a defined timestamp\\n    // |-------------------------------------| t\\n    require(currentTime < term.conclusion, \\\"Depository: market concluded\\\");\\n\\n    // Debt and the control variable decay over time\\n    _decay(_id, currentTime);\\n\\n    // Users input a maximum price, which protects them from price changes after\\n    // entering the mempool. max price is a slippage mitigation measure\\n    { // add block scoping to avoid stack too deep\\n    uint256 price = _marketPrice(_id);\\n\\n    require(price <= _maxPrice, \\\"Depository: more than max price\\\"); \\n\\n    /**\\n     * payout for the deposit = amount / price\\n     *\\n     * where\\n     * payout = PANA out\\n     * amount = quote tokens in\\n     * price = quote tokens : PANA \\n     *\\n     * 1e36 = PANA decimals (18) + price decimals (18)\\n     */\\n    payout_ = (_amount * 1e36 / price) / (10 ** metadata[_id].quoteDecimals);\\n\\n    // markets have a max payout amount, capping size because deposits\\n    // do not experience slippage. max payout is recalculated upon tuning\\n    require(payout_ <= market.maxPayout, \\\"Depository: max size exceeded\\\");\\n    \\n    /*\\n     * each market is initialized with a capacity\\n     *\\n     * this is either the number of PANA that the market can sell\\n     * (if capacity in quote is false), \\n     *\\n     * or the number of quote tokens that the market can buy\\n     * (if capacity in quote is true)\\n     */\\n    market.capacity -= market.capacityInQuote\\n      ? _amount\\n      : payout_;\\n\\n    /**\\n     * bonds mature with a cliff at a set timestamp\\n     * prior to the expiry timestamp, no payout tokens are accessible to the user\\n     * after the expiry timestamp, the entire payout can be redeemed\\n     *\\n     * there are two types of bonds: fixed-term and fixed-expiration\\n     *\\n     * fixed-term bonds mature in a set amount of time from deposit\\n     * i.e. term = 1 week. when alice deposits on day 1, her bond\\n     * expires on day 8. when bob deposits on day 2, his bond expires day 9.\\n     *\\n     * fixed-expiration bonds mature at a set timestamp\\n     * i.e. expiration = day 10. when alice deposits on day 1, her term\\n     * is 9 days. when bob deposits on day 2, his term is 8 days.\\n     */\\n    expiry_ = term.fixedTerm\\n      ? term.vesting + currentTime\\n      : term.vesting;\\n\\n    // markets keep track of how many quote tokens have been\\n    // purchased, and how much PANA has been sold\\n    market.purchased += _amount;\\n    market.sold += uint256(payout_);\\n\\n    // incrementing total debt raises the price of the next bond\\n    market.totalDebt += uint256(payout_);\\n\\n    emit Bond(_id, _amount, price);\\n    }\\n\\n    // send quote token to treasury, mint PANA, and stake the payout\\n    _sendToTreasury(_id, _amount, payout_, _referral);\\n\\n    /**\\n     * user data is stored as Notes. these are isolated array entries\\n     * storing the amount due, the time created, the time when payout\\n     * is redeemable, the time when payout was redeemed, and the ID\\n     * of the market deposited into\\n     */\\n    index_ = addNote(\\n      _user,\\n      payout_,\\n      uint48(expiry_),\\n      uint48(_id)\\n    );\\n\\n    // if max debt is breached, the market is closed \\n    // this a circuit breaker\\n    if (term.maxDebt < market.totalDebt) {\\n        market.capacity = 0;\\n        emit CloseMarket(_id);\\n    } else {\\n      // if market will continue, the control variable is tuned to hit targets on time\\n      _tune(_id, currentTime);\\n    }\\n  }\\n\\n  /**\\n    * @notice             sends funds to treasury and mints correct amount of PANA for payout\\n    * @param _id          the ID of the market\\n    * @param _amount      the amount of quote token being sent\\n    * @param _payout      the amount of PANA to be paid to depositor\\n    */\\n  function _sendToTreasury(uint256 _id, uint256 _amount, uint256 _payout, address _referral) internal {\\n      /**\\n        * payment is transferred to the treasury and PANA is minted for \\n        * the user payout. if the quoteToken is a reserve asset or LP\\n        * token, then it should be deposited to the treasury. if not,\\n        * it should be transferred.\\n        */\\n      Market memory market = markets[_id];\\n      \\n      uint256 toTreasury = 0;\\n      uint256 toRef = 0;\\n          \\n      if (market.quoteTokenIsReserve) {\\n          // transfer payment from user to this contract\\n          market.quoteToken.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n          // get rewards for Treasury and referral\\n          (toRef, toTreasury) = giveRewards(_payout, _referral);\\n          \\n          // calculate amount to mint\\n          uint256 toMint = _payout + toRef + toTreasury;\\n\\n          // deposit the payment to the treasury\\n          treasury.deposit(_amount, address(market.quoteToken), toMint);\\n      } else {\\n          // transfer payment from user to treasury directly\\n          market.quoteToken.safeTransferFrom(msg.sender, address(treasury), _amount);\\n          \\n          // get rewards for DAO, Treasury and referral\\n          (toRef, toTreasury) = giveRewards(_payout, _referral);\\n\\n          // mint PANA for payout and reward\\n          treasury.mint(address(this), _payout + toRef + toTreasury);\\n      }\\n\\n      if (toTreasury > 0) {\\n        // Rewards generated for Treasury should be sent to Treasury immediately\\n        sendRewardsToTreasury(toTreasury);\\n      }\\n\\n      // stake the payout while vesting\\n      staking.stake(address(this), _payout);\\n  }\\n\\n\\n  /**\\n   * @notice             decay debt, and adjust control variable if there is an active change\\n   * @param _id          ID of market\\n   * @param _time        uint48 timestamp (saves gas when passed in)\\n   */\\n  function _decay(uint256 _id, uint48 _time) internal {\\n\\n    // Debt decay\\n\\n    /*\\n     * Debt is a time-decayed sum of tokens spent in a market\\n     * Debt is added when deposits occur and removed over time\\n     * |\\n     * |    debt falls with\\n     * |   / \\\\  inactivity       / \\\\\\n     * | /     \\\\              /\\\\/    \\\\\\n     * |         \\\\           /         \\\\\\n     * |           \\\\      /\\\\/            \\\\\\n     * |             \\\\  /  and rises       \\\\\\n     * |                with deposits\\n     * |\\n     * |------------------------------------| t\\n     */\\n    markets[_id].totalDebt -= debtDecay(_id);\\n    metadata[_id].lastDecay = _time;\\n\\n\\n    // Control variable decay\\n\\n    // The bond control variable is continually tuned. When it is lowered (which\\n    // lowers the market price), the change is carried out smoothly over time.\\n    if (adjustments[_id].active) {\\n      Adjustment storage adjustment = adjustments[_id];\\n\\n      (uint256 adjustBy, uint48 secondsSince, bool stillActive) = _controlDecay(_id);\\n      terms[_id].controlVariable -= adjustBy;\\n\\n      if (stillActive) {\\n        adjustment.change -= adjustBy;\\n        adjustment.timeToAdjusted -= secondsSince;\\n        adjustment.lastAdjustment = _time;\\n      } else {\\n        adjustment.active = false;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice             auto-adjust control variable to hit capacity/spend target\\n   * @param _id          ID of market\\n   * @param _time        uint48 timestamp (saves gas when passed in)\\n   */\\n  function _tune(uint256 _id, uint48 _time) internal {\\n    Metadata memory meta = metadata[_id];\\n\\n    if (_time >= meta.lastTune + meta.tuneInterval) {\\n      Market memory market = markets[_id];\\n      \\n      // compute seconds remaining until market will conclude\\n      uint256 timeRemaining = terms[_id].conclusion - _time;\\n      uint256 price = _marketPrice(_id);\\n\\n      // standardize capacity into an base token amount\\n      // PANA decimals (18) + price decimals (18)\\n      uint256 capacity = market.capacityInQuote\\n        ? (market.capacity * 1e36 / price) / (10 ** meta.quoteDecimals)\\n        : market.capacity;\\n\\n      /**\\n       * calculate the correct payout to complete on time assuming each bond\\n       * will be max size in the desired deposit interval for the remaining time\\n       *\\n       * i.e. market has 10 days remaining. deposit interval is 1 day. capacity\\n       * is 10,000 PANA. max payout would be 1,000 PANA (10,000 * 1 / 10).\\n       */  \\n      markets[_id].maxPayout = uint256(capacity * meta.depositInterval / timeRemaining);\\n\\n      // calculate the ideal total debt to satisfy capacity in the remaining time\\n      uint256 targetDebt = capacity * meta.length / timeRemaining;\\n\\n      // derive a new control variable from the target debt and current supply\\n      uint256 newControlVariable = uint256(price * treasury.baseSupply() / targetDebt);\\n\\n      emit Tuned(_id, terms[_id].controlVariable, newControlVariable);\\n\\n      if (newControlVariable >= terms[_id].controlVariable) {\\n        terms[_id].controlVariable = newControlVariable;\\n      } else {\\n        // if decrease, control variable change will be carried out over the tune interval\\n        // this is because price will be lowered\\n        uint256 change = terms[_id].controlVariable - newControlVariable;\\n        adjustments[_id] = Adjustment(change, _time, meta.tuneInterval, true);\\n      }\\n      metadata[_id].lastTune = _time;\\n    }\\n  }\\n\\n/* ======== CREATE ======== */\\n\\n  /**\\n   * @notice             creates a new market type\\n   * @dev                current price should be in 18 decimals.\\n   * @param _quoteToken  token used to deposit\\n   * @param _market      [capacity (in PANA or quote), initial price / PANA (18 decimals), debt buffer (3 decimals)]\\n   * @param _booleans    [capacity in quote, quote is reserve, quote is LP, fixed term]\\n   * @param _terms       [vesting length (if fixed term) or vested timestamp, conclusion timestamp]\\n   * @param _intervals   [deposit interval (seconds), tune interval (seconds)]\\n   * @return id_         ID of new bond market\\n   */\\n  function create(\\n    IERC20 _quoteToken,\\n    uint256[3] memory _market,\\n    bool[4] memory _booleans,\\n    uint256[2] memory _terms,\\n    uint32[2] memory _intervals\\n  ) external override onlyPolicy returns (uint256 id_) {\\n\\n    // the length of the program, in seconds\\n    uint256 secondsToConclusion = _terms[1] - block.timestamp;\\n\\n    // the decimal count of the quote token\\n    uint256 decimals = IERC20Metadata(address(_quoteToken)).decimals();\\n\\n    /* \\n     * initial target debt is equal to capacity (this is the amount of debt\\n     * that will decay over in the length of the program if price remains the same).\\n     * it is converted into base token terms if passed in in quote token terms.\\n     *\\n     * 1e36 = PANA decimals (18) + initial price decimals (18)\\n     */\\n    uint256 targetDebt = uint256(_booleans[0] ?\\n    (_market[0] * 1e36 / _market[1]) / 10 ** decimals \\n    : _market[0]\\n    );\\n\\n    /*\\n     * max payout is the amount of capacity that should be utilized in a deposit\\n     * interval. for example, if capacity is 1,000 PANA, there are 10 days to conclusion, \\n     * and the preferred deposit interval is 1 day, max payout would be 100 PANA.\\n     */\\n    uint256 maxPayout = uint256(targetDebt * _intervals[0] / secondsToConclusion);\\n\\n    /*\\n     * max debt serves as a circuit breaker for the market. let's say the quote\\n     * token is a stablecoin, and that stablecoin depegs. without max debt, the\\n     * market would continue to buy until it runs out of capacity. this is\\n     * configurable with a 3 decimal buffer (1000 = 1% above initial price).\\n     * note that its likely advisable to keep this buffer wide.\\n     * note that the buffer is above 100%. i.e. 10% buffer = initial debt * 1.1\\n     */\\n    uint256 maxDebt = targetDebt + (targetDebt * _market[2] / 1e5); // 1e5 = 100,000. 10,000 / 100,000 = 10%.\\n\\n    /*\\n     * the control variable is set so that initial price equals the desired\\n     * initial price. the control variable is the ultimate determinant of price,\\n     * so we compute this last.\\n     *\\n     * price = control variable * debt ratio\\n     * debt ratio = total debt / supply\\n     * therefore, control variable = price / debt ratio\\n     */\\n    uint256 controlVariable = _market[1] * treasury.baseSupply() / targetDebt;\\n\\n    // depositing into, or getting info for, the created market uses this ID\\n    id_ = markets.length;\\n\\n    markets.push(Market({\\n      quoteToken: _quoteToken, \\n      quoteTokenIsReserve: _booleans[1],\\n      capacityInQuote: _booleans[0],\\n      capacity: _market[0],\\n      totalDebt: targetDebt, \\n      maxPayout: maxPayout,\\n      purchased: 0,\\n      sold: 0\\n    }));\\n\\n    terms.push(Terms({\\n      fixedTerm: _booleans[3], \\n      controlVariable: uint256(controlVariable),\\n      vesting: uint48(_terms[0]), \\n      conclusion: uint48(_terms[1]), \\n      maxDebt: uint256(maxDebt) \\n    }));\\n\\n    metadata.push(Metadata({\\n      lastTune: uint48(block.timestamp),\\n      lastDecay: uint48(block.timestamp),\\n      length: uint48(secondsToConclusion),\\n      depositInterval: _intervals[0],\\n      tuneInterval: _intervals[1],\\n      quoteDecimals: uint8(decimals),\\n      quoteIsLPToken: _booleans[2]\\n    }));\\n\\n    marketsForQuote[address(_quoteToken)].push(id_);\\n\\n    // Approve the treasury for quoteToken if quoteTokenIsReserve\\n    if (_booleans[1]) _quoteToken.approve(address(treasury), type(uint256).max);\\n\\n    emit CreateMarket(id_, address(pana), address(_quoteToken), _market[1]);\\n  }\\n\\n  /**\\n   * @notice             disable existing market\\n   * @param _id          ID of market to close\\n   */\\n  function close(uint256 _id) external override onlyPolicy {\\n    terms[_id].conclusion = uint48(block.timestamp);\\n    markets[_id].capacity = 0;\\n    emit CloseMarket(_id);\\n  }\\n\\n  function permitConcurrentBonds(bool permit) external onlyPolicy {\\n    concurrentBondsPermitted = permit;\\n  }\\n\\n  /**\\n   * @notice             gets token price in quote tokens from oracle\\n   * @param _id          ID of market\\n   * @return             oracle price for market in PANA decimals\\n   */\\n  function _getOraclePrice(uint256 _id) internal returns (uint256) {\\n    Market memory market = markets[_id];\\n    Metadata memory meta = metadata[_id];\\n\\n    if (meta.quoteIsLPToken) {\\n      /**\\n       * to find a price of 1 LP token, we need:\\n       * - call oracle to get the price of other token in Pana\\n       * - calculate LP total reserves in Pana\\n       * - divide LP total supply by total reserves \\n       */\\n\\n      IUniswapV2Pair pair = IUniswapV2Pair(address(market.quoteToken));\\n\\n      address token = pair.token0();\\n      address token1 = pair.token1();\\n      (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\\n      \\n      if (token == address(pana) || token == address(karsha)) {\\n        (token, token1) = (token1, token);\\n        (reserve0, reserve1) = (reserve1, reserve0);\\n      }\\n      else {\\n        require(token1 == address(pana) || token1 == address(karsha), \\\"Invalid pair\\\");\\n      }\\n\\n      uint256 tokenDecimals = IERC20Metadata(token).decimals();\\n\\n      // tokenPrice is in PANA decimals\\n      uint256 tokenPrice = priceOracle.consult(token, 10 ** tokenDecimals, token1);\\n\\n      // total reserves calculated in Pana/Karsha\\n      uint256 totalReserves = reserve1 + reserve0 * tokenPrice / (10 ** tokenDecimals);\\n\\n      // price of 1 pana/Karsha in LP token\\n      uint256 oraclePrice = pair.totalSupply() * 1e18 / totalReserves;\\n\\n      if (token1 == address(karsha)) {\\n        // adjust karsha price to pana per current index\\n        oraclePrice = oraclePrice / staking.index();\\n      }\\n\\n      return oraclePrice;\\n    }\\n    else {\\n      uint256 quoteDecimals = IERC20Metadata(address(market.quoteToken)).decimals();\\n\\n      // TWAP oracle returns price in terms of tokenOut but we need it in PANA decimals\\n      uint256 decimals = IERC20Metadata(address(pana)).decimals();\\n      if (decimals > quoteDecimals) {\\n        decimals += decimals - quoteDecimals;\\n      }\\n      else {\\n        decimals -= quoteDecimals - decimals;\\n      }\\n\\n      return priceOracle.consult(address(pana), 10 ** decimals, address(market.quoteToken));\\n    }\\n  }\\n\\n  /**\\n   * @notice                  calculate current market price of quote token in base token\\n   * @dev                     see marketPrice() for explanation of price computation\\n   * @dev                     uses info from storage because data has been updated before call (vs marketPrice())\\n   * @param _id               market ID\\n   * @return                  price for market in PANA decimals\\n   */ \\n  function _marketPrice(uint256 _id) internal returns (uint256) {\\n    uint256 price =  terms[_id].controlVariable \\n      * _debtRatio(_id) \\n      / (10 ** metadata[_id].quoteDecimals);\\n\\n    // check oracle price and select minimum\\n    if (address(priceOracle) != address(0)) {\\n      uint256 oraclePrice = _getOraclePrice(_id);\\n      if (oraclePrice < price) {\\n        price = oraclePrice;\\n      }\\n    }\\n\\n    return price;  \\n  }\\n\\n\\n/* ======== EXTERNAL VIEW ======== */\\n\\n  /**\\n   * @notice             calculate current ratio of debt to supply\\n   * @dev                uses current debt, which accounts for debt decay since last deposit (vs _debtRatio())\\n   * @param _id          ID of market\\n   * @return             debt ratio for market in quote decimals\\n   */\\n  function debtRatio(uint256 _id) public view override returns (uint256) {\\n    return \\n      currentDebt(_id)\\n      * (10 ** metadata[_id].quoteDecimals)\\n      / treasury.baseSupply(); \\n  }\\n\\n  /**\\n   * @notice             calculate debt factoring in decay\\n   * @dev                accounts for debt decay since last deposit\\n   * @param _id          ID of market\\n   * @return             current debt for market in PANA decimals\\n   */\\n  function currentDebt(uint256 _id) public view override returns (uint256) {\\n    return markets[_id].totalDebt - debtDecay(_id);\\n  }\\n\\n  /**\\n   * @notice             amount of debt to decay from total debt for market ID\\n   * @param _id          ID of market\\n   * @return             amount of debt to decay\\n   */\\n  function debtDecay(uint256 _id) public view override returns (uint256) {\\n    Metadata memory meta = metadata[_id];\\n\\n    uint256 secondsSince = block.timestamp - meta.lastDecay;\\n\\n    return uint256(markets[_id].totalDebt * secondsSince / meta.length);\\n  }\\n\\n  /**\\n   * @notice             up to date control variable\\n   * @dev                accounts for control variable adjustment\\n   * @param _id          ID of market\\n   * @return             control variable for market in PANA decimals\\n   */\\n  function currentControlVariable(uint256 _id) public view returns (uint256) {\\n    (uint256 decay,,) = _controlDecay(_id);\\n    return terms[_id].controlVariable - decay;\\n  }\\n\\n  /**\\n   * @notice             is a given market accepting deposits\\n   * @param _id          ID of market\\n   */\\n  function isLive(uint256 _id) public view override returns (bool) {\\n    return (markets[_id].capacity != 0 && terms[_id].conclusion > block.timestamp);\\n  }\\n\\n  /**\\n   * @notice returns an array of all active market IDs\\n   */\\n  function liveMarkets() external view override returns (uint256[] memory) {\\n    uint256 num;\\n    for (uint256 i = 0; i < markets.length; i++) {\\n      if (isLive(i)) num++;\\n    }\\n\\n    uint256[] memory ids = new uint256[](num);\\n    uint256 nonce;\\n    for (uint256 i = 0; i < markets.length; i++) {\\n      if (isLive(i)) {\\n        ids[nonce] = i;\\n        nonce++;\\n      }\\n    }\\n    return ids;\\n  }\\n\\n  /**\\n   * @notice             returns an array of all active market IDs for a given quote token\\n   * @param _token       quote token to check for\\n   */\\n  function liveMarketsFor(address _token) external view override returns (uint256[] memory) {\\n    uint256[] memory mkts = marketsForQuote[_token];\\n    uint256 num;\\n\\n    for (uint256 i = 0; i < mkts.length; i++) {\\n      if (isLive(mkts[i])) num++;\\n    }\\n\\n    uint256[] memory ids = new uint256[](num);\\n    uint256 nonce;\\n\\n    for (uint256 i = 0; i < mkts.length; i++) {\\n      if (isLive(mkts[i])) {\\n        ids[nonce] = mkts[i];\\n        nonce++;\\n      }\\n    }\\n    return ids;\\n  }\\n\\n  /**\\n   * @notice             View Only - gets token price in quote tokens from oracle\\n   * @param _id          ID of market\\n   * @return             oracle price for market in PANA decimals\\n   */\\n  function getOraclePriceView(uint256 _id) public view returns (uint256) {\\n    Market memory market = markets[_id];\\n    Metadata memory meta = metadata[_id];\\n\\n    if (meta.quoteIsLPToken) {\\n      /**\\n       * to find a price of 1 LP token, we need:\\n       * - call oracle to get the price of other token in Pana\\n       * - calculate LP total reserves in Pana\\n       * - divide LP total supply by total reserves \\n       */\\n\\n      IUniswapV2Pair pair = IUniswapV2Pair(address(market.quoteToken));\\n\\n      address token = pair.token0();\\n      address token1 = pair.token1();\\n      (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\\n      \\n      if (token == address(pana) || token == address(karsha)) {\\n        (token, token1) = (token1, token);\\n        (reserve0, reserve1) = (reserve1, reserve0);\\n      }\\n      else {\\n        require(token1 == address(pana) || token1 == address(karsha), \\\"Invalid pair\\\");\\n      }\\n\\n      uint256 tokenDecimals = IERC20Metadata(token).decimals();\\n\\n      // tokenPrice is in PANA decimals\\n      uint256 tokenPrice = priceOracle.consultReadonly(token, 10 ** tokenDecimals, token1);\\n\\n      // total reserves calculated in Pana/Karsha\\n      uint256 totalReserves = reserve1 + reserve0 * tokenPrice / (10 ** tokenDecimals);\\n\\n      // price of 1 pana/Karsha in LP token\\n      uint256 oraclePrice = pair.totalSupply() * 1e18 / totalReserves;\\n\\n      if (token1 == address(karsha)) {\\n        // adjust karsha price to pana per current index\\n        oraclePrice = oraclePrice / staking.index();\\n      }\\n\\n      return oraclePrice;\\n    }\\n    else {\\n      uint256 quoteDecimals = IERC20Metadata(address(market.quoteToken)).decimals();\\n\\n      // TWAP oracle returns price in terms of tokenOut but we need it in PANA decimals\\n      uint256 decimals = IERC20Metadata(address(pana)).decimals();\\n      if (decimals > quoteDecimals) {\\n        decimals += decimals - quoteDecimals;\\n      }\\n      else {\\n        decimals -= quoteDecimals - decimals;\\n      }\\n\\n      return priceOracle.consultReadonly(address(pana), 10 ** decimals, address(market.quoteToken));\\n    }\\n  }\\n\\n  /**\\n   * @notice                  View Only Function - calculate current market price of quote token in base token\\n   * @param _id               market ID\\n   * @return                  price for market in PANA decimals\\n   */ \\n  function marketPrice(uint256 _id) external view returns (uint256) {\\n    uint256 price =  currentControlVariable(_id) \\n      * debtRatio(_id) \\n      / (10 ** metadata[_id].quoteDecimals);\\n\\n    // check oracle price and select minimum\\n    if (address(priceOracle) != address(0)) {\\n      uint256 oraclePrice = getOraclePriceView(_id);\\n      if (oraclePrice < price) {\\n        price = oraclePrice;\\n      }\\n    }\\n\\n    return price;  \\n  }\\n\\n  /* ======== INTERNAL VIEW ======== */\\n\\n  /**\\n   * @notice                  calculate debt factoring in decay\\n   * @dev                     uses info from storage because data has been updated before call (vs debtRatio())\\n   * @param _id               market ID\\n   * @return                  current debt for market in quote decimals\\n   */ \\n  function _debtRatio(uint256 _id) internal view returns (uint256) {\\n    return \\n      markets[_id].totalDebt\\n      * (10 ** metadata[_id].quoteDecimals)\\n      / treasury.baseSupply(); \\n  }\\n\\n  /**\\n   * @notice                  amount to decay control variable by\\n   * @param _id               ID of market\\n   * @return decay_           change in control variable\\n   * @return secondsSince_    seconds since last change in control variable\\n   * @return active_          whether or not change remains active\\n   */ \\n  function _controlDecay(uint256 _id) internal view returns (uint256 decay_, uint48 secondsSince_, bool active_) {\\n    Adjustment memory info = adjustments[_id];\\n    if (!info.active) return (0, 0, false);\\n\\n    secondsSince_ = uint48(block.timestamp) - info.lastAdjustment;\\n\\n    active_ = secondsSince_ < info.timeToAdjusted;\\n    decay_ = active_ \\n      ? info.change * secondsSince_ / info.timeToAdjusted\\n      : info.change;\\n  }\\n}\",\"keccak256\":\"0x0662c561844cbb302c494636a2df215502fa497526f219967f5c484f7ccecbe1\",\"license\":\"AGPL-3.0\"},\"contracts/bond/FrontEndRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.10;\\n\\nimport \\\"../access/PanaAccessControlled.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\nabstract contract FrontEndRewarder is PanaAccessControlled {\\n\\n  /* ========= STATE VARIABLES ========== */\\n\\n  uint256 public refReward; // % reward for referrer (3 decimals: 100 = 1%)\\n  uint256 public treasuryReward; // % reward for Treasury (3 decimals: 100 = 1%)\\n  mapping(address => uint256) public rewards; // front end operator rewards\\n  mapping(address => bool) public whitelisted; // whitelisted status for operators\\n\\n  IERC20 internal immutable pana; // reward token\\n  bool public allowUserRewards; //toggle user reward\\n\\n  constructor(\\n    IPanaAuthority _authority, \\n    IERC20 _pana\\n  ) PanaAccessControlled(_authority) {\\n    pana = _pana;\\n  }\\n\\n  /* ========= EXTERNAL FUNCTIONS ========== */\\n\\n  // pay reward to front end operator\\n  function getReward() external {\\n    uint256 reward = rewards[msg.sender];\\n\\n    rewards[msg.sender] = 0;\\n    pana.transfer(msg.sender, reward);\\n  }\\n  \\n  /**\\n  * @notice toggle user having reward, only by governer\\n  */\\n  function setUserRewards() external onlyGovernor {        \\n      allowUserRewards = !allowUserRewards;\\n  }\\n\\n  /* ========= INTERNAL ========== */\\n\\n  /** \\n   * @notice adds rewards amount for front end operators and treasury based on _payout\\n   */\\n  function giveRewards(\\n    uint256 _payout,\\n    address _referral\\n  ) internal returns (uint256 toRef, uint256 toTreasury) {\\n    // first we calculate rewards paid to front end operator (referrer) and to the treasurer\\n    toRef = _payout * refReward / 1e4;\\n    toTreasury = _payout * treasuryReward / 1e4;\\n\\n    // and store them in our rewards mapping\\n    if (whitelisted[_referral]) {\\n      if(allowUserRewards) {\\n        rewards[msg.sender] += toRef / 2;\\n        rewards[_referral] += toRef - (toRef/ 2);\\n      }\\n      else {\\n        rewards[_referral] += toRef;\\n      }\\n      rewards[authority.vault()] += toTreasury;\\n    } else { \\n      // the Treasury receives both rewards if referrer is not whitelisted\\n      rewards[authority.vault()] += toTreasury + toRef;\\n    }\\n  }\\n\\n  /**\\n   * @notice Send rewards to treasury which was minted as per giveRewards logic\\n   */\\n  function sendRewardsToTreasury(uint256 _toTreasury) internal {\\n    uint256 reward = rewards[authority.vault()];\\n\\n    if (reward > 0 && reward >= _toTreasury) {\\n      rewards[authority.vault()] -= _toTreasury;\\n      pana.transfer(authority.vault(), _toTreasury);\\n    }\\n  }\\n\\n  /**\\n   * @notice set rewards for front end operators and DAO\\n   */\\n  function setRewards(uint256 _toFrontEnd, uint256 _toTreasury) external onlyGovernor {\\n    refReward = _toFrontEnd;\\n    treasuryReward = _toTreasury;\\n  }\\n\\n  /**\\n   * @notice add or remove addresses from the reward whitelist\\n   */\\n  function whitelist(address _operator) external onlyPolicy {\\n    whitelisted[_operator] = !whitelisted[_operator];\\n  }\\n\\n  /**\\n   * @notice Manually fetch remaining rewards for Treasury\\n   */\\n  function getTreasuryRewards() external onlyGovernor {\\n    uint256 reward = rewards[authority.vault()];\\n\\n    if (reward > 0) {\\n      rewards[authority.vault()] = 0;\\n      pana.transfer(authority.vault(), reward);\\n    }\\n  }\\n}\",\"keccak256\":\"0x825979609a04e7ac0c308114682235dc0f3e5592a4398bf7134ace210ccff69d\",\"license\":\"AGPL-3.0-only\"},\"contracts/bond/NoteKeeper.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.10;\\n\\nimport \\\"../bond/FrontEndRewarder.sol\\\";\\n\\nimport \\\"../interfaces/IKarsha.sol\\\";\\nimport \\\"../interfaces/IStaking.sol\\\";\\nimport \\\"../interfaces/ITreasury.sol\\\";\\nimport \\\"../interfaces/INoteKeeper.sol\\\";\\n\\nabstract contract NoteKeeper is INoteKeeper, FrontEndRewarder {\\n\\n  mapping(address => Note[]) public notes; // user deposit data\\n  mapping(address => mapping(uint256 => address)) private noteTransfers; // change note ownership\\n\\n  IKarsha internal immutable karsha;\\n  IStaking internal immutable staking;\\n  ITreasury internal treasury;\\n\\n  constructor (\\n    IPanaAuthority _authority,\\n    IERC20 _pana,\\n    IKarsha _karsha,\\n    IStaking _staking,\\n    ITreasury _treasury\\n  ) FrontEndRewarder(_authority, _pana) {\\n    karsha = _karsha;\\n    staking = _staking;\\n    treasury = _treasury;\\n  }\\n\\n  // if treasury address changes on authority, update it\\n  function updateTreasury() external {\\n    require(\\n      msg.sender == authority.governor() ||\\n      msg.sender == authority.guardian() ||\\n      msg.sender == authority.policy(),\\n      \\\"Only authorized\\\"\\n    );\\n    treasury = ITreasury(authority.vault());\\n  }\\n\\n/* ========== ADD ========== */\\n\\n  /**\\n   * @notice             adds a new Note for a user, stores the front end & DAO rewards, and mints & stakes payout & rewards\\n   * @param _user        the user that owns the Note\\n   * @param _payout      the amount of Pana due to the user\\n   * @param _expiry      the timestamp when the Note is redeemable\\n   * @param _marketID    the ID of the market deposited into\\n   * @return index_      the index of the Note in the user's array\\n   */\\n  function addNote(\\n    address _user, \\n    uint256 _payout, \\n    uint48 _expiry, \\n    uint48 _marketID\\n  ) internal returns (uint256 index_) {\\n    // the index of the note is the next in the user's array\\n    index_ = notes[_user].length;\\n\\n    // the new note is pushed to the user's array\\n    notes[_user].push(\\n      Note({\\n        payout: karsha.balanceTo(_payout),\\n        created: uint48(block.timestamp),\\n        matured: _expiry,\\n        redeemed: 0,\\n        marketID: _marketID\\n      })\\n    );\\n  }\\n\\n/* ========== REDEEM ========== */\\n\\n  /**\\n   * @notice             redeem notes for user\\n   * @param _user        the user to redeem for\\n   * @param _indexes     the note indexes to redeem\\n   * @return payout_     sum of payout sent, in Karsha\\n   */\\n  function redeem(address _user, uint256[] memory _indexes) public override returns (uint256 payout_) {\\n    uint48 time = uint48(block.timestamp);\\n\\n    for (uint256 i = 0; i < _indexes.length; i++) {\\n      (uint256 pay, bool matured) = pendingFor(_user, _indexes[i]);\\n\\n      if (matured) {\\n        notes[_user][_indexes[i]].redeemed = time; // mark as redeemed\\n        payout_ += pay;\\n      }\\n    }\\n\\n    karsha.transfer(_user, payout_); // send payout as Karsha\\n  }\\n\\n  /**\\n   * @notice             redeem all redeemable markets for user\\n   * @dev                if possible, query indexesFor() off-chain and input in redeem() to save gas\\n   * @param _user        user to redeem all notes for\\n   * @return             sum of payout sent, in Karsha\\n   */ \\n  function redeemAll(address _user) external override returns (uint256) {\\n    return redeem(_user, indexesFor(_user));\\n  }\\n\\n/* ========== TRANSFER ========== */\\n\\n  /**\\n   * @notice             approve an address to transfer a note\\n   * @param _to          address to approve note transfer for\\n   * @param _index       index of note to approve transfer for\\n   */ \\n  function pushNote(address _to, uint256 _index) external override {\\n    require(notes[msg.sender][_index].created != 0, \\\"Depository: note not found\\\");\\n    noteTransfers[msg.sender][_index] = _to;\\n  }\\n\\n  /**\\n   * @notice             transfer a note that has been approved by an address\\n   * @param _from        the address that approved the note transfer\\n   * @param _index       the index of the note to transfer (in the sender's array)\\n   */ \\n  function pullNote(address _from, uint256 _index) external override returns (uint256 newIndex_) {\\n    require(noteTransfers[_from][_index] == msg.sender, \\\"Depository: transfer not found\\\");\\n    require(notes[_from][_index].redeemed == 0, \\\"Depository: note redeemed\\\");\\n\\n    newIndex_ = notes[msg.sender].length;\\n    notes[msg.sender].push(notes[_from][_index]);\\n\\n    delete notes[_from][_index];\\n  }\\n\\n/* ========== VIEW ========== */\\n\\n  // Note info\\n\\n  /**\\n   * @notice             all pending notes for user\\n   * @param _user        the user to query notes for\\n   * @return             the pending notes for the user\\n   */\\n  function indexesFor(address _user) public view override returns (uint256[] memory) {\\n    Note[] memory info = notes[_user];\\n\\n    uint256 length;\\n    for (uint256 i = 0; i < info.length; i++) {\\n        if (info[i].redeemed == 0 && info[i].payout != 0) length++;\\n    }\\n\\n    uint256[] memory indexes = new uint256[](length);\\n    uint256 position;\\n\\n    for (uint256 i = 0; i < info.length; i++) {\\n        if (info[i].redeemed == 0 && info[i].payout != 0) {\\n            indexes[position] = i;\\n            position++;\\n        }\\n    }\\n\\n    return indexes;\\n  }\\n\\n  /**\\n   * @notice             checks whether the user has at least one unvested note\\n   * @param _user        the user that the note belongs to\\n   *@return              if the user has at least one unvested note\\n   */\\n  function hasNonMaturedNotes(address _user) public view override returns (bool) {\\n    Note[] memory info = notes[_user];\\n\\n    for (uint256 i = 0; i < info.length; i++) {\\n        if (info[i].redeemed == 0 && info[i].payout != 0 && info[i].matured > block.timestamp) {\\n          return true;\\n        } \\n    }\\n\\n    return false;\\n  }\\n\\n  /**\\n   * @notice             calculate amount available for claim for a single note\\n   * @param _user        the user that the note belongs to\\n   * @param _index       the index of the note in the user's array\\n   * @return payout_     the payout due, in Karsha\\n   * @return matured_    if the payout can be redeemed\\n\\n   */\\n  function pendingFor(address _user, uint256 _index) public view override returns (uint256 payout_, bool matured_) {\\n    Note memory note = notes[_user][_index];\\n    payout_ = note.payout;\\n    matured_ = note.redeemed == 0 && note.matured <= block.timestamp && note.payout != 0;\\n  }\\n}\\n\",\"keccak256\":\"0x15595812440d2a44d59faf379f4353e79448253841060abe73f8a7acab2fde46\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/IBondDepository.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IBondDepository {\\n\\n  // Info about each type of market\\n  struct Market {\\n    uint256 capacity; // capacity remaining\\n    IERC20 quoteToken; // token to accept as payment\\n    bool capacityInQuote; // capacity limit is in payment token (true) or in PANA (false, default)\\n    bool quoteTokenIsReserve; // quoteToken is a reserve asset/PANA LP pair (true) or not a reserve asset (false)\\n    uint256 totalDebt; // total debt from market\\n    uint256 maxPayout; // max tokens in/out (determined by capacityInQuote false/true, respectively)\\n    uint256 sold; // base tokens out\\n    uint256 purchased; // quote tokens in\\n  }\\n\\n  // Info for creating new markets\\n  struct Terms {\\n    bool fixedTerm; // fixed term or fixed expiration\\n    uint256 controlVariable; // scaling variable for price\\n    uint48 vesting; // length of time from deposit to maturity if fixed-term\\n    uint48 conclusion; // timestamp when market no longer offered (doubles as time when market matures if fixed-expiry)\\n    uint256 maxDebt; // 18 decimal debt maximum in PANA\\n  }\\n\\n  // Additional info about market.\\n  struct Metadata {\\n    uint48 lastTune; // last timestamp when control variable was tuned\\n    uint48 lastDecay; // last timestamp when market was created and debt was decayed\\n    uint48 length; // time from creation to conclusion. used as speed to decay debt.\\n    uint48 depositInterval; // target frequency of deposits\\n    uint48 tuneInterval; // frequency of tuning\\n    uint8 quoteDecimals; // decimals of quote token\\n    bool quoteIsLPToken; // quote token is liquidity pair token\\n  }\\n\\n  // Control variable adjustment data\\n  struct Adjustment {\\n    uint256 change;\\n    uint48 lastAdjustment;\\n    uint48 timeToAdjusted;\\n    bool active;\\n  }\\n\\n\\n  /**\\n   * @notice deposit market\\n   * @param _bid uint256\\n   * @param _amount uint256\\n   * @param _maxPrice uint256\\n   * @param _user address\\n   * @param _referral address\\n   * @return payout_ uint256\\n   * @return expiry_ uint256\\n   * @return index_ uint256\\n   */\\n  function deposit(\\n    uint256 _bid,\\n    uint256 _amount,\\n    uint256 _maxPrice,\\n    address _user,\\n    address _referral\\n  ) external returns (\\n    uint256 payout_, \\n    uint256 expiry_,\\n    uint256 index_\\n  );\\n\\n  function create (\\n    IERC20 _quoteToken, // token used to deposit\\n    uint256[3] memory _market, // [capacity, initial price]\\n    bool[4] memory _booleans, // [capacity in quote, quote is reserve, quote is LP, fixed term]\\n    uint256[2] memory _terms, // [vesting, conclusion]\\n    uint32[2] memory _intervals // [deposit interval, tune interval]\\n  ) external returns (uint256 id_);\\n  function close(uint256 _id) external;\\n\\n  function isLive(uint256 _bid) external view returns (bool);\\n  function liveMarkets() external view returns (uint256[] memory);\\n  function liveMarketsFor(address _quoteToken) external view returns (uint256[] memory);\\n  function marketPrice(uint256 _bid) external view returns (uint256);\\n  function currentDebt(uint256 _bid) external view returns (uint256);\\n  function debtRatio(uint256 _bid) external view returns (uint256);\\n  function debtDecay(uint256 _bid) external view returns (uint256);\\n}\",\"keccak256\":\"0xb08c9358a154b9388c705cf977cff88fd17ec8c41ab007cebabdce590519d22f\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa142440b0e1c51ece24b6d074ac883b34e1f33a2472773eeaaf4871875904d09\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IERC20Metadata is IERC20 {\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\",\"keccak256\":\"0x6dfa58ba4a241b2201f3ecb3ba26345ce4dd66f0a553f18b2a284341f5aacd72\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IKarsha.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IKarsha is IERC20 {\\n  function mint(address _to, uint256 _amount) external;\\n\\n  function burn(address _from, uint256 _amount) external;\\n\\n  function index() external view returns (uint256);\\n  \\n  function balanceOfPANA(address _address) external view returns (uint256);\\n\\n  function balanceFrom(uint256 _amount) external view returns (uint256);\\n\\n  function balanceTo(uint256 _amount) external view returns (uint256);\\n\\n  function transfer(address _to,uint256 _amount) external override returns (bool);\\n  function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool);\\n}\\n\",\"keccak256\":\"0x4eb885428aff0f1a2480f65a941644c73fda6fb733398b97375babf12abe928a\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/INoteKeeper.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\ninterface INoteKeeper {\\n  // Info for market note\\n  struct Note {\\n    uint256 payout; // KARSHA remaining to be paid\\n    uint48 created; // time market was created\\n    uint48 matured; // timestamp when market is matured\\n    uint48 redeemed; // time market was redeemed\\n    uint48 marketID; // market ID of deposit. uint48 to avoid adding a slot.\\n  }\\n\\n  function redeem(address _user, uint256[] memory _indexes) external returns (uint256);\\n  function redeemAll(address _user) external returns (uint256);\\n  function pushNote(address to, uint256 index) external;\\n  function pullNote(address from, uint256 index) external returns (uint256 newIndex_);\\n\\n  function hasNonMaturedNotes(address _user) external view returns (bool);\\n  function indexesFor(address _user) external view returns (uint256[] memory);\\n  function pendingFor(address _user, uint256 _index) external view returns (uint256 payout_, bool matured_);\\n}\",\"keccak256\":\"0x17a3e26e127155eb9216f0eaa76e80d79ce923fdf3a279be7eb431df47aa2dee\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/IPanaAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IPanaAuthority {\\n    /* ========== EVENTS ========== */\\n    \\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event DistributionVaultPushed(address indexed from, address indexed to, bool _effectiveImmediately); \\n\\n    event GovernorPulled(address indexed from, address indexed to);\\n    event GuardianPulled(address indexed from, address indexed to);\\n    event PolicyPulled(address indexed from, address indexed to);\\n    event VaultPulled(address indexed from, address indexed to);\\n    event DistributionVaultPulled(address indexed from, address indexed to);\\n\\n    /* ========== VIEW ========== */\\n    \\n    function governor() external view returns (address);\\n    function guardian() external view returns (address);\\n    function policy() external view returns (address);\\n    function vault() external view returns (address);\\n    function distributionVault() external view returns (address);\\n}\",\"keccak256\":\"0xc49dc603c39b5cbd2e18e02176ef489bd89dde552495236e9798ae49a9f2e875\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IPriceOracle {\\n    function consult(address tokenIn, uint amountIn, address tokenOut) external returns (uint amountOut);\\n    function consultReadonly(address tokenIn, uint amountIn, address tokenOut) external view returns (uint amountOut);\\n}\",\"keccak256\":\"0x89007c980ea6b80d11137f91948147ea7cb56d0efbdf8e2400b8eecc57aed118\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IStaking {\\n    function stake(\\n        address _to,\\n        uint256 _amount\\n    ) external returns (uint256);\\n\\n    function claim(address _recipient, bool _rebasing) external returns (uint256);\\n\\n    function forfeit() external returns (uint256);\\n\\n    function toggleLock() external;\\n\\n    function unstake(\\n        address _to,\\n        uint256 _amount,\\n        bool _trigger\\n    ) external returns (uint256);\\n\\n    function rebase() external;\\n\\n    function index() external view returns (uint256);\\n\\n    function stakingSupply() external view returns (uint256);\\n\\n    function setBondDepositor(address _bondDepositor) external;\\n\\n    function allowExternalStaking(bool allow) external;\\n}\\n\",\"keccak256\":\"0x8d134fb8301c277a010cc5a3d1e34536135d91fceb7176d87c3dea5f23010837\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface ITreasury {\\n    function deposit(\\n        uint256 _amount,\\n        address _token,\\n        uint256 _payout\\n    ) external returns (uint256);\\n\\n    function depositForRedemption(uint _amount, address _token) external returns (uint256 send_);\\n\\n    function tokenValue(address _token, uint256 _amount) external view returns (uint256 value_);\\n\\n    function mint(address _recipient, uint256 _amount) external;\\n\\n    function manage(address _token, uint256 _amount) external;\\n\\n    function baseSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x32c6b5dc61e7dad246c0abc23ed009df87d9a43eab0a53252466b90d9751fe73\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IUniswapV2ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IUniswapV2ERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\",\"keccak256\":\"0xa8bc04fe333cf795f2882098679f5026bccd6d10c173f94a6f7e9d5c064e9284\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IUniswapV2ERC20.sol\\\";\\n\\ninterface IUniswapV2Pair is IUniswapV2ERC20 {\\n    function token0() external pure returns (address);\\n    function token1() external pure returns (address);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function mint(address to) external returns (uint liquidity);\\n    function sync() external;\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n}\",\"keccak256\":\"0xcc1533386ddac7a89c40271e937fa4c765772530a19561bf5bbf866e26ebc355\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\n\\n/// @notice Safe IERC20 and ETH transfer library that safely handles missing return values.\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/TransferHelper.sol)\\n/// Taken from Solmate\\nlibrary SafeERC20 {\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.approve.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        (bool success, ) = to.call{value: amount}(new bytes(0));\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n}\",\"keccak256\":\"0xbdd4f99088de7c23383b043055646de013b1312166a9bfa05e3995cdcf7ae022\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x610120604052600c60e08190526b15539055551213d49256915160a21b6101009081526200003191600091906200017b565b503480156200003f57600080fd5b5060405162005e1238038062005e1283398101604081905262000062916200023a565b600180546001600160a01b0319166001600160a01b038716908117909155604051869186918691869186918691869183917f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a2506001600160a01b0390811660805293841660a0525090821660c052600980546001600160a01b03191691831691909117905560405163095ea7b360e01b81528582166004820152722cd76fe086b93ce2f768a00b22a000000000006024820152908716925063095ea7b391506044016020604051808303816000875af115801562000149573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200016f9190620002ba565b50505050505062000322565b8280546200018990620002e5565b90600052602060002090601f016020900481019282620001ad5760008555620001f8565b82601f10620001c857805160ff1916838001178555620001f8565b82800160010185558215620001f8579182015b82811115620001f8578251825591602001919060010190620001db565b50620002069291506200020a565b5090565b5b808211156200020657600081556001016200020b565b6001600160a01b03811681146200023757600080fd5b50565b600080600080600060a086880312156200025357600080fd5b8551620002608162000221565b6020870151909550620002738162000221565b6040870151909450620002868162000221565b6060870151909350620002998162000221565b6080870151909250620002ac8162000221565b809150509295509295909350565b600060208284031215620002cd57600080fd5b81518015158114620002de57600080fd5b9392505050565b600181811c90821680620002fa57607f821691505b602082108114156200031c57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c051615a42620003d0600039600081816131b20152613d7c015260008181612ac001528181612ece01528181612f4d0152818161317801528181613e3c0152818161483e01526148bd015260008181610b37015281816112a70152818161204f01528181612e9301528181612f12015281816132c001528181613395015281816148030152818161488201528181614a8301528181614b58015261510e0152615a426000f3fe608060405234801561001057600080fd5b50600436106102de5760003560e01c8063abbf4b1711610186578063c9b67af5116100e3578063de238ef711610097578063e481b26511610071578063e481b26514610776578063f1b7dc7814610789578063f3191a461461079c57600080fd5b8063de238ef7146106bc578063e0b117ff146106cf578063e3684e391461071757600080fd5b8063d2390aa2116100c8578063d2390aa214610673578063d6db4df814610686578063d936547e1461069957600080fd5b8063c9b67af514610658578063cdcb28051461066057600080fd5b8063bf7e214f1161013a578063c0aa0e8a1161011f578063c0aa0e8a146105e0578063c3e0fb1c14610628578063c913dc591461065057600080fd5b8063bf7e214f146105ba578063c0680e20146105cd57600080fd5b8063bc3b2b121161016b578063bc3b2b121461051c578063bcb2966714610594578063be399be5146105a757600080fd5b8063abbf4b17146104ad578063b1283e77146104c057600080fd5b80634889bf6d1161023f5780637c770aae116101f35780639c769787116101cd5780639c7697871461048a578063a2594ea914610492578063a42206101461049a57600080fd5b80637c770aae1461043c5780638ecdb5e11461046a5780639b19251a1461047757600080fd5b8063649144391161022457806364914439146103f6578063654e51e7146104165780637a9e5e4b1461042957600080fd5b80634889bf6d146103d0578063530e784f146103e357600080fd5b80631e8014db11610296578063275074581161027b57806327507458146103a25780633adec5a7146103b55780633d18b912146103c857600080fd5b80631e8014db146103645780632630c12f1461037757600080fd5b80630a9d85eb116102c75780630a9d85eb146103335780630aebeb4e146103465780631def07081461035b57600080fd5b80630446bfb6146102e35780630700037d14610305575b600080fd5b6010546102f09060ff1681565b60405190151581526020015b60405180910390f35b61032561031336600461520e565b60046020526000908152604090205481565b6040519081526020016102fc565b61032561034136600461522b565b6107a5565b61035961035436600461522b565b6107ec565b005b61032560035481565b610359610372366004615252565b61093b565b600a5461038a906001600160a01b031681565b6040516001600160a01b0390911681526020016102fc565b6102f06103b036600461522b565b6109fa565b6103256103c336600461522b565b610a6b565b610359610afc565b6103256103de366004615406565b610ba9565b6103596103f136600461520e565b611317565b61040961040436600461520e565b6113e5565b6040516102fc91906154c8565b61035961042436600461550c565b611574565b61035961043736600461520e565b61162b565b61044f61044a36600461552e565b611721565b604080519384526020840192909252908201526060016102fc565b6006546102f09060ff1681565b61035961048536600461520e565b611af8565b610359611bcd565b610359611e61565b6103256104a8366004615584565b612129565b6103256104bb36600461522b565b6123bc565b6104d36104ce36600461522b565b6124b1565b604080519889526001600160a01b039097166020890152941515958701959095529115156060860152608085015260a084015260c083019190915260e0820152610100016102fc565b61056361052a36600461522b565b600e602052600090815260409020805460019091015465ffffffffffff80821691600160301b810490911690600160601b900460ff1684565b6040516102fc949392919093845265ffffffffffff9283166020850152911660408301521515606082015260800190565b6103256105a236600461522b565b612514565b6103256105b536600461520e565b61254e565b60015461038a906001600160a01b031681565b6103256105db366004615584565b61255d565b6105f36105ee36600461522b565b61258e565b604080519515158652602086019490945265ffffffffffff92831693850193909352166060830152608082015260a0016102fc565b61063b610636366004615584565b6125e0565b604080519283529015156020830152016102fc565b6103596126ab565b61040961276b565b6102f061066e36600461520e565b612854565b6103256106813660046155b0565b6129bd565b610359610694366004615584565b612b35565b6102f06106a736600461520e565b60056020526000908152604090205460ff1681565b6103256106ca36600461522b565b612bf7565b6106e26106dd366004615584565b613448565b6040805195865265ffffffffffff9485166020870152928416928501929092528216606084015216608082015260a0016102fc565b61072a61072536600461522b565b6134ab565b6040805165ffffffffffff98891681529688166020880152948716948601949094529185166060850152909316608083015260ff90921660a082015290151560c082015260e0016102fc565b61040961078436600461520e565b613513565b61032561079736600461522b565b613738565b61032560025481565b6000806107b1836137f7565b5050905080600c84815481106107c9576107c961566b565b9060005260206000209060040201600101546107e59190615697565b9392505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa15801561083f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086391906156ae565b6001600160a01b0316336001600160a01b0316146000906108a05760405162461bcd60e51b815260040161089791906156cb565b60405180910390fd5b5042600c82815481106108b5576108b561566b565b906000526020600020906004020160020160066101000a81548165ffffffffffff021916908365ffffffffffff1602179055506000600b82815481106108fd576108fd61566b565b6000918252602082206006909102019190915560405182917f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe591a250565b600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa15801561098e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b291906156ae565b6001600160a01b0316336001600160a01b0316146000906109e65760405162461bcd60e51b815260040161089791906156cb565b506010805460ff1916911515919091179055565b6000600b8281548110610a0f57610a0f61566b565b906000526020600020906006020160000154600014158015610a65575042600c8381548110610a4057610a4061566b565b6000918252602090912060049091020160020154600160301b900465ffffffffffff16115b92915050565b600080600d8381548110610a8157610a8161566b565b600091825260209091200154610aa290600160f01b900460ff16600a615857565b610aab84613738565b610ab4856107a5565b610abe9190615866565b610ac89190615885565b600a549091506001600160a01b031615610a65576000610ae784612bf7565b905081811015610af5578091505b5092915050565b33600081815260046020819052604080832080549390555163a9059cbb60e01b81529081019290925260248201819052906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044015b6020604051808303816000875af1158015610b81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba591906158a7565b5050565b60015460408051630505c8c960e01b815290516000926001600160a01b031691630505c8c99160048083019260209291908290030181865afa158015610bf3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1791906156ae565b6001600160a01b0316336001600160a01b031614600090610c4b5760405162461bcd60e51b815260040161089791906156cb565b506020830151600090610c5f904290615697565b90506000876001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ca1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc591906158c4565b60ff169050600086816020020151610cde578751610d1d565b610ce982600a6158e7565b60208901518951610d09906ec097ce7bc90715b34b9f1000000000615866565b610d139190615885565b610d1d9190615885565b85519091506000908490610d379063ffffffff1684615866565b610d419190615885565b90506000620186a08a60026020020151610d5b9085615866565b610d659190615885565b610d6f90846158f3565b9050600083600960009054906101000a90046001600160a01b03166001600160a01b031663860f50486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610deb919061590b565b60208d0151610dfa9190615866565b610e049190615885565b600b805460408051610100810190915290995091925090808d6000602002015181526020018e6001600160a01b031681526020018c600060048110610e4b57610e4b61566b565b6020020151151581526020018c600160048110610e6a57610e6a61566b565b6020908102919091015115158252818101889052604080830188905260006060808501829052608094850182905286546001808201895597835291849020865160069093020191825585840151828801805488860151898501511515600160a81b027fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff911515600160a01b027fffffffffffffffffffffff0000000000000000000000000000000000000000009093166001600160a01b0390951694909417919091171691909117905593850151600282015560a080860151600383015560c0860151600483015560e090950151600590910155805193840181528e830151151584529083018590528c5165ffffffffffff1690830152600c92908201908c906020908102919091015165ffffffffffff90811683529181018690528354600180820186556000958652948290208451600490920201805491151560ff199092169190911781558382015194810194909455604080840151600280870180546060808901518816600160301b026bffffffffffffffffffffffff1990921694881694909417179055608095860151600390970196909655815160e08101835242851680825281850152938c16918401919091528c5163ffffffff90811691840191909152908c0151169181019190915260ff871660a0820152600d9160c08201908d90602002015115158152509080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548165ffffffffffff021916908365ffffffffffff16021790555060208201518160000160066101000a81548165ffffffffffff021916908365ffffffffffff160217905550604082015181600001600c6101000a81548165ffffffffffff021916908365ffffffffffff16021790555060608201518160000160126101000a81548165ffffffffffff021916908365ffffffffffff16021790555060808201518160000160186101000a81548165ffffffffffff021916908365ffffffffffff16021790555060a082015181600001601e6101000a81548160ff021916908360ff16021790555060c082015181600001601f6101000a81548160ff0219169083151502179055505050600f60008d6001600160a01b03166001600160a01b03168152602001908152602001600020879080600181540180825580915050600190039060005260206000200160009091909190915055896001600481106112155761121561566b565b6020020151156112995760095460405163095ea7b360e01b81526001600160a01b0391821660048201526000196024820152908d169063095ea7b3906044016020604051808303816000875af1158015611273573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129791906158a7565b505b6001600160a01b03808d16907f000000000000000000000000000000000000000000000000000000000000000016887f2f6ff727bd580b1d1b8332e28aa93ed4ec9d8b08d6e30d6b4c9f7aa63ca17f638e6001602002015160405161130091815260200190565b60405180910390a450505050505095945050505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa15801561136a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138e91906156ae565b6001600160a01b0316336001600160a01b0316146000906113c25760405162461bcd60e51b815260040161089791906156cb565b50600a80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381166000908152600f6020908152604080832080548251818502810185019093528083526060949383018282801561144457602002820191906000526020600020905b815481526020019060010190808311611430575b50505050509050600080600090505b82518110156114a35761147e8382815181106114715761147161566b565b60200260200101516109fa565b15611491578161148d81615924565b9250505b8061149b81615924565b915050611453565b5060008167ffffffffffffffff8111156114bf576114bf61526f565b6040519080825280602002602001820160405280156114e8578160200160208202803683370190505b5090506000805b84518110156115695761150d8582815181106114715761147161566b565b15611557578481815181106115245761152461566b565b602002602001015183838151811061153e5761153e61566b565b60209081029190910101528161155381615924565b9250505b8061156181615924565b9150506114ef565b509095945050505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115eb91906156ae565b6001600160a01b0316336001600160a01b03161460009061161f5760405162461bcd60e51b815260040161089791906156cb565b50600291909155600355565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa15801561167e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a291906156ae565b6001600160a01b0316336001600160a01b0316146000906116d65760405162461bcd60e51b815260040161089791906156cb565b50600180546001600160a01b0319166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b6010546000908190819060ff168061173f575061173d85612854565b155b61178b5760405162461bcd60e51b815260206004820152601e60248201527f436f6e63757272656e7420626f6e64732061726520666f7262696464656e00006044820152606401610897565b6000600b89815481106117a0576117a061566b565b906000526020600020906006020190506000600c8a815481106117c5576117c561566b565b60009182526020918290206040805160a0810182526004909302909101805460ff1615158352600181015493830193909352600283015465ffffffffffff80821692840192909252600160301b9004811660608301819052600390930154608083015290925042919082161061187d5760405162461bcd60e51b815260206004820152601c60248201527f4465706f7369746f72793a206d61726b657420636f6e636c75646564000000006044820152606401610897565b6118878b826138d9565b60006118928c613a95565b9050898111156118e45760405162461bcd60e51b815260206004820152601f60248201527f4465706f7369746f72793a206d6f7265207468616e206d6178207072696365006044820152606401610897565b600d8c815481106118f7576118f761566b565b60009182526020909120015461191890600160f01b900460ff16600a615857565b816119328d6ec097ce7bc90715b34b9f1000000000615866565b61193c9190615885565b6119469190615885565b9650836003015487111561199c5760405162461bcd60e51b815260206004820152601d60248201527f4465706f7369746f72793a206d61782073697a652065786365656465640000006044820152606401610897565b6001840154600160a01b900460ff166119b557866119b7565b8a5b8460000160008282546119ca9190615697565b909155505082516119df5782604001516119ef565b8183604001516119ef919061593f565b65ffffffffffff1695508a846005016000828254611a0d91906158f3565b9250508190555086846004016000828254611a2891906158f3565b9250508190555086846002016000828254611a4391906158f3565b9091555050604080518c8152602081018390528d917f7880508a48fd3aee88f7e15917d85e39c3ad059e51ad4aca9bb46e7b4938b961910160405180910390a250611a908b8b888a613b2d565b611a9c8887878e613dfb565b9350826002015482608001511015611ae05760008084556040518c917f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe591a2611aea565b611aea8b82613f81565b505050955095509592505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6f91906156ae565b6001600160a01b0316336001600160a01b031614600090611ba35760405162461bcd60e51b815260040161089791906156cb565b506001600160a01b03166000908152600560205260409020805460ff19811660ff90911615179055565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4491906156ae565b6001600160a01b0316336001600160a01b03161480611cea5750600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015611cb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd591906156ae565b6001600160a01b0316336001600160a01b0316145b80611d7c5750600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6791906156ae565b6001600160a01b0316336001600160a01b0316145b611dc85760405162461bcd60e51b815260206004820152600f60248201527f4f6e6c7920617574686f72697a656400000000000000000000000000000000006044820152606401610897565b600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3f91906156ae565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611eb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed891906156ae565b6001600160a01b0316336001600160a01b031614600090611f0c5760405162461bcd60e51b815260040161089791906156cb565b50600060046000600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f8a91906156ae565b6001600160a01b031681526020810191909152604001600020549050801561212657600060046000600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612005573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061202991906156ae565b6001600160a01b03166001600160a01b03168152602001908152602001600020819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156120cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f391906156ae565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401610b62565b50565b6001600160a01b038281166000908152600860209081526040808320858452909152812054909116331461219f5760405162461bcd60e51b815260206004820152601e60248201527f4465706f7369746f72793a207472616e73666572206e6f7420666f756e6400006044820152606401610897565b6001600160a01b03831660009081526007602052604090208054839081106121c9576121c961566b565b6000918252602090912060029091020160010154600160601b900465ffffffffffff16156122395760405162461bcd60e51b815260206004820152601960248201527f4465706f7369746f72793a206e6f74652072656465656d6564000000000000006044820152606401610897565b503360009081526007602052604080822080546001600160a01b0386168452919092208054919291849081106122715761227161566b565b600091825260208083208454600181810187559585528285206002948502909201805491909402909101908155918401805492909401805465ffffffffffff19811665ffffffffffff94851690811783558654600160301b908190048616026bffffffffffffffffffffffff1990921617178082558554600160601b9081900485160271ffffffffffff000000000000000000000000198216811783559554600160901b9081900490941690930265ffffffffffff60901b1990951677ffffffffffffffffffffffff00000000000000000000000019909316929092179390931790556001600160a01b038516815260079091526040902080548390811061237b5761237b61566b565b60009182526020822060029091020190815560010180547fffffffffffffffff00000000000000000000000000000000000000000000000016905592915050565b600080600d83815481106123d2576123d261566b565b600091825260208083206040805160e081018252939091015465ffffffffffff8082168552600160301b82048116938501849052600160601b8204811692850192909252600160901b810482166060850152600160c01b8104909116608084015260ff600160f01b8204811660a0850152600160f81b90910416151560c08301529092506124609042615697565b9050816040015165ffffffffffff1681600b86815481106124835761248361566b565b90600052602060002090600602016002015461249f9190615866565b6124a99190615885565b949350505050565b600b81815481106124c157600080fd5b60009182526020909120600690910201805460018201546002830154600384015460048501546005909501549395506001600160a01b0383169460ff600160a01b8504811695600160a81b909504169388565b600061251f826123bc565b600b83815481106125325761253261566b565b906000526020600020906006020160020154610a659190615697565b6000610a658261068184613513565b600f602052816000526040600020818154811061257957600080fd5b90600052602060002001600091509150505481565b600c818154811061259e57600080fd5b6000918252602090912060049091020180546001820154600283015460039093015460ff90921693509165ffffffffffff80821692600160301b909204169085565b6001600160a01b03821660009081526007602052604081208054829182918590811061260e5761260e61566b565b60009182526020918290206040805160a0810182526002909302909101805480845260019091015465ffffffffffff80821695850195909552600160301b8104851692840192909252600160601b8204841660608401819052600160901b90920490931660808301529194509150158015612695575042816040015165ffffffffffff1611155b80156126a15750805115155b9150509250929050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa1580156126fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061272291906156ae565b6001600160a01b0316336001600160a01b0316146000906127565760405162461bcd60e51b815260040161089791906156cb565b506006805460ff19811660ff90911615179055565b60606000805b600b548110156127a957612784816109fa565b15612797578161279381615924565b9250505b806127a181615924565b915050612771565b5060008167ffffffffffffffff8111156127c5576127c561526f565b6040519080825280602002602001820160405280156127ee578160200160208202803683370190505b5090506000805b600b5481101561284b57612808816109fa565b1561283957808383815181106128205761282061566b565b60209081029190910101528161283581615924565b9250505b8061284381615924565b9150506127f5565b50909392505050565b6001600160a01b038116600090815260076020908152604080832080548251818502810185019093528083528493849084015b828210156128fd5760008481526020908190206040805160a081018252600286029092018054835260019081015465ffffffffffff80821685870152600160301b8204811693850193909352600160601b810483166060850152600160901b900490911660808301529083529092019101612887565b50505050905060005b81518110156129b3578181815181106129215761292161566b565b60200260200101516060015165ffffffffffff16600014801561296257508181815181106129515761295161566b565b602002602001015160000151600014155b801561299257504282828151811061297c5761297c61566b565b60200260200101516040015165ffffffffffff16115b156129a1575060019392505050565b806129ab81615924565b915050612906565b5060009392505050565b600042815b8351811015612a99576000806129f1878785815181106129e4576129e461566b565b60200260200101516125e0565b915091508015612a84576001600160a01b03871660009081526007602052604090208651859190889086908110612a2a57612a2a61566b565b602002602001015181548110612a4257612a4261566b565b9060005260206000209060020201600101600c6101000a81548165ffffffffffff021916908365ffffffffffff1602179055508185612a8191906158f3565b94505b50508080612a9190615924565b9150506129c2565b5060405163a9059cbb60e01b81526001600160a01b038581166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015612b09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b2d91906158a7565b505092915050565b336000908152600760205260409020805482908110612b5657612b5661566b565b600091825260209091206001600290920201015465ffffffffffff16612bbe5760405162461bcd60e51b815260206004820152601a60248201527f4465706f7369746f72793a206e6f7465206e6f7420666f756e640000000000006044820152606401610897565b3360009081526008602090815260408083209383529290522080546001600160a01b0319166001600160a01b0392909216919091179055565b600080600b8381548110612c0d57612c0d61566b565b60009182526020808320604080516101008101825260069094029091018054845260018101546001600160a01b0381169385019390935260ff600160a01b84048116151592850192909252600160a81b909204161515606083015260028101546080830152600381015460a0830152600481015460c08301526005015460e0820152600d80549193509085908110612ca757612ca761566b565b60009182526020918290206040805160e081018252919092015465ffffffffffff8082168352600160301b8204811694830194909452600160601b8104841692820192909252600160901b820483166060820152600160c01b8204909216608083015260ff600160f01b8204811660a0840152600160f81b9091041615801560c083015290915061324f576000826020015190506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d9f91906156ae565b90506000826001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015612de1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e0591906156ae565b9050600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015612e48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e6c919061598c565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b03161480612f0257507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316145b15612f105791929190612fbc565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161480612f8157507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316145b612fbc5760405162461bcd60e51b815260206004820152600c60248201526b24b73b30b634b2103830b4b960a11b6044820152606401610897565b6000846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ffc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061302091906158c4565b600a805460ff9290921692506000916001600160a01b031690639c5d6cb790889061304c9086906158e7565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015260248101919091529088166044820152606401602060405180830381865afa1580156130a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130c4919061590b565b905060006130d383600a6158e7565b6130dd8387615866565b6130e79190615885565b6130f190856158f3565b9050600081896001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613134573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613158919061590b565b61316a90670de0b6b3a7640000615866565b6131749190615885565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316876001600160a01b0316141561323f577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632986c0e56040518163ffffffff1660e01b8152600401602060405180830381865afa15801561320e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613232919061590b565b61323c9082615885565b90505b9c9b505050505050505050505050565b600082602001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613293573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132b791906158c4565b60ff16905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561331c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061334091906158c4565b60ff16905081811115613368576133578282615697565b61336190826158f3565b905061337f565b6133728183615697565b61337c9082615697565b90505b600a80546001600160a01b031690639c5d6cb7907f0000000000000000000000000000000000000000000000000000000000000000906133c09085906158e7565b60208801516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201526024810192909252919091166044820152606401602060405180830381865afa15801561341a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061343e919061590b565b9695505050505050565b6007602052816000526040600020818154811061346457600080fd5b60009182526020909120600290910201805460019091015490925065ffffffffffff8082169250600160301b8204811691600160601b8104821691600160901b9091041685565b600d81815481106134bb57600080fd5b60009182526020909120015465ffffffffffff8082169250600160301b8204811691600160601b8104821691600160901b8204811691600160c01b81049091169060ff600160f01b8204811691600160f81b90041687565b6001600160a01b0381166000908152600760209081526040808320805482518185028101850190935280835260609493849084015b828210156135be5760008481526020908190206040805160a081018252600286029092018054835260019081015465ffffffffffff80821685870152600160301b8204811693850193909352600160601b810483166060850152600160901b900490911660808301529083529092019101613548565b505050509050600080600090505b825181101561364d578281815181106135e7576135e761566b565b60200260200101516060015165ffffffffffff16600014801561362857508281815181106136175761361761566b565b602002602001015160000151600014155b1561363b578161363781615924565b9250505b8061364581615924565b9150506135cc565b5060008167ffffffffffffffff8111156136695761366961526f565b604051908082528060200260200182016040528015613692578160200160208202803683370190505b5090506000805b8451811015611569578481815181106136b4576136b461566b565b60200260200101516060015165ffffffffffff1660001480156136f557508481815181106136e4576136e461566b565b602002602001015160000151600014155b15613726578083838151811061370d5761370d61566b565b60209081029190910101528161372281615924565b9250505b8061373081615924565b915050613699565b600954604080516310c1ea0960e31b815290516000926001600160a01b03169163860f50489160048083019260209291908290030181865afa158015613782573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137a6919061590b565b600d83815481106137b9576137b961566b565b6000918252602090912001546137da90600160f01b900460ff16600a615857565b6137e384612514565b6137ed9190615866565b610a659190615885565b6000818152600e6020908152604080832081516080810183528154815260019091015465ffffffffffff80821694830194909452600160301b810490931691810191909152600160601b90910460ff1615156060820181905282918291613869576000806000935093509350506138d2565b602081015161387890426159d3565b9250806040015165ffffffffffff168365ffffffffffff161091508161389f5780516138ce565b806040015165ffffffffffff168365ffffffffffff1682600001516138c49190615866565b6138ce9190615885565b9350505b9193909250565b6138e2826123bc565b600b83815481106138f5576138f561566b565b906000526020600020906006020160020160008282546139159190615697565b9250508190555080600d83815481106139305761393061566b565b60009182526020808320909101805465ffffffffffff94909416600160301b026bffffffffffff0000000000001990941693909317909255838152600e909152604090206001015460ff600160601b9091041615610ba5576000828152600e602052604081209080806139a2866137f7565b92509250925082600c87815481106139bc576139bc61566b565b906000526020600020906004020160010160008282546139dc9190615697565b90915550508015613a7457828460000160008282546139fb9190615697565b9091555050600184018054839190600690613a26908490600160301b900465ffffffffffff166159d3565b92506101000a81548165ffffffffffff021916908365ffffffffffff160217905550848460010160006101000a81548165ffffffffffff021916908365ffffffffffff160217905550613a8d565b6001840180546cff000000000000000000000000191690555b505050505050565b600080600d8381548110613aab57613aab61566b565b600091825260209091200154613acc90600160f01b900460ff16600a615857565b613ad584614496565b600c8581548110613ae857613ae861566b565b906000526020600020906004020160010154613b049190615866565b613b0e9190615885565b600a549091506001600160a01b031615610a65576000610ae784614567565b6000600b8581548110613b4257613b4261566b565b60009182526020808320604080516101008101825260069094029091018054845260018101546001600160a01b0381169385019390935260ff600160a01b84048116151592850192909252600160a81b90920416158015606084015260028201546080840152600382015460a0840152600482015460c084015260059091015460e08301529092508190613c9a576020830151613bea906001600160a01b0316333089614bdf565b613bf48585614d10565b92509050600082613c0583886158f3565b613c0f91906158f3565b600954602086015160405163bc157ac160e01b8152600481018b90526001600160a01b03918216602482015260448101849052929350169063bc157ac1906064016020604051808303816000875af1158015613c6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c93919061590b565b5050613d51565b6009546020840151613cbb916001600160a01b039182169133911689614bdf565b613cc58585614d10565b6009549093509091506001600160a01b03166340c10f193084613ce8858a6158f3565b613cf291906158f3565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015613d3857600080fd5b505af1158015613d4c573d6000803e3d6000fd5b505050505b8115613d6057613d6082614f8c565b6040516356e4bb9760e11b8152306004820152602481018690527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063adc9772e906044016020604051808303816000875af1158015613dcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613df1919061590b565b5050505050505050565b6001600160a01b03848116600090815260076020526040908190208054825160a08101938490526319a948db60e21b90935260a483018790529290919081907f0000000000000000000000000000000000000000000000000000000000000000166366a5236c60c48301602060405180830381865afa158015613e82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ea6919061590b565b815265ffffffffffff4281166020808401919091529681166040808401919091526000606080850182905297831660809485015285546001818101885596825290899020855160029092020190815597840151979094018054948401519684015193909201518116600160901b0265ffffffffffff60901b19938216600160601b029390931677ffffffffffffffffffffffff00000000000000000000000019968216600160301b026bffffffffffffffffffffffff1990951697909116969096179290921793909316939093179190911790915592915050565b6000600d8381548110613f9657613f9661566b565b60009182526020918290206040805160e081018252919092015465ffffffffffff808216808452600160301b8304821695840195909552600160601b8204811693830193909352600160901b810483166060830152600160c01b81049092166080820181905260ff600160f01b8404811660a0840152600160f81b909304909216151560c082015292506140299161593f565b65ffffffffffff168265ffffffffffff1610614491576000600b84815481106140545761405461566b565b60009182526020808320604080516101008101825260069094029091018054845260018101546001600160a01b0381169385019390935260ff600160a01b84048116151592850192909252600160a81b909204161515606083015260028101546080830152600381015460a0830152600481015460c08301526005015460e0820152600c80549193508591879081106140ef576140ef61566b565b906000526020600020906004020160020160069054906101000a900465ffffffffffff1661411d91906159d3565b65ffffffffffff169050600061413286613a95565b905060008360400151614146578351614187565b60a085015161415690600a615857565b84518390614173906ec097ce7bc90715b34b9f1000000000615866565b61417d9190615885565b6141879190615885565b905082856060015165ffffffffffff16826141a29190615866565b6141ac9190615885565b600b88815481106141bf576141bf61566b565b906000526020600020906006020160030181905550600083866040015165ffffffffffff16836141ef9190615866565b6141f99190615885565b9050600081600960009054906101000a90046001600160a01b03166001600160a01b031663860f50486040518163ffffffff1660e01b8152600401602060405180830381865afa158015614251573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614275919061590b565b61427f9086615866565b6142899190615885565b9050887f78f9c01d72705dba80d6ce051d36a1f987bf2a3800fee938c111a2ae741e57d1600c8b815481106142c0576142c061566b565b906000526020600020906004020160010154836040516142ea929190918252602082015260400190565b60405180910390a2600c89815481106143055761430561566b565b906000526020600020906004020160010154811061434b5780600c8a815481106143315761433161566b565b90600052602060002090600402016001018190555061444f565b600081600c8b815481106143615761436161566b565b90600052602060002090600402016001015461437d9190615697565b905060405180608001604052808281526020018a65ffffffffffff168152602001896080015165ffffffffffff16815260200160011515815250600e60008c81526020019081526020016000206000820151816000015560208201518160010160006101000a81548165ffffffffffff021916908365ffffffffffff16021790555060408201518160010160066101000a81548165ffffffffffff021916908365ffffffffffff160217905550606082015181600101600c6101000a81548160ff021916908315150217905550905050505b87600d8a815481106144635761446361566b565b6000918252602090912001805465ffffffffffff191665ffffffffffff929092169190911790555050505050505b505050565b600954604080516310c1ea0960e31b815290516000926001600160a01b03169163860f50489160048083019260209291908290030181865afa1580156144e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614504919061590b565b600d83815481106145175761451761566b565b60009182526020909120015461453890600160f01b900460ff16600a615857565b600b848154811061454b5761454b61566b565b9060005260206000209060060201600201546137ed9190615866565b600080600b838154811061457d5761457d61566b565b60009182526020808320604080516101008101825260069094029091018054845260018101546001600160a01b0381169385019390935260ff600160a01b84048116151592850192909252600160a81b909204161515606083015260028101546080830152600381015460a0830152600481015460c08301526005015460e0820152600d805491935090859081106146175761461761566b565b60009182526020918290206040805160e081018252919092015465ffffffffffff8082168352600160301b8204811694830194909452600160601b8104841692820192909252600160901b820483166060820152600160c01b8204909216608083015260ff600160f01b8204811660a0840152600160f81b9091041615801560c0830152909150614a12576000826020015190506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156146eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061470f91906156ae565b90506000826001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015614751573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061477591906156ae565b9050600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156147b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147dc919061598c565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316148061487257507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316145b15614880579192919061492c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031614806148f157507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316145b61492c5760405162461bcd60e51b815260206004820152600c60248201526b24b73b30b634b2103830b4b960a11b6044820152606401610897565b6000846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561496c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061499091906158c4565b600a805460ff9290921692506000916001600160a01b031690638c86f1e49088906149bc9086906158e7565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152602481019190915290881660448201526064016020604051808303816000875af11580156130a0573d6000803e3d6000fd5b600082602001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015614a56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a7a91906158c4565b60ff16905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015614adf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b0391906158c4565b60ff16905081811115614b2b57614b1a8282615697565b614b2490826158f3565b9050614b42565b614b358183615697565b614b3f9082615697565b90505b600a80546001600160a01b031690638c86f1e4907f000000000000000000000000000000000000000000000000000000000000000090614b839085906158e7565b60208801516040516001600160e01b031960e086901b1681526001600160a01b03938416600482015260248101929092529190911660448201526064016020604051808303816000875af115801561341a573d6000803e3d6000fd5b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b1790529151600092839290881691614c5891906159fa565b6000604051808303816000865af19150503d8060008114614c95576040519150601f19603f3d011682016040523d82523d6000602084013e614c9a565b606091505b5091509150818015614cc4575080511580614cc4575080806020019051810190614cc491906158a7565b613a8d5760405162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c45440000000000000000000000006044820152606401610897565b60008061271060025485614d249190615866565b614d2e9190615885565b915061271060035485614d419190615866565b614d4b9190615885565b6001600160a01b03841660009081526005602052604090205490915060ff1615614ed65760065460ff1615614df257614d85600283615885565b3360009081526004602052604081208054909190614da49084906158f3565b90915550614db59050600283615885565b614dbf9083615697565b6001600160a01b03841660009081526004602052604081208054909190614de79084906158f3565b90915550614e209050565b6001600160a01b03831660009081526004602052604081208054849290614e1a9084906158f3565b90915550505b8060046000600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614e78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614e9c91906156ae565b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254614ecb91906158f3565b90915550614f859050565b614ee082826158f3565b6001546040805163fbfa77cf60e01b815290516004926000926001600160a01b039091169163fbfa77cf9180860191602091819003870181865afa158015614f2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614f5091906156ae565b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254614f7f91906158f3565b90915550505b9250929050565b600060046000600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614fe5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061500991906156ae565b6001600160a01b03166001600160a01b0316815260200190815260200160002054905060008111801561503c5750818110155b15610ba5578160046000600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015615099573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906150bd91906156ae565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546150ec9190615697565b90915550506001546040805163fbfa77cf60e01b815290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169363a9059cbb9391169163fbfa77cf916004808201926020929091908290030181865afa158015615164573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061518891906156ae565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018590526044016020604051808303816000875af11580156151d5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061449191906158a7565b6001600160a01b038116811461212657600080fd5b60006020828403121561522057600080fd5b81356107e5816151f9565b60006020828403121561523d57600080fd5b5035919050565b801515811461212657600080fd5b60006020828403121561526457600080fd5b81356107e581615244565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156152a8576152a861526f565b60405290565b6040516080810167ffffffffffffffff811182821017156152a8576152a861526f565b604051601f8201601f1916810167ffffffffffffffff811182821017156152fa576152fa61526f565b604052919050565b60006040516060810181811067ffffffffffffffff821117156153275761532761526f565b604052905080606083018481111561533e57600080fd5b835b81811015615358578035835260209283019201615340565b50505092915050565b600082601f83011261537257600080fd5b61537a615285565b80604084018581111561538c57600080fd5b845b8181101561156957803584526020938401930161538e565b63ffffffff8116811461212657600080fd5b600082601f8301126153c957600080fd5b6153d1615285565b8060408401858111156153e357600080fd5b845b818110156115695780356153f8816153a6565b8452602093840193016153e5565b6000806000806000610180868803121561541f57600080fd5b853561542a816151f9565b94506020603f8701881361543d57600080fd5b61544988828901615302565b945087609f88011261545a57600080fd5b6154626152ae565b8061010089018a81111561547557600080fd5b60808a015b8181101561549a57803561548d81615244565b845292840192840161547a565b508196506154a88b82615361565b9550505050506154bc8761014088016153b8565b90509295509295909350565b6020808252825182820181905260009190848201906040850190845b81811015615500578351835292840192918401916001016154e4565b50909695505050505050565b6000806040838503121561551f57600080fd5b50508035926020909101359150565b600080600080600060a0868803121561554657600080fd5b8535945060208601359350604086013592506060860135615566816151f9565b91506080860135615576816151f9565b809150509295509295909350565b6000806040838503121561559757600080fd5b82356155a2816151f9565b946020939093013593505050565b600080604083850312156155c357600080fd5b82356155ce816151f9565b915060208381013567ffffffffffffffff808211156155ec57600080fd5b818601915086601f83011261560057600080fd5b8135818111156156125761561261526f565b8060051b91506156238483016152d1565b818152918301840191848101908984111561563d57600080fd5b938501935b8385101561565b57843582529385019390850190615642565b8096505050505050509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156156a9576156a9615681565b500390565b6000602082840312156156c057600080fd5b81516107e5816151f9565b600060208083526000845481600182811c9150808316806156ed57607f831692505b85831081141561570b57634e487b7160e01b85526022600452602485fd5b878601838152602001818015615728576001811461573957615764565b60ff19861682528782019650615764565b60008b81526020902060005b8681101561575e57815484820152908501908901615745565b83019750505b50949998505050505050505050565b600181815b808511156157ae57816000190482111561579457615794615681565b808516156157a157918102915b93841c9390800290615778565b509250929050565b6000826157c557506001610a65565b816157d257506000610a65565b81600181146157e857600281146157f25761580e565b6001915050610a65565b60ff84111561580357615803615681565b50506001821b610a65565b5060208310610133831016604e8410600b8410161715615831575081810a610a65565b61583b8383615773565b806000190482111561584f5761584f615681565b029392505050565b60006107e560ff8416836157b6565b600081600019048311821515161561588057615880615681565b500290565b6000826158a257634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156158b957600080fd5b81516107e581615244565b6000602082840312156158d657600080fd5b815160ff811681146107e557600080fd5b60006107e583836157b6565b6000821982111561590657615906615681565b500190565b60006020828403121561591d57600080fd5b5051919050565b600060001982141561593857615938615681565b5060010190565b600065ffffffffffff80831681851680830382111561596057615960615681565b01949350505050565b80516dffffffffffffffffffffffffffff8116811461598757600080fd5b919050565b6000806000606084860312156159a157600080fd5b6159aa84615969565b92506159b860208501615969565b915060408401516159c8816153a6565b809150509250925092565b600065ffffffffffff838116908316818110156159f2576159f2615681565b039392505050565b6000825160005b81811015615a1b5760208186018101518583015201615a01565b81811115615a2a576000828501525b50919091019291505056fea164736f6c634300080a000a",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "close(uint256)": {
        "params": {
          "_id": "ID of market to close"
        }
      },
      "create(address,uint256[3],bool[4],uint256[2],uint32[2])": {
        "details": "current price should be in 18 decimals.",
        "params": {
          "_booleans": "[capacity in quote, quote is reserve, quote is LP, fixed term]",
          "_intervals": "[deposit interval (seconds), tune interval (seconds)]",
          "_market": "[capacity (in PANA or quote), initial price / PANA (18 decimals), debt buffer (3 decimals)]",
          "_quoteToken": "token used to deposit",
          "_terms": "[vesting length (if fixed term) or vested timestamp, conclusion timestamp]"
        },
        "returns": {
          "id_": "        ID of new bond market"
        }
      },
      "currentControlVariable(uint256)": {
        "details": "accounts for control variable adjustment",
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "control variable for market in PANA decimals"
        }
      },
      "currentDebt(uint256)": {
        "details": "accounts for debt decay since last deposit",
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "current debt for market in PANA decimals"
        }
      },
      "debtDecay(uint256)": {
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "amount of debt to decay"
        }
      },
      "debtRatio(uint256)": {
        "details": "uses current debt, which accounts for debt decay since last deposit (vs _debtRatio())",
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "debt ratio for market in quote decimals"
        }
      },
      "deposit(uint256,uint256,uint256,address,address)": {
        "params": {
          "_amount": "the amount of quote token to spend",
          "_id": "the ID of the market",
          "_maxPrice": "the maximum price at which to buy",
          "_referral": "the front end operator address",
          "_user": "the recipient of the payout"
        },
        "returns": {
          "expiry_": "    the timestamp at which payout is redeemable",
          "index_": "     the user index of the Note (used to redeem or query information)",
          "payout_": "    the amount of KARSHA due"
        }
      },
      "getOraclePriceView(uint256)": {
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "oracle price for market in PANA decimals"
        }
      },
      "hasNonMaturedNotes(address)": {
        "params": {
          "_user": "the user that the note belongs to"
        },
        "returns": {
          "_0": "if the user has at least one unvested note"
        }
      },
      "indexesFor(address)": {
        "params": {
          "_user": "the user to query notes for"
        },
        "returns": {
          "_0": "the pending notes for the user"
        }
      },
      "isLive(uint256)": {
        "params": {
          "_id": "ID of market"
        }
      },
      "liveMarketsFor(address)": {
        "params": {
          "_token": "quote token to check for"
        }
      },
      "marketPrice(uint256)": {
        "params": {
          "_id": "market ID"
        },
        "returns": {
          "_0": "price for market in PANA decimals"
        }
      },
      "pendingFor(address,uint256)": {
        "params": {
          "_index": "the index of the note in the user's array",
          "_user": "the user that the note belongs to"
        },
        "returns": {
          "matured_": "   if the payout can be redeemed",
          "payout_": "    the payout due, in Karsha"
        }
      },
      "pullNote(address,uint256)": {
        "params": {
          "_from": "the address that approved the note transfer",
          "_index": "the index of the note to transfer (in the sender's array)"
        }
      },
      "pushNote(address,uint256)": {
        "params": {
          "_index": "index of note to approve transfer for",
          "_to": "address to approve note transfer for"
        }
      },
      "redeem(address,uint256[])": {
        "params": {
          "_indexes": "the note indexes to redeem",
          "_user": "the user to redeem for"
        },
        "returns": {
          "payout_": "    sum of payout sent, in Karsha"
        }
      },
      "redeemAll(address)": {
        "details": "if possible, query indexesFor() off-chain and input in redeem() to save gas",
        "params": {
          "_user": "user to redeem all notes for"
        },
        "returns": {
          "_0": "sum of payout sent, in Karsha"
        }
      }
    },
    "title": "Pana Bond Depository",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "close(uint256)": {
        "notice": "disable existing market"
      },
      "create(address,uint256[3],bool[4],uint256[2],uint32[2])": {
        "notice": "creates a new market type"
      },
      "currentControlVariable(uint256)": {
        "notice": "up to date control variable"
      },
      "currentDebt(uint256)": {
        "notice": "calculate debt factoring in decay"
      },
      "debtDecay(uint256)": {
        "notice": "amount of debt to decay from total debt for market ID"
      },
      "debtRatio(uint256)": {
        "notice": "calculate current ratio of debt to supply"
      },
      "deposit(uint256,uint256,uint256,address,address)": {
        "notice": "deposit quote tokens in exchange for a bond from a specified market"
      },
      "getOraclePriceView(uint256)": {
        "notice": "View Only - gets token price in quote tokens from oracle"
      },
      "getTreasuryRewards()": {
        "notice": "Manually fetch remaining rewards for Treasury"
      },
      "hasNonMaturedNotes(address)": {
        "notice": "checks whether the user has at least one unvested note"
      },
      "indexesFor(address)": {
        "notice": "all pending notes for user"
      },
      "isLive(uint256)": {
        "notice": "is a given market accepting deposits"
      },
      "liveMarkets()": {
        "notice": "returns an array of all active market IDs"
      },
      "liveMarketsFor(address)": {
        "notice": "returns an array of all active market IDs for a given quote token"
      },
      "marketPrice(uint256)": {
        "notice": "View Only Function - calculate current market price of quote token in base token"
      },
      "pendingFor(address,uint256)": {
        "notice": "calculate amount available for claim for a single note"
      },
      "pullNote(address,uint256)": {
        "notice": "transfer a note that has been approved by an address"
      },
      "pushNote(address,uint256)": {
        "notice": "approve an address to transfer a note"
      },
      "redeem(address,uint256[])": {
        "notice": "redeem notes for user"
      },
      "redeemAll(address)": {
        "notice": "redeem all redeemable markets for user"
      },
      "setPriceOracle(address)": {
        "notice": "sets price oracle for bond depository"
      },
      "setRewards(uint256,uint256)": {
        "notice": "set rewards for front end operators and DAO"
      },
      "setUserRewards()": {
        "notice": "toggle user having reward, only by governer"
      },
      "whitelist(address)": {
        "notice": "add or remove addresses from the reward whitelist"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
        "label": "UNAUTHORIZED",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 13,
        "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
        "label": "authority",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IPanaAuthority)3354"
      },
      {
        "astId": 2054,
        "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
        "label": "refReward",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2056,
        "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
        "label": "treasuryReward",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2060,
        "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
        "label": "rewards",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2064,
        "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
        "label": "whitelisted",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2069,
        "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
        "label": "allowUserRewards",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 2340,
        "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
        "label": "notes",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_struct(Note)3196_storage)dyn_storage)"
      },
      {
        "astId": 2346,
        "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
        "label": "noteTransfers",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))"
      },
      {
        "astId": 2355,
        "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
        "label": "treasury",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(ITreasury)3493"
      },
      {
        "astId": 155,
        "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
        "label": "priceOracle",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IPriceOracle)3379"
      },
      {
        "astId": 159,
        "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
        "label": "markets",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_struct(Market)2883_storage)dyn_storage"
      },
      {
        "astId": 163,
        "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
        "label": "terms",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_struct(Terms)2894_storage)dyn_storage"
      },
      {
        "astId": 167,
        "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
        "label": "metadata",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_struct(Metadata)2909_storage)dyn_storage"
      },
      {
        "astId": 172,
        "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
        "label": "adjustments",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_struct(Adjustment)2918_storage)"
      },
      {
        "astId": 177,
        "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
        "label": "marketsForQuote",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 179,
        "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
        "label": "concurrentBondsPermitted",
        "offset": 0,
        "slot": "16",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Market)2883_storage)dyn_storage": {
        "base": "t_struct(Market)2883_storage",
        "encoding": "dynamic_array",
        "label": "struct IBondDepository.Market[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Metadata)2909_storage)dyn_storage": {
        "base": "t_struct(Metadata)2909_storage",
        "encoding": "dynamic_array",
        "label": "struct IBondDepository.Metadata[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Note)3196_storage)dyn_storage": {
        "base": "t_struct(Note)3196_storage",
        "encoding": "dynamic_array",
        "label": "struct INoteKeeper.Note[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Terms)2894_storage)dyn_storage": {
        "base": "t_struct(Terms)2894_storage",
        "encoding": "dynamic_array",
        "label": "struct IBondDepository.Terms[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)3094": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPanaAuthority)3354": {
        "encoding": "inplace",
        "label": "contract IPanaAuthority",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceOracle)3379": {
        "encoding": "inplace",
        "label": "contract IPriceOracle",
        "numberOfBytes": "20"
      },
      "t_contract(ITreasury)3493": {
        "encoding": "inplace",
        "label": "contract ITreasury",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(Note)3196_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct INoteKeeper.Note[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Note)3196_storage)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Adjustment)2918_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IBondDepository.Adjustment)",
        "numberOfBytes": "32",
        "value": "t_struct(Adjustment)2918_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Adjustment)2918_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Adjustment",
        "members": [
          {
            "astId": 2911,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "change",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2913,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "lastAdjustment",
            "offset": 0,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 2915,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "timeToAdjusted",
            "offset": 6,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 2917,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "active",
            "offset": 12,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Market)2883_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Market",
        "members": [
          {
            "astId": 2867,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "capacity",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2870,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "quoteToken",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)3094"
          },
          {
            "astId": 2872,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "capacityInQuote",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 2874,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "quoteTokenIsReserve",
            "offset": 21,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 2876,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "totalDebt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2878,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "maxPayout",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2880,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "sold",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2882,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "purchased",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Metadata)2909_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Metadata",
        "members": [
          {
            "astId": 2896,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "lastTune",
            "offset": 0,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 2898,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "lastDecay",
            "offset": 6,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 2900,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "length",
            "offset": 12,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 2902,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "depositInterval",
            "offset": 18,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 2904,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "tuneInterval",
            "offset": 24,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 2906,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "quoteDecimals",
            "offset": 30,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2908,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "quoteIsLPToken",
            "offset": 31,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Note)3196_storage": {
        "encoding": "inplace",
        "label": "struct INoteKeeper.Note",
        "members": [
          {
            "astId": 3187,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "payout",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3189,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "created",
            "offset": 0,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 3191,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "matured",
            "offset": 6,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 3193,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "redeemed",
            "offset": 12,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 3195,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "marketID",
            "offset": 18,
            "slot": "1",
            "type": "t_uint48"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Terms)2894_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Terms",
        "members": [
          {
            "astId": 2885,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "fixedTerm",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2887,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "controlVariable",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2889,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "vesting",
            "offset": 0,
            "slot": "2",
            "type": "t_uint48"
          },
          {
            "astId": 2891,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "conclusion",
            "offset": 6,
            "slot": "2",
            "type": "t_uint48"
          },
          {
            "astId": 2893,
            "contract": "contracts/bond/BondDepository.sol:PanaBondDepository",
            "label": "maxDebt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}