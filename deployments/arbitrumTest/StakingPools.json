{
  "address": "0x562f9ea5D9633F1994f62C8424b870f35cCAC804",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pana",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_panaPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_authority",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IPanaAuthority",
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "AuthorityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MaxAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PANA",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "internalType": "contract IPanaAuthority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_to",
          "type": "uint256"
        }
      ],
      "name": "getMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvestAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "panaPerSecond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingPana",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingPanaForUser",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "poolBalances",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accPanaPerShare",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPanaAuthority",
          "name": "_newAuthority",
          "type": "address"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newEndTime",
          "type": "uint256"
        }
      ],
      "name": "setEndTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_panaPerSecond",
          "type": "uint256"
        }
      ],
      "name": "setPanaPerSecond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newStartTime",
          "type": "uint256"
        }
      ],
      "name": "setStartTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x739b3dd75fd799e3eae8fb656423744f53371de905f41e6d955fe41150e4f637",
  "receipt": {
    "to": null,
    "from": "0x2d494Cb0a923009C471B9512571048560a44556A",
    "contractAddress": "0x562f9ea5D9633F1994f62C8424b870f35cCAC804",
    "transactionIndex": 0,
    "gasUsed": "14920334",
    "logsBloom": "0x
    "blockHash": "0x72afa685ce688ab8f0116d478f3099b57924da6f3f0e034be55c128fc7576d15",
    "transactionHash": "0x739b3dd75fd799e3eae8fb656423744f53371de905f41e6d955fe41150e4f637",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 13348415,
        "transactionHash": "0x739b3dd75fd799e3eae8fb656423744f53371de905f41e6d955fe41150e4f637",
        "address": "0x562f9ea5D9633F1994f62C8424b870f35cCAC804",
        "topics": [
          "0x2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad",
          "0x00000000000000000000000017382e3636f8a5c590ef07ee6ef82fc9ea93e10f"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x72afa685ce688ab8f0116d478f3099b57924da6f3f0e034be55c128fc7576d15"
      }
    ],
    "blockNumber": 13348415,
    "cumulativeGasUsed": "364553",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1709AF1e73225E1a8BaC94D921d03449B9e331C6",
    "18000000000000000000",
    1656676009,
    1688212009,
    "0x17382e3636f8a5c590Ef07Ee6Ef82fc9Ea93e10F"
  ],
  "solcInputHash": "101820d40db3996a1a85de879b15c5b8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pana\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_panaPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_authority\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IPanaAuthority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MaxAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PANA\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract IPanaAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"panaPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingPana\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingPanaForUser\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"poolBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accPanaPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPanaAuthority\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newEndTime\",\"type\":\"uint256\"}],\"name\":\"setEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_panaPerSecond\",\"type\":\"uint256\"}],\"name\":\"setPanaPerSecond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newStartTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/launch/StakingPools.sol\":\"StakingPools\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/access/PanaAccessControlled.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport \\\"../interfaces/IPanaAuthority.sol\\\";\\n\\nabstract contract PanaAccessControlled {\\n\\n    /* ========== EVENTS ========== */\\n\\n    event AuthorityUpdated(IPanaAuthority indexed authority);\\n\\n    string UNAUTHORIZED = \\\"UNAUTHORIZED\\\"; // save gas\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IPanaAuthority public authority;\\n\\n\\n    /* ========== Constructor ========== */\\n\\n    constructor(IPanaAuthority _authority) {\\n        authority = _authority;\\n        emit AuthorityUpdated(_authority);\\n    }\\n    \\n\\n    /* ========== MODIFIERS ========== */\\n    \\n    modifier onlyGovernor() {\\n        require(msg.sender == authority.governor(), UNAUTHORIZED);\\n        _;\\n    }\\n    \\n    modifier onlyGuardian() {\\n        require(msg.sender == authority.guardian(), UNAUTHORIZED);\\n        _;\\n    }\\n    \\n    modifier onlyPolicy() {\\n        require(msg.sender == authority.policy(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyVault() {\\n        require(msg.sender == authority.vault(), UNAUTHORIZED);\\n        _;\\n    }\\n    \\n    /* ========== GOV ONLY ========== */\\n    \\n    function setAuthority(IPanaAuthority _newAuthority) external onlyGovernor {\\n        authority = _newAuthority;\\n        emit AuthorityUpdated(_newAuthority);\\n    }\\n}\\n\",\"keccak256\":\"0x034e5499a57b5a80ba7315a07b54a800876e4e9143ec38855118dc2ff0af9311\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa142440b0e1c51ece24b6d074ac883b34e1f33a2472773eeaaf4871875904d09\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IPanaAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IPanaAuthority {\\n    /* ========== EVENTS ========== */\\n    \\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event DistributionVaultPushed(address indexed from, address indexed to, bool _effectiveImmediately); \\n\\n    event GovernorPulled(address indexed from, address indexed to);\\n    event GuardianPulled(address indexed from, address indexed to);\\n    event PolicyPulled(address indexed from, address indexed to);\\n    event VaultPulled(address indexed from, address indexed to);\\n    event DistributionVaultPulled(address indexed from, address indexed to);\\n\\n    /* ========== VIEW ========== */\\n    \\n    function governor() external view returns (address);\\n    function guardian() external view returns (address);\\n    function policy() external view returns (address);\\n    function vault() external view returns (address);\\n    function distributionVault() external view returns (address);\\n}\",\"keccak256\":\"0xc49dc603c39b5cbd2e18e02176ef489bd89dde552495236e9798ae49a9f2e875\",\"license\":\"AGPL-3.0\"},\"contracts/launch/StakingPools.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.10;\\n\\nimport \\\"../libraries/SafeERC20.sol\\\";\\n\\nimport \\\"../access/PanaAccessControlled.sol\\\";\\n\\n\\n// The StakingPools contract distributes Pana tokens to the users who stake certain tokens here.\\n// It is a fork of Giddy's GiddyChef contract which in turn is a fork of MasterChef by SushiSwap.\\ncontract StakingPools is PanaAccessControlled {\\n    using SafeERC20 for IERC20;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount;     // How many tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of Pana\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (user.amount * pool.accPanaPerShare) - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws tokens to a pool. Here's what happens:\\n        //   1. The pool's `accPanaPerShare` (and `lastRewardBlock`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 token;             // Address of a deposit token contract.\\n        uint256 allocPoint;       // How many allocation points assigned to this pool.\\n        uint256 lastRewardTime;   // Last block time that Pana distribution occurs.\\n        uint256 accPanaPerShare;  // Accumulated Pana per share, times 1e12. See below.\\n    }\\n\\n    IERC20 public immutable PANA;\\n\\n    // Pana tokens distributed per second.\\n    uint256 public panaPerSecond;\\n \\n    uint256 public constant MaxAllocPoint = 4000;\\n\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n    // Info of each user that stakes tokens.\\n    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint;\\n    // The block time when Pana mining starts.\\n    uint256 public startTime;\\n    // The block time when Pana mining stops.\\n    uint256 public endTime;\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    constructor(\\n        address _pana,\\n        uint256 _panaPerSecond,\\n        uint256 _startTime,\\n        uint256 _endTime,\\n        address _authority\\n    ) PanaAccessControlled(IPanaAuthority(_authority)) {\\n        require(_pana != address(0), \\\"Zero address: PANA\\\");\\n        PANA = IERC20(_pana);\\n        panaPerSecond = _panaPerSecond;\\n        startTime = _startTime;\\n        endTime = _endTime;\\n\\n        totalAllocPoint = 0;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    function checkForDuplicate(IERC20 _token) internal view {\\n        uint256 length = poolInfo.length;\\n        for (uint256 _pid = 0; _pid < length; _pid++) {\\n            require(poolInfo[_pid].token != _token, \\\"Pool already exists!\\\");\\n        }\\n    }\\n\\n    // Add a new pool.\\n    function add(uint256 _allocPoint, IERC20 _token) external onlyGovernor {\\n        require(_allocPoint <= MaxAllocPoint, \\\"Too many alloc points!\\\");\\n\\n        checkForDuplicate(_token); // ensure you can't add duplicate pools\\n        massUpdatePools();\\n\\n        uint256 lastRewardTime = block.timestamp > startTime ? block.timestamp : startTime;\\n        totalAllocPoint = totalAllocPoint + _allocPoint;\\n        poolInfo.push(PoolInfo({\\n            token: _token,\\n            allocPoint: _allocPoint,\\n            lastRewardTime: lastRewardTime,\\n            accPanaPerShare: 0\\n        }));\\n    }\\n\\n    // Update the given pool's allocation point.\\n    function set(uint256 _pid, uint256 _allocPoint) external onlyGovernor {\\n        require(_allocPoint <= MaxAllocPoint, \\\"Too many alloc points!\\\");\\n\\n        massUpdatePools();\\n\\n        totalAllocPoint = totalAllocPoint - poolInfo[_pid].allocPoint + _allocPoint;\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n    }\\n\\n    // Return reward multiplier over the given _from to _to timestamp.\\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\\n        _from = _from > startTime ? _from : startTime;\\n        if (_to < startTime || _from >= endTime) {\\n            return 0;\\n        } else if (_to <= endTime) {\\n            return _to - _from;\\n        } else {\\n            return endTime - _from;\\n        }\\n    }\\n\\n    // View function to see pending Pana on frontend.\\n    function pendingPana(uint256 _pid, address _user) external view returns (uint256) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n\\n        uint256 accPanaPerShare = pool.accPanaPerShare;\\n        uint256 supply = pool.token.balanceOf(address(this));\\n\\n        if (block.timestamp > pool.lastRewardTime && supply != 0) {\\n            uint256 multiplier = getMultiplier(pool.lastRewardTime, block.timestamp);\\n            uint256 panaReward = multiplier * panaPerSecond * pool.allocPoint / totalAllocPoint;\\n            accPanaPerShare = accPanaPerShare + panaReward * 1e12 / supply;\\n        }\\n\\n        return user.amount * accPanaPerShare / 1e12 - user.rewardDebt;\\n    }\\n\\n    function poolBalances(address _user) external view returns (uint256[] memory) {\\n        uint256 length = poolInfo.length;\\n        uint256[] memory poolBalanceData = new uint256[](length);\\n\\n        for (uint256 _pid = 0; _pid < length; ++_pid) {\\n            UserInfo storage user = userInfo[_pid][_user];\\n            poolBalanceData[_pid] = user.amount;\\n        }\\n        return poolBalanceData;\\n    }\\n\\n    // View function to see pending Pana on frontend.\\n    function pendingPanaForUser(address _user) external view returns (uint256[] memory) {\\n        uint256 length = poolInfo.length;\\n        uint256[] memory pendingPanaValues = new uint256[](length);\\n\\n        for (uint256 _pid = 0; _pid < length; ++_pid) {\\n            PoolInfo storage pool = poolInfo[_pid];\\n            UserInfo storage user = userInfo[_pid][_user];\\n            uint256 accPanaPerShare = pool.accPanaPerShare;\\n            uint256 supply = pool.token.balanceOf(address(this));\\n\\n            if (block.timestamp > pool.lastRewardTime && supply != 0) {\\n                uint256 multiplier = getMultiplier(pool.lastRewardTime, block.timestamp);\\n                uint256 panaReward = multiplier * panaPerSecond * pool.allocPoint / totalAllocPoint;\\n                accPanaPerShare = accPanaPerShare + panaReward * 1e12 / supply;\\n            }\\n\\n            pendingPanaValues[_pid] = user.amount * accPanaPerShare / 1e12 - user.rewardDebt;\\n        }\\n        return pendingPanaValues;\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.timestamp <= pool.lastRewardTime) {\\n            return;\\n        }\\n\\n        uint256 supply = pool.token.balanceOf(address(this));\\n        if (supply == 0) {\\n            pool.lastRewardTime = block.timestamp;\\n            return;\\n        }\\n\\n        uint256 multiplier = getMultiplier(pool.lastRewardTime, block.timestamp);\\n        uint256 panaReward = multiplier * panaPerSecond * pool.allocPoint / totalAllocPoint;\\n\\n        pool.accPanaPerShare = pool.accPanaPerShare + panaReward * 1e12 / supply;\\n        pool.lastRewardTime = block.timestamp;\\n    }\\n\\n    // Deposit tokens to staking.\\n    function deposit(uint256 _pid, uint256 _amount) external {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        updatePool(_pid);\\n\\n        uint256 pending = user.amount * pool.accPanaPerShare / 1e12 - user.rewardDebt;\\n\\n        user.amount = user.amount + _amount;\\n        user.rewardDebt = user.amount * pool.accPanaPerShare / 1e12;\\n\\n        if(pending > 0) {\\n            PANA.safeTransfer(msg.sender, pending);\\n        }\\n        pool.token.safeTransferFrom(address(msg.sender), address(this), _amount);\\n\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    // Withdraw tokens from staking.\\n    function withdraw(uint256 _pid, uint256 _amount) external {  \\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        require(user.amount >= _amount, \\\"Insufficient funds\\\");\\n\\n        updatePool(_pid);\\n\\n        uint256 pending = user.amount * pool.accPanaPerShare / 1e12 - user.rewardDebt;\\n\\n        user.amount = user.amount - _amount;\\n        user.rewardDebt = user.amount * pool.accPanaPerShare / 1e12;\\n\\n        if(pending > 0) {\\n            PANA.safeTransfer(msg.sender, pending);\\n        }\\n        pool.token.safeTransfer(address(msg.sender), _amount);\\n        \\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    function harvestAll() public {\\n        uint256 length = poolInfo.length;\\n        uint calc;\\n        uint pending;\\n        UserInfo storage user;\\n        PoolInfo storage pool;\\n        uint totalPending;\\n\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            user = userInfo[pid][msg.sender];\\n            if (user.amount > 0) {\\n                pool = poolInfo[pid];\\n                updatePool(pid);\\n\\n                calc = user.amount * pool.accPanaPerShare / 1e12;\\n                pending = calc - user.rewardDebt;\\n                user.rewardDebt = calc;\\n\\n                if(pending > 0) {\\n                    totalPending += pending;\\n                }\\n            }\\n        }\\n\\n        if (totalPending > 0) {\\n            PANA.safeTransfer(msg.sender, totalPending);\\n        }\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        uint oldUserAmount = user.amount;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n\\n        pool.token.safeTransfer(address(msg.sender), oldUserAmount);\\n        emit EmergencyWithdraw(msg.sender, _pid, oldUserAmount);\\n    }\\n\\n    function setStartTime(uint256 _newStartTime) external onlyGovernor {\\n        require(startTime > block.timestamp, \\\"Already started\\\");\\n        require(_newStartTime > block.timestamp, \\\"New time in the past\\\");\\n\\n        startTime = _newStartTime;\\n    }\\n\\n    function setEndTime(uint256 _newEndTime) external onlyGovernor {\\n        require(endTime > block.timestamp, \\\"Already ended\\\");\\n        require(_newEndTime > block.timestamp, \\\"New end time in the past\\\");\\n\\n        endTime = _newEndTime;\\n    }\\n\\n    function setPanaPerSecond(uint256 _panaPerSecond) external onlyGovernor {\\n        panaPerSecond = _panaPerSecond;\\n    }\\n}\",\"keccak256\":\"0xb28d80204a306716d6d0b1d547703b3c76eb5ce1b1a2bf86a476930d61c38c49\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\n\\n/// @notice Safe IERC20 and ETH transfer library that safely handles missing return values.\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/TransferHelper.sol)\\n/// Taken from Solmate\\nlibrary SafeERC20 {\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.approve.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        (bool success, ) = to.call{value: amount}(new bytes(0));\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n}\",\"keccak256\":\"0xbdd4f99088de7c23383b043055646de013b1312166a9bfa05e3995cdcf7ae022\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60e0604052600c60a08190526b15539055551213d49256915160a21b60c09081526200002f916000919062000121565b503480156200003d57600080fd5b5060405162001f3138038062001f318339810160408190526200006091620001e4565b600180546001600160a01b0319166001600160a01b0383169081179091556040518291907f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a2506001600160a01b038516620000fb5760405162461bcd60e51b81526020600482015260126024820152715a65726f20616464726573733a2050414e4160701b604482015260640160405180910390fd5b506001600160a01b03909316608052600291909155600655600755600060055562000276565b8280546200012f9062000239565b90600052602060002090601f0160209004810192826200015357600085556200019e565b82601f106200016e57805160ff19168380011785556200019e565b828001600101855582156200019e579182015b828111156200019e57825182559160200191906001019062000181565b50620001ac929150620001b0565b5090565b5b80821115620001ac5760008155600101620001b1565b80516001600160a01b0381168114620001df57600080fd5b919050565b600080600080600060a08688031215620001fd57600080fd5b6200020886620001c7565b94506020860151935060408601519250606086015191506200022d60808701620001c7565b90509295509295909350565b600181811c908216806200024e57607f821691505b602082108114156200027057634e487b7160e01b600052602260045260246000fd5b50919050565b608051611c8a620002a7600039600081816102b601528181610b0401528181610fb6015261160d0152611c8a6000f3fe608060405234801561001057600080fd5b50600436106101ae5760003560e01c806377e93ca8116100ee57806393f1a40b11610097578063bf7e214f11610071578063bf7e214f146103b4578063ccb98ffc146103c7578063e2bbb158146103da578063f4b83c4c146103ed57600080fd5b806393f1a40b14610347578063af7ac3d91461038e578063b55d2694146103a157600080fd5b80638dbb1e3a116100c85780638dbb1e3a1461030c5780638ed955b91461031f5780639155ccc81461032757600080fd5b806377e93ca8146102b157806378e97925146102f05780637a9e5e4b146102f957600080fd5b80633197cbb61161015b57806351eb05a61161013557806351eb05a61461027a5780635312ea8e1461028d578063630b5ba1146102a057806367df6019146102a857600080fd5b80633197cbb61461024b5780633e0a322d14610254578063441a3e701461026757600080fd5b806317caf6f11161018c57806317caf6f11461021c5780631ab06ee5146102255780632b8bbbe81461023857600080fd5b8063081e3eda146101b357806312cfa125146101ca5780631526fe27146101df575b600080fd5b6003545b6040519081526020015b60405180910390f35b6101dd6101d836600461198a565b6103f6565b005b6101f26101ed36600461198a565b6104b0565b604080516001600160a01b03909516855260208501939093529183015260608201526080016101c1565b6101b760055481565b6101dd6102333660046119a3565b6104f4565b6101dd6102463660046119dd565b61066a565b6101b760075481565b6101dd61026236600461198a565b61089a565b6101dd6102753660046119a3565b6109eb565b6101dd61028836600461198a565b610b80565b6101dd61029b36600461198a565b610cb0565b6101dd610d4f565b6101b760025481565b6102d87f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101c1565b6101b760065481565b6101dd610307366004611a0d565b610d7a565b6101b761031a3660046119a3565b610e7d565b6101dd610ee1565b61033a610335366004611a0d565b610fe5565b6040516101c19190611a31565b6103796103553660046119dd565b60046020908152600092835260408084209091529082529020805460019091015482565b604080519283526020830191909152016101c1565b6101b761039c3660046119dd565b611099565b61033a6103af366004611a0d565b611208565b6001546102d8906001600160a01b031681565b6101dd6103d536600461198a565b6113f6565b6101dd6103e83660046119a3565b611547565b6101b7610fa081565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015610449573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046d9190611a75565b6001600160a01b0316336001600160a01b0316146000906104aa5760405162461bcd60e51b81526004016104a19190611a92565b60405180910390fd5b50600255565b600381815481106104c057600080fd5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b039092169350919084565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015610547573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056b9190611a75565b6001600160a01b0316336001600160a01b03161460009061059f5760405162461bcd60e51b81526004016104a19190611a92565b50610fa08111156105f25760405162461bcd60e51b815260206004820152601660248201527f546f6f206d616e7920616c6c6f6320706f696e7473210000000000000000000060448201526064016104a1565b6105fa610d4f565b806003838154811061060e5761060e611b3a565b90600052602060002090600402016001015460055461062d9190611b66565b6106379190611b7d565b600581905550806003838154811061065157610651611b3a565b9060005260206000209060040201600101819055505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e19190611a75565b6001600160a01b0316336001600160a01b0316146000906107155760405162461bcd60e51b81526004016104a19190611a92565b50610fa08211156107685760405162461bcd60e51b815260206004820152601660248201527f546f6f206d616e7920616c6c6f6320706f696e7473210000000000000000000060448201526064016104a1565b6107718161167f565b610779610d4f565b6000600654421161078c5760065461078e565b425b90508260055461079e9190611b7d565b600555604080516080810182526001600160a01b0393841681526020810194855290810191825260006060820181815260038054600181018255925291517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b6004909202918201805473ffffffffffffffffffffffffffffffffffffffff1916919095161790935592517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85c830155517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85d82015590517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85e90910155565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109119190611a75565b6001600160a01b0316336001600160a01b0316146000906109455760405162461bcd60e51b81526004016104a19190611a92565b5042600654116109975760405162461bcd60e51b815260206004820152600f60248201527f416c72656164792073746172746564000000000000000000000000000000000060448201526064016104a1565b4281116109e65760405162461bcd60e51b815260206004820152601460248201527f4e65772074696d6520696e20746865207061737400000000000000000000000060448201526064016104a1565b600655565b600060038381548110610a0057610a00611b3a565b6000918252602080832086845260048083526040808620338752909352919093208054929091029092019250831115610a7b5760405162461bcd60e51b815260206004820152601260248201527f496e73756666696369656e742066756e6473000000000000000000000000000060448201526064016104a1565b610a8484610b80565b6000816001015464e8d4a5100084600301548460000154610aa59190611b95565b610aaf9190611bb4565b610ab99190611b66565b8254909150610ac9908590611b66565b808355600384015464e8d4a5100091610ae29190611b95565b610aec9190611bb4565b60018301558015610b2b57610b2b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383611729565b8254610b41906001600160a01b03163386611729565b604051848152859033907ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568906020015b60405180910390a35050505050565b600060038281548110610b9557610b95611b3a565b9060005260206000209060040201905080600201544211610bb4575050565b80546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610bfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c209190611bd6565b905080610c3257504260029091015550565b6000610c42836002015442610e7d565b90506000600554846001015460025484610c5c9190611b95565b610c669190611b95565b610c709190611bb4565b905082610c828264e8d4a51000611b95565b610c8c9190611bb4565b8460030154610c9b9190611b7d565b60038501555050426002909201919091555050565b600060038281548110610cc557610cc5611b3a565b60009182526020808320858452600480835260408086203380885294528520805486825560018201969096559302018054909450919291610d12916001600160a01b039091169083611729565b604051818152849033907fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959060200160405180910390a350505050565b60035460005b81811015610d7657610d6681610b80565b610d6f81611bef565b9050610d55565b5050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df19190611a75565b6001600160a01b0316336001600160a01b031614600090610e255760405162461bcd60e51b81526004016104a19190611a92565b506001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b60006006548311610e9057600654610e92565b825b9250600654821080610ea657506007548310155b15610eb357506000610edb565b6007548211610ecd57610ec68383611b66565b9050610edb565b82600754610ec69190611b66565b92915050565b600354600080808080805b86811015610fa25760008181526004602090815260408083203384529091529020805490945015610f925760038181548110610f2a57610f2a611b3a565b90600052602060002090600402019250610f4381610b80565b6003830154845464e8d4a5100091610f5a91611b95565b610f649190611bb4565b9550836001015486610f769190611b66565b6001850187905594508415610f9257610f8f8583611b7d565b91505b610f9b81611bef565b9050610eec565b508015610fdd57610fdd6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383611729565b505050505050565b60035460609060008167ffffffffffffffff81111561100657611006611c0a565b60405190808252806020026020018201604052801561102f578160200160208202803683370190505b50905060005b828110156110915760008181526004602090815260408083206001600160a01b038916845290915290208054835184908490811061107557611075611b3a565b60209081029190910101525061108a81611bef565b9050611035565b509392505050565b600080600384815481106110af576110af611b3a565b60009182526020808320878452600480835260408086206001600160a01b038a8116885294528086209482029092016003810154815493516370a0823160e01b8152309381019390935290965093949291909116906370a0823190602401602060405180830381865afa15801561112a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114e9190611bd6565b905083600201544211801561116257508015155b156111d0576000611177856002015442610e7d565b905060006005548660010154600254846111919190611b95565b61119b9190611b95565b6111a59190611bb4565b9050826111b78264e8d4a51000611b95565b6111c19190611bb4565b6111cb9085611b7d565b935050505b6001830154835464e8d4a51000906111e9908590611b95565b6111f39190611bb4565b6111fd9190611b66565b979650505050505050565b60035460609060008167ffffffffffffffff81111561122957611229611c0a565b604051908082528060200260200182016040528015611252578160200160208202803683370190505b50905060005b828110156110915760006003828154811061127557611275611b3a565b60009182526020808320858452600480835260408086206001600160a01b038d8116885294528086209482029092016003810154815493516370a0823160e01b8152309381019390935290965093949291909116906370a0823190602401602060405180830381865afa1580156112f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113149190611bd6565b905083600201544211801561132857508015155b1561139657600061133d856002015442610e7d565b905060006005548660010154600254846113579190611b95565b6113619190611b95565b61136b9190611bb4565b90508261137d8264e8d4a51000611b95565b6113879190611bb4565b6113919085611b7d565b935050505b6001830154835464e8d4a51000906113af908590611b95565b6113b99190611bb4565b6113c39190611b66565b8686815181106113d5576113d5611b3a565b60200260200101818152505050505050806113ef90611bef565b9050611258565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611449573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146d9190611a75565b6001600160a01b0316336001600160a01b0316146000906114a15760405162461bcd60e51b81526004016104a19190611a92565b5042600754116114f35760405162461bcd60e51b815260206004820152600d60248201527f416c726561647920656e6465640000000000000000000000000000000000000060448201526064016104a1565b4281116115425760405162461bcd60e51b815260206004820152601860248201527f4e657720656e642074696d6520696e207468652070617374000000000000000060448201526064016104a1565b600755565b60006003838154811061155c5761155c611b3a565b6000918252602080832086845260048083526040808620338752909352919093209102909101915061158d84610b80565b6000816001015464e8d4a51000846003015484600001546115ae9190611b95565b6115b89190611bb4565b6115c29190611b66565b82549091506115d2908590611b7d565b808355600384015464e8d4a51000916115eb9190611b95565b6115f59190611bb4565b60018301558015611634576116346001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383611729565b825461164b906001600160a01b0316333087611859565b604051848152859033907f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a1590602001610b71565b60035460005b8181101561172457826001600160a01b0316600382815481106116aa576116aa611b3a565b60009182526020909120600490910201546001600160a01b031614156117125760405162461bcd60e51b815260206004820152601460248201527f506f6f6c20616c7265616479206578697374732100000000000000000000000060448201526064016104a1565b8061171c81611bef565b915050611685565b505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b179052915160009283929087169161179a9190611c20565b6000604051808303816000865af19150503d80600081146117d7576040519150601f19603f3d011682016040523d82523d6000602084013e6117dc565b606091505b50915091508180156118065750805115806118065750808060200190518101906118069190611c5b565b6118525760405162461bcd60e51b815260206004820152600f60248201527f5452414e534645525f4641494c4544000000000000000000000000000000000060448201526064016104a1565b5050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b17905291516000928392908816916118d29190611c20565b6000604051808303816000865af19150503d806000811461190f576040519150601f19603f3d011682016040523d82523d6000602084013e611914565b606091505b509150915081801561193e57508051158061193e57508080602001905181019061193e9190611c5b565b610fdd5760405162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c454400000000000000000000000060448201526064016104a1565b60006020828403121561199c57600080fd5b5035919050565b600080604083850312156119b657600080fd5b50508035926020909101359150565b6001600160a01b03811681146119da57600080fd5b50565b600080604083850312156119f057600080fd5b823591506020830135611a02816119c5565b809150509250929050565b600060208284031215611a1f57600080fd5b8135611a2a816119c5565b9392505050565b6020808252825182820181905260009190848201906040850190845b81811015611a6957835183529284019291840191600101611a4d565b50909695505050505050565b600060208284031215611a8757600080fd5b8151611a2a816119c5565b600060208083526000845481600182811c915080831680611ab457607f831692505b858310811415611ad257634e487b7160e01b85526022600452602485fd5b878601838152602001818015611aef5760018114611b0057611b2b565b60ff19861682528782019650611b2b565b60008b81526020902060005b86811015611b2557815484820152908501908901611b0c565b83019750505b50949998505050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082821015611b7857611b78611b50565b500390565b60008219821115611b9057611b90611b50565b500190565b6000816000190483118215151615611baf57611baf611b50565b500290565b600082611bd157634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611be857600080fd5b5051919050565b6000600019821415611c0357611c03611b50565b5060010190565b634e487b7160e01b600052604160045260246000fd5b6000825160005b81811015611c415760208186018101518583015201611c27565b81811115611c50576000828501525b509190910192915050565b600060208284031215611c6d57600080fd5b81518015158114611a2a57600080fdfea164736f6c634300080a000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101ae5760003560e01c806377e93ca8116100ee57806393f1a40b11610097578063bf7e214f11610071578063bf7e214f146103b4578063ccb98ffc146103c7578063e2bbb158146103da578063f4b83c4c146103ed57600080fd5b806393f1a40b14610347578063af7ac3d91461038e578063b55d2694146103a157600080fd5b80638dbb1e3a116100c85780638dbb1e3a1461030c5780638ed955b91461031f5780639155ccc81461032757600080fd5b806377e93ca8146102b157806378e97925146102f05780637a9e5e4b146102f957600080fd5b80633197cbb61161015b57806351eb05a61161013557806351eb05a61461027a5780635312ea8e1461028d578063630b5ba1146102a057806367df6019146102a857600080fd5b80633197cbb61461024b5780633e0a322d14610254578063441a3e701461026757600080fd5b806317caf6f11161018c57806317caf6f11461021c5780631ab06ee5146102255780632b8bbbe81461023857600080fd5b8063081e3eda146101b357806312cfa125146101ca5780631526fe27146101df575b600080fd5b6003545b6040519081526020015b60405180910390f35b6101dd6101d836600461198a565b6103f6565b005b6101f26101ed36600461198a565b6104b0565b604080516001600160a01b03909516855260208501939093529183015260608201526080016101c1565b6101b760055481565b6101dd6102333660046119a3565b6104f4565b6101dd6102463660046119dd565b61066a565b6101b760075481565b6101dd61026236600461198a565b61089a565b6101dd6102753660046119a3565b6109eb565b6101dd61028836600461198a565b610b80565b6101dd61029b36600461198a565b610cb0565b6101dd610d4f565b6101b760025481565b6102d87f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101c1565b6101b760065481565b6101dd610307366004611a0d565b610d7a565b6101b761031a3660046119a3565b610e7d565b6101dd610ee1565b61033a610335366004611a0d565b610fe5565b6040516101c19190611a31565b6103796103553660046119dd565b60046020908152600092835260408084209091529082529020805460019091015482565b604080519283526020830191909152016101c1565b6101b761039c3660046119dd565b611099565b61033a6103af366004611a0d565b611208565b6001546102d8906001600160a01b031681565b6101dd6103d536600461198a565b6113f6565b6101dd6103e83660046119a3565b611547565b6101b7610fa081565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015610449573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046d9190611a75565b6001600160a01b0316336001600160a01b0316146000906104aa5760405162461bcd60e51b81526004016104a19190611a92565b60405180910390fd5b50600255565b600381815481106104c057600080fd5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b039092169350919084565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015610547573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056b9190611a75565b6001600160a01b0316336001600160a01b03161460009061059f5760405162461bcd60e51b81526004016104a19190611a92565b50610fa08111156105f25760405162461bcd60e51b815260206004820152601660248201527f546f6f206d616e7920616c6c6f6320706f696e7473210000000000000000000060448201526064016104a1565b6105fa610d4f565b806003838154811061060e5761060e611b3a565b90600052602060002090600402016001015460055461062d9190611b66565b6106379190611b7d565b600581905550806003838154811061065157610651611b3a565b9060005260206000209060040201600101819055505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e19190611a75565b6001600160a01b0316336001600160a01b0316146000906107155760405162461bcd60e51b81526004016104a19190611a92565b50610fa08211156107685760405162461bcd60e51b815260206004820152601660248201527f546f6f206d616e7920616c6c6f6320706f696e7473210000000000000000000060448201526064016104a1565b6107718161167f565b610779610d4f565b6000600654421161078c5760065461078e565b425b90508260055461079e9190611b7d565b600555604080516080810182526001600160a01b0393841681526020810194855290810191825260006060820181815260038054600181018255925291517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b6004909202918201805473ffffffffffffffffffffffffffffffffffffffff1916919095161790935592517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85c830155517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85d82015590517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85e90910155565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109119190611a75565b6001600160a01b0316336001600160a01b0316146000906109455760405162461bcd60e51b81526004016104a19190611a92565b5042600654116109975760405162461bcd60e51b815260206004820152600f60248201527f416c72656164792073746172746564000000000000000000000000000000000060448201526064016104a1565b4281116109e65760405162461bcd60e51b815260206004820152601460248201527f4e65772074696d6520696e20746865207061737400000000000000000000000060448201526064016104a1565b600655565b600060038381548110610a0057610a00611b3a565b6000918252602080832086845260048083526040808620338752909352919093208054929091029092019250831115610a7b5760405162461bcd60e51b815260206004820152601260248201527f496e73756666696369656e742066756e6473000000000000000000000000000060448201526064016104a1565b610a8484610b80565b6000816001015464e8d4a5100084600301548460000154610aa59190611b95565b610aaf9190611bb4565b610ab99190611b66565b8254909150610ac9908590611b66565b808355600384015464e8d4a5100091610ae29190611b95565b610aec9190611bb4565b60018301558015610b2b57610b2b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383611729565b8254610b41906001600160a01b03163386611729565b604051848152859033907ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568906020015b60405180910390a35050505050565b600060038281548110610b9557610b95611b3a565b9060005260206000209060040201905080600201544211610bb4575050565b80546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610bfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c209190611bd6565b905080610c3257504260029091015550565b6000610c42836002015442610e7d565b90506000600554846001015460025484610c5c9190611b95565b610c669190611b95565b610c709190611bb4565b905082610c828264e8d4a51000611b95565b610c8c9190611bb4565b8460030154610c9b9190611b7d565b60038501555050426002909201919091555050565b600060038281548110610cc557610cc5611b3a565b60009182526020808320858452600480835260408086203380885294528520805486825560018201969096559302018054909450919291610d12916001600160a01b039091169083611729565b604051818152849033907fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959060200160405180910390a350505050565b60035460005b81811015610d7657610d6681610b80565b610d6f81611bef565b9050610d55565b5050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df19190611a75565b6001600160a01b0316336001600160a01b031614600090610e255760405162461bcd60e51b81526004016104a19190611a92565b506001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b60006006548311610e9057600654610e92565b825b9250600654821080610ea657506007548310155b15610eb357506000610edb565b6007548211610ecd57610ec68383611b66565b9050610edb565b82600754610ec69190611b66565b92915050565b600354600080808080805b86811015610fa25760008181526004602090815260408083203384529091529020805490945015610f925760038181548110610f2a57610f2a611b3a565b90600052602060002090600402019250610f4381610b80565b6003830154845464e8d4a5100091610f5a91611b95565b610f649190611bb4565b9550836001015486610f769190611b66565b6001850187905594508415610f9257610f8f8583611b7d565b91505b610f9b81611bef565b9050610eec565b508015610fdd57610fdd6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383611729565b505050505050565b60035460609060008167ffffffffffffffff81111561100657611006611c0a565b60405190808252806020026020018201604052801561102f578160200160208202803683370190505b50905060005b828110156110915760008181526004602090815260408083206001600160a01b038916845290915290208054835184908490811061107557611075611b3a565b60209081029190910101525061108a81611bef565b9050611035565b509392505050565b600080600384815481106110af576110af611b3a565b60009182526020808320878452600480835260408086206001600160a01b038a8116885294528086209482029092016003810154815493516370a0823160e01b8152309381019390935290965093949291909116906370a0823190602401602060405180830381865afa15801561112a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114e9190611bd6565b905083600201544211801561116257508015155b156111d0576000611177856002015442610e7d565b905060006005548660010154600254846111919190611b95565b61119b9190611b95565b6111a59190611bb4565b9050826111b78264e8d4a51000611b95565b6111c19190611bb4565b6111cb9085611b7d565b935050505b6001830154835464e8d4a51000906111e9908590611b95565b6111f39190611bb4565b6111fd9190611b66565b979650505050505050565b60035460609060008167ffffffffffffffff81111561122957611229611c0a565b604051908082528060200260200182016040528015611252578160200160208202803683370190505b50905060005b828110156110915760006003828154811061127557611275611b3a565b60009182526020808320858452600480835260408086206001600160a01b038d8116885294528086209482029092016003810154815493516370a0823160e01b8152309381019390935290965093949291909116906370a0823190602401602060405180830381865afa1580156112f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113149190611bd6565b905083600201544211801561132857508015155b1561139657600061133d856002015442610e7d565b905060006005548660010154600254846113579190611b95565b6113619190611b95565b61136b9190611bb4565b90508261137d8264e8d4a51000611b95565b6113879190611bb4565b6113919085611b7d565b935050505b6001830154835464e8d4a51000906113af908590611b95565b6113b99190611bb4565b6113c39190611b66565b8686815181106113d5576113d5611b3a565b60200260200101818152505050505050806113ef90611bef565b9050611258565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611449573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146d9190611a75565b6001600160a01b0316336001600160a01b0316146000906114a15760405162461bcd60e51b81526004016104a19190611a92565b5042600754116114f35760405162461bcd60e51b815260206004820152600d60248201527f416c726561647920656e6465640000000000000000000000000000000000000060448201526064016104a1565b4281116115425760405162461bcd60e51b815260206004820152601860248201527f4e657720656e642074696d6520696e207468652070617374000000000000000060448201526064016104a1565b600755565b60006003838154811061155c5761155c611b3a565b6000918252602080832086845260048083526040808620338752909352919093209102909101915061158d84610b80565b6000816001015464e8d4a51000846003015484600001546115ae9190611b95565b6115b89190611bb4565b6115c29190611b66565b82549091506115d2908590611b7d565b808355600384015464e8d4a51000916115eb9190611b95565b6115f59190611bb4565b60018301558015611634576116346001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383611729565b825461164b906001600160a01b0316333087611859565b604051848152859033907f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a1590602001610b71565b60035460005b8181101561172457826001600160a01b0316600382815481106116aa576116aa611b3a565b60009182526020909120600490910201546001600160a01b031614156117125760405162461bcd60e51b815260206004820152601460248201527f506f6f6c20616c7265616479206578697374732100000000000000000000000060448201526064016104a1565b8061171c81611bef565b915050611685565b505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b179052915160009283929087169161179a9190611c20565b6000604051808303816000865af19150503d80600081146117d7576040519150601f19603f3d011682016040523d82523d6000602084013e6117dc565b606091505b50915091508180156118065750805115806118065750808060200190518101906118069190611c5b565b6118525760405162461bcd60e51b815260206004820152600f60248201527f5452414e534645525f4641494c4544000000000000000000000000000000000060448201526064016104a1565b5050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b17905291516000928392908816916118d29190611c20565b6000604051808303816000865af19150503d806000811461190f576040519150601f19603f3d011682016040523d82523d6000602084013e611914565b606091505b509150915081801561193e57508051158061193e57508080602001905181019061193e9190611c5b565b610fdd5760405162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c454400000000000000000000000060448201526064016104a1565b60006020828403121561199c57600080fd5b5035919050565b600080604083850312156119b657600080fd5b50508035926020909101359150565b6001600160a01b03811681146119da57600080fd5b50565b600080604083850312156119f057600080fd5b823591506020830135611a02816119c5565b809150509250929050565b600060208284031215611a1f57600080fd5b8135611a2a816119c5565b9392505050565b6020808252825182820181905260009190848201906040850190845b81811015611a6957835183529284019291840191600101611a4d565b50909695505050505050565b600060208284031215611a8757600080fd5b8151611a2a816119c5565b600060208083526000845481600182811c915080831680611ab457607f831692505b858310811415611ad257634e487b7160e01b85526022600452602485fd5b878601838152602001818015611aef5760018114611b0057611b2b565b60ff19861682528782019650611b2b565b60008b81526020902060005b86811015611b2557815484820152908501908901611b0c565b83019750505b50949998505050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082821015611b7857611b78611b50565b500390565b60008219821115611b9057611b90611b50565b500190565b6000816000190483118215151615611baf57611baf611b50565b500290565b600082611bd157634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611be857600080fd5b5051919050565b6000600019821415611c0357611c03611b50565b5060010190565b634e487b7160e01b600052604160045260246000fd5b6000825160005b81811015611c415760208186018101518583015201611c27565b81811115611c50576000828501525b509190910192915050565b600060208284031215611c6d57600080fd5b81518015158114611a2a57600080fdfea164736f6c634300080a000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 315,
        "contract": "contracts/launch/StakingPools.sol:StakingPools",
        "label": "UNAUTHORIZED",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 318,
        "contract": "contracts/launch/StakingPools.sol:StakingPools",
        "label": "authority",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IPanaAuthority)4575"
      },
      {
        "astId": 5505,
        "contract": "contracts/launch/StakingPools.sol:StakingPools",
        "label": "panaPerSecond",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 5512,
        "contract": "contracts/launch/StakingPools.sol:StakingPools",
        "label": "poolInfo",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_struct(PoolInfo)5500_storage)dyn_storage"
      },
      {
        "astId": 5519,
        "contract": "contracts/launch/StakingPools.sol:StakingPools",
        "label": "userInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5490_storage))"
      },
      {
        "astId": 5521,
        "contract": "contracts/launch/StakingPools.sol:StakingPools",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 5523,
        "contract": "contracts/launch/StakingPools.sol:StakingPools",
        "label": "startTime",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 5525,
        "contract": "contracts/launch/StakingPools.sol:StakingPools",
        "label": "endTime",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)5500_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)5500_storage",
        "encoding": "dynamic_array",
        "label": "struct StakingPools.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)4250": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPanaAuthority)4575": {
        "encoding": "inplace",
        "label": "contract IPanaAuthority",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)5490_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StakingPools.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)5490_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5490_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct StakingPools.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)5490_storage)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(PoolInfo)5500_storage": {
        "encoding": "inplace",
        "label": "struct StakingPools.PoolInfo",
        "members": [
          {
            "astId": 5493,
            "contract": "contracts/launch/StakingPools.sol:StakingPools",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)4250"
          },
          {
            "astId": 5495,
            "contract": "contracts/launch/StakingPools.sol:StakingPools",
            "label": "allocPoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5497,
            "contract": "contracts/launch/StakingPools.sol:StakingPools",
            "label": "lastRewardTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5499,
            "contract": "contracts/launch/StakingPools.sol:StakingPools",
            "label": "accPanaPerShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(UserInfo)5490_storage": {
        "encoding": "inplace",
        "label": "struct StakingPools.UserInfo",
        "members": [
          {
            "astId": 5487,
            "contract": "contracts/launch/StakingPools.sol:StakingPools",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5489,
            "contract": "contracts/launch/StakingPools.sol:StakingPools",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}