{
  "address": "0x8EE19fE0Da2c29bf864049b09997019781ab4Fe2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_PANA",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        }
      ],
      "name": "getKValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "k_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_baseValue",
          "type": "uint256"
        }
      ],
      "name": "getTotalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_baseValue",
          "type": "uint256"
        }
      ],
      "name": "valuation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc837e1bf0d33bc6a257715e61473a22385fe16f0f8ebda0c5051b20691303a6c",
  "receipt": {
    "to": null,
    "from": "0x2d494Cb0a923009C471B9512571048560a44556A",
    "contractAddress": "0x8EE19fE0Da2c29bf864049b09997019781ab4Fe2",
    "transactionIndex": 0,
    "gasUsed": "10738449",
    "logsBloom": "0x
    "blockHash": "0x1809eaf6491fe024f23da3faa2b626e2e682890a2aaeaf9436c22c2a7748b6dc",
    "transactionHash": "0xc837e1bf0d33bc6a257715e61473a22385fe16f0f8ebda0c5051b20691303a6c",
    "logs": [],
    "blockNumber": 12004986,
    "cumulativeGasUsed": "4738669",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1709AF1e73225E1a8BaC94D921d03449B9e331C6"
  ],
  "solcInputHash": "e0cf5b0272a43d8bcfbeb7c6531464a4",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_PANA\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"getKValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"k_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_baseValue\",\"type\":\"uint256\"}],\"name\":\"getTotalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseValue\",\"type\":\"uint256\"}],\"name\":\"valuation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bond/StandardBondingCalculator.sol\":\"PanaBondingCalculator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/bond/StandardBondingCalculator.sol\":{\"content\":\"/**\\n  * @notice \\n  * This bonding calculator is intended to return the final valuation of an LP token in terms \\n  * of the token with higher number of decimals from the pair. It may produce unexpected results\\n  * if that is not what is desired. Eg: If valuation is desired in terms of Pana, \\n  *  then the other token in the pair should have decimals less than or equal to Pana (i.e. 18)\\n  */   \\n// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.7.5;\\n\\nimport \\\"../libraries/SafeMath.sol\\\";\\nimport \\\"../libraries/FixedPoint.sol\\\";\\nimport \\\"../libraries/SafeERC20.sol\\\";\\n\\nimport \\\"../interfaces/IERC20Metadata.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IBondingCalculator.sol\\\";\\nimport \\\"../interfaces/IUniswapV2ERC20.sol\\\";\\nimport \\\"../interfaces/IUniswapV2Pair.sol\\\";\\n\\ncontract PanaBondingCalculator is IBondingCalculator {\\n    using FixedPoint for *;\\n    using SafeMath for uint256;\\n\\n    IERC20 internal immutable PANA;\\n\\n    constructor(address _PANA) {\\n        require(_PANA != address(0), \\\"Zero address: PANA\\\");\\n        PANA = IERC20(_PANA);\\n    }\\n\\n    function getKValue(address _pair) public view returns (uint256 k_) {        \\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(_pair).getReserves();\\n        k_ = reserve0.mul(reserve1);\\n    }\\n\\n    function getTotalValue(address _pair, uint256 _baseValue) public view returns (uint256 _value) {\\n        _value = getKValue(_pair).mul(10**9).div(_baseValue).sqrrt().mul(2);\\n    }\\n\\n    function valuation(address _pair, uint256 amount_, uint256 _baseValue) external view override returns (uint256 _value) {\\n        uint256 totalValue = getTotalValue(_pair, _baseValue);\\n        uint256 totalSupply = IUniswapV2Pair(_pair).totalSupply();\\n\\n        uint256 numerator = totalValue.mul(amount_);\\n\\n        // A multiplier to compensate for adjustments in the end\\n        uint256 m = 10;\\n        {\\n            uint256 token0 = IERC20Metadata(IUniswapV2Pair(_pair).token0()).decimals();\\n            uint256 token1 = IERC20Metadata(IUniswapV2Pair(_pair).token1()).decimals();\\n            uint256 pair = IERC20Metadata( _pair ).decimals();\\n            uint256 tokTotal = token0.add(token1);\\n\\n            /*\\n             *  Total supply calculated in Sushi may have different decimals than 18,\\n             *  but is always represented as 18 decimal. So it is necessary to factor \\n             *  this in for accurate calculations.\\n             */    \\n            uint256 totSupply = tokTotal.div(2);\\n            \\n            uint256 decimals;\\n\\n            if(token0 > token1) {\\n                decimals = token0.sub(token1);\\n            } else {\\n                decimals = token1.sub(token0);\\n            }\\n\\n            if(totSupply != pair) {\\n                decimals = decimals.sub(pair-totSupply);\\n            }\\n\\n            numerator = numerator.mul(10**decimals).mul(_baseValue).div(10**9);\\n\\n            /*\\n             *  3162277660168379331999 ~ sqrt(10) to be factored in when one \\n             *  of the tokens in the pair has odd number of decimals\\n             */\\n            if(tokTotal % 2 != 0){\\n\\n                if(numerator < (10**13)) {\\n                    // Avoids underflow for small numbers\\n                    numerator = numerator.mul(3162277660168379331999).div(10**22);\\n                } else {\\n                    // Avoids multiplication and fixed point fraction overflow\\n                    numerator = numerator.div(10**13).mul(3162277660168379331999).div(10**9);\\n                }\\n            }\\n            else {\\n                // Avoids fixed point fraction overflow for even decimal pairs\\n                numerator = numerator.div(10);\\n            }\\n        }\\n\\n        _value = FixedPoint.fraction(numerator, totalSupply).decode112().mul(m);\\n    }\\n}\",\"keccak256\":\"0x0b8697da9147ec8591d8a46229d84398f239896b66f9981400eb642113bdf427\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IBondingCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IBondingCalculator {\\n    function valuation( address pair_, uint amount_, uint256 _baseValue ) external view returns ( uint _value );\\n}\",\"keccak256\":\"0x09addbf72bc50d0614d505ca6902735ed9a5c396eac9fd857e45329c6a1c55dd\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa142440b0e1c51ece24b6d074ac883b34e1f33a2472773eeaaf4871875904d09\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IERC20Metadata is IERC20 {\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\",\"keccak256\":\"0x6dfa58ba4a241b2201f3ecb3ba26345ce4dd66f0a553f18b2a284341f5aacd72\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IUniswapV2ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IUniswapV2ERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\",\"keccak256\":\"0xa8bc04fe333cf795f2882098679f5026bccd6d10c173f94a6f7e9d5c064e9284\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IUniswapV2ERC20.sol\\\";\\n\\ninterface IUniswapV2Pair is IUniswapV2ERC20 {\\n    function token0() external pure returns (address);\\n    function token1() external pure returns (address);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function mint(address to) external returns (uint liquidity);\\n    function sync() external;\\n}\",\"keccak256\":\"0x0e0385d9326267b126aba359474a85dc44d8529d06e9b8841a99bfddecdd8d5e\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.7.5;\\n\\nimport \\\"./FullMath.sol\\\";\\n\\n\\nlibrary Babylonian {\\n\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\n        if (x == 0) return 0;\\n\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) {\\n            xx >>= 128;\\n            r <<= 64;\\n        }\\n        if (xx >= 0x10000000000000000) {\\n            xx >>= 64;\\n            r <<= 32;\\n        }\\n        if (xx >= 0x100000000) {\\n            xx >>= 32;\\n            r <<= 16;\\n        }\\n        if (xx >= 0x10000) {\\n            xx >>= 16;\\n            r <<= 8;\\n        }\\n        if (xx >= 0x100) {\\n            xx >>= 8;\\n            r <<= 4;\\n        }\\n        if (xx >= 0x10) {\\n            xx >>= 4;\\n            r <<= 2;\\n        }\\n        if (xx >= 0x8) {\\n            r <<= 1;\\n        }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return (r < r1 ? r : r1);\\n    }\\n}\\n\\nlibrary BitMath {\\n\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0, 'BitMath::mostSignificantBit: zero');\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n}\\n\\n\\nlibrary FixedPoint {\\n\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    struct uq144x112 {\\n        uint256 _x;\\n    }\\n\\n    uint8 private constant RESOLUTION = 112;\\n    uint256 private constant Q112 = 0x10000000000000000000000000000;\\n    uint256 private constant Q224 = 0x100000000000000000000000000000000000000000000000000000000;\\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\\n\\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\\n        return uint112(self._x >> RESOLUTION);\\n    }\\n\\n    function decode112with18(uq112x112 memory self) internal pure returns (uint) {\\n\\n        return uint(self._x) / 5192296858534827;\\n    }\\n    \\n    function decode112(uq112x112 memory self) internal pure returns (uint) {\\n\\n        return uint(self._x) / 5192296858534827628530496329220096;\\n    }\\n\\n    function fraction(uint256 numerator, uint256 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator > 0, 'FixedPoint::fraction: division by zero');\\n        if (numerator == 0) return FixedPoint.uq112x112(0);\\n\\n        if (numerator <= uint144(-1)) {\\n            uint256 result = (numerator << RESOLUTION) / denominator;\\n            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\\n            return uq112x112(uint224(result));\\n        } else {\\n            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\\n            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\\n            return uq112x112(uint224(result));\\n        }\\n    }\\n    \\n    // square root of a UQ112x112\\n    // lossy between 0/1 and 40 bits\\n    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\n        if (self._x <= uint144(-1)) {\\n            return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << 112)));\\n        }\\n\\n        uint8 safeShiftBits = 255 - BitMath.mostSignificantBit(self._x);\\n        safeShiftBits -= safeShiftBits % 2;\\n        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << safeShiftBits) << ((112 - safeShiftBits) / 2)));\\n    }\\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\\n    // reverts on overflow\\n    function mul(uq112x112 memory self, uint256 y) internal pure returns (uq144x112 memory) {\\n        uint256 z = 0;\\n        require(y == 0 || (z = self._x * y) / y == self._x, \\\"FixedPoint::mul: overflow\\\");\\n        return uq144x112(z);\\n    }\\n\\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\\n        return uint144(self._x >> RESOLUTION);\\n    }\\n}\",\"keccak256\":\"0xa8784ad6e6f98be5788e7de7b26df23aadd38e8b850044d6d36abdb51801b33f\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.7.5;\\n\\nlibrary FullMath {\\n    function fullMul(uint256 x, uint256 y) private pure returns (uint256 l, uint256 h) {\\n        uint256 mm = mulmod(x, y, uint256(-1));\\n        l = x * y;\\n        h = mm - l;\\n        if (mm < l) h -= 1;\\n    }\\n\\n    function fullDiv(\\n        uint256 l,\\n        uint256 h,\\n        uint256 d\\n    ) private pure returns (uint256) {\\n        uint256 pow2 = d & -d;\\n        d /= pow2;\\n        l /= pow2;\\n        l += h * ((-pow2) / pow2 + 1);\\n        uint256 r = 1;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        return l * r;\\n    }\\n\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 d\\n    ) internal pure returns (uint256) {\\n        (uint256 l, uint256 h) = fullMul(x, y);\\n\\n        uint256 mm = mulmod(x, y, d);\\n        if (mm > l) h -= 1;\\n        l -= mm;\\n\\n        if (h == 0) return l / d;\\n\\n        require(h < d, 'FullMath: FULLDIV_OVERFLOW');\\n        return fullDiv(l, h, d);\\n    }\\n}\\n\",\"keccak256\":\"0x99da15d5a821951f2b2f507e0f0129ce3ed3a87b6455c6b32c78980c0fdc1ed7\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\n\\n/// @notice Safe IERC20 and ETH transfer library that safely handles missing return values.\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/TransferHelper.sol)\\n/// Taken from Solmate\\nlibrary SafeERC20 {\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.approve.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        (bool success, ) = to.call{value: amount}(new bytes(0));\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n}\",\"keccak256\":\"0xbdd4f99088de7c23383b043055646de013b1312166a9bfa05e3995cdcf7ae022\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.7.5;\\n\\n\\n// TODO(zx): Replace all instances of SafeMath with OZ implementation\\nlibrary SafeMath {\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    // Only used in the  BondingCalculator.sol\\n    function sqrrt(uint256 a) internal pure returns (uint c) {\\n        if (a > 3) {\\n            c = a;\\n            uint b = add( div( a, 2), 1 );\\n            while (b < c) {\\n                c = b;\\n                b = div( add( div( a, b ), b), 2 );\\n            }\\n        } else if (a != 0) {\\n            c = 1;\\n        }\\n    }\\n\\n}\",\"keccak256\":\"0x45cfc2aa9d85df2add98d4e899d834c646e8ce7001b00ead65f07dbefbcebeef\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610c4c380380610c4c8339818101604052602081101561003357600080fd5b50516001600160a01b038116610085576040805162461bcd60e51b81526020600482015260126024820152715a65726f20616464726573733a2050414e4160701b604482015290519081900360640190fd5b606081901b6001600160601b0319166080526001600160a01b0316610b9a6100b260003950610b9a6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063490084ef146100465780636b3e22fc1461007e578063bd689a45146100aa575b600080fd5b61006c6004803603602081101561005c57600080fd5b50356001600160a01b03166100dc565b60408051918252519081900360200190f35b61006c6004803603604081101561009457600080fd5b506001600160a01b038135169060200135610176565b61006c600480360360608110156100c057600080fd5b506001600160a01b0381351690602081013590604001356101ad565b6000806000836001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561011a57600080fd5b505afa15801561012e573d6000803e3d6000fd5b505050506040513d606081101561014457600080fd5b5080516020909101516dffffffffffffffffffffffffffff918216935016905061016e8282610586565b949350505050565b60006101a660026101956101a18561019b633b9aca006101958a6100dc565b90610586565b906105e8565b61062a565b9392505050565b6000806101ba8584610176565b90506000856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156101f757600080fd5b505afa15801561020b573d6000803e3d6000fd5b505050506040513d602081101561022157600080fd5b5051905060006102318387610586565b90506000600a90506000886001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561027457600080fd5b505afa158015610288573d6000803e3d6000fd5b505050506040513d602081101561029e57600080fd5b50516040805163313ce56760e01b815290516001600160a01b039092169163313ce56791600480820192602092909190829003018186803b1580156102e257600080fd5b505afa1580156102f6573d6000803e3d6000fd5b505050506040513d602081101561030c57600080fd5b50516040805163d21220a760e01b8152905160ff90921692506000916001600160a01b038c169163d21220a7916004808301926020929190829003018186803b15801561035857600080fd5b505afa15801561036c573d6000803e3d6000fd5b505050506040513d602081101561038257600080fd5b50516040805163313ce56760e01b815290516001600160a01b039092169163313ce56791600480820192602092909190829003018186803b1580156103c657600080fd5b505afa1580156103da573d6000803e3d6000fd5b505050506040513d60208110156103f057600080fd5b50516040805163313ce56760e01b8152905160ff90921692506000916001600160a01b038d169163313ce567916004808301926020929190829003018186803b15801561043c57600080fd5b505afa158015610450573d6000803e3d6000fd5b505050506040513d602081101561046657600080fd5b505160ff16905060006104798484610695565b905060006104888260026105e8565b90506000848611156104a55761049e86866106ef565b90506104b2565b6104af85876106ef565b90505b8382146104c8576104c5818386036106ef565b90505b6104e2633b9aca0061019b8e6101958c600a87900a610586565b97506002830615610550576509184e72a0008810156105235761051c69021e19e0c9bab240000061019b8a68ab6d6b197541ae759f610586565b975061054b565b610548633b9aca0061019b68ab6d6b197541ae759f6101958c6509184e72a0006105e8565b97505b61055e565b61055b88600a6105e8565b97505b50505050505061057a816101956105758587610731565b6108b3565b98975050505050505050565b600082610595575060006105e2565b828202828482816105a257fe5b04146105df5760405162461bcd60e51b8152600401808060200182810382526021815260200180610b6d6021913960400191505060405180910390fd5b90505b92915050565b60006101a683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506108d3565b60006003821115610686575080600061064e6106478360026105e8565b6001610695565b90505b818110156106805780915061067961067261066c85846105e8565b83610695565b60026105e8565b9050610651565b50610690565b8115610690575060015b919050565b6000828201838110156105df576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60006101a683836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610984565b610739610b34565b600082116107785760405162461bcd60e51b8152600401808060200182810382526026815260200180610b476026913960400191505060405180910390fd5b8261079257506040805160208101909152600081526105e2565b71ffffffffffffffffffffffffffffffffffff831161083957600082607085901b816107ba57fe5b0490506001600160e01b03811115610819576040805162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604482015290519081900360640190fd5b6040518060200160405280826001600160e01b03168152509150506105e2565b6000610855846e010000000000000000000000000000856109de565b90506001600160e01b03811115610819576040805162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604482015290519081900360640190fd5b516e0100000000000000000000000000006001600160e01b039091160490565b6000818361095f5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561092457818101518382015260200161090c565b50505050905090810190601f1680156109515780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161096b57fe5b04905083858161097757fe5b0681850201851461016e57fe5b600081848411156109d65760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561092457818101518382015260200161090c565b505050900390565b60008060006109ed8686610a97565b91509150600084806109fb57fe5b868809905082811115610a0f576001820391505b918290039181610a2d57848381610a2257fe5b0493505050506101a6565b848210610a81576040805162461bcd60e51b815260206004820152601a60248201527f46756c6c4d6174683a2046554c4c4449565f4f564552464c4f57000000000000604482015290519081900360640190fd5b610a8c838387610ac4565b979650505050505050565b6000808060001984860990508385029250828103915082811015610abc576001820391505b509250929050565b60008181038216808381610ad457fe5b049250808581610ae057fe5b049450808160000381610aef57fe5b60028581038087028203028087028203028087028203028087028203028087028203028087028203029586029003909402930460010193909302939093010292915050565b6040805160208101909152600081529056fe4669786564506f696e743a3a6672616374696f6e3a206469766973696f6e206279207a65726f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a164736f6c6343000705000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063490084ef146100465780636b3e22fc1461007e578063bd689a45146100aa575b600080fd5b61006c6004803603602081101561005c57600080fd5b50356001600160a01b03166100dc565b60408051918252519081900360200190f35b61006c6004803603604081101561009457600080fd5b506001600160a01b038135169060200135610176565b61006c600480360360608110156100c057600080fd5b506001600160a01b0381351690602081013590604001356101ad565b6000806000836001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561011a57600080fd5b505afa15801561012e573d6000803e3d6000fd5b505050506040513d606081101561014457600080fd5b5080516020909101516dffffffffffffffffffffffffffff918216935016905061016e8282610586565b949350505050565b60006101a660026101956101a18561019b633b9aca006101958a6100dc565b90610586565b906105e8565b61062a565b9392505050565b6000806101ba8584610176565b90506000856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156101f757600080fd5b505afa15801561020b573d6000803e3d6000fd5b505050506040513d602081101561022157600080fd5b5051905060006102318387610586565b90506000600a90506000886001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561027457600080fd5b505afa158015610288573d6000803e3d6000fd5b505050506040513d602081101561029e57600080fd5b50516040805163313ce56760e01b815290516001600160a01b039092169163313ce56791600480820192602092909190829003018186803b1580156102e257600080fd5b505afa1580156102f6573d6000803e3d6000fd5b505050506040513d602081101561030c57600080fd5b50516040805163d21220a760e01b8152905160ff90921692506000916001600160a01b038c169163d21220a7916004808301926020929190829003018186803b15801561035857600080fd5b505afa15801561036c573d6000803e3d6000fd5b505050506040513d602081101561038257600080fd5b50516040805163313ce56760e01b815290516001600160a01b039092169163313ce56791600480820192602092909190829003018186803b1580156103c657600080fd5b505afa1580156103da573d6000803e3d6000fd5b505050506040513d60208110156103f057600080fd5b50516040805163313ce56760e01b8152905160ff90921692506000916001600160a01b038d169163313ce567916004808301926020929190829003018186803b15801561043c57600080fd5b505afa158015610450573d6000803e3d6000fd5b505050506040513d602081101561046657600080fd5b505160ff16905060006104798484610695565b905060006104888260026105e8565b90506000848611156104a55761049e86866106ef565b90506104b2565b6104af85876106ef565b90505b8382146104c8576104c5818386036106ef565b90505b6104e2633b9aca0061019b8e6101958c600a87900a610586565b97506002830615610550576509184e72a0008810156105235761051c69021e19e0c9bab240000061019b8a68ab6d6b197541ae759f610586565b975061054b565b610548633b9aca0061019b68ab6d6b197541ae759f6101958c6509184e72a0006105e8565b97505b61055e565b61055b88600a6105e8565b97505b50505050505061057a816101956105758587610731565b6108b3565b98975050505050505050565b600082610595575060006105e2565b828202828482816105a257fe5b04146105df5760405162461bcd60e51b8152600401808060200182810382526021815260200180610b6d6021913960400191505060405180910390fd5b90505b92915050565b60006101a683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506108d3565b60006003821115610686575080600061064e6106478360026105e8565b6001610695565b90505b818110156106805780915061067961067261066c85846105e8565b83610695565b60026105e8565b9050610651565b50610690565b8115610690575060015b919050565b6000828201838110156105df576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60006101a683836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610984565b610739610b34565b600082116107785760405162461bcd60e51b8152600401808060200182810382526026815260200180610b476026913960400191505060405180910390fd5b8261079257506040805160208101909152600081526105e2565b71ffffffffffffffffffffffffffffffffffff831161083957600082607085901b816107ba57fe5b0490506001600160e01b03811115610819576040805162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604482015290519081900360640190fd5b6040518060200160405280826001600160e01b03168152509150506105e2565b6000610855846e010000000000000000000000000000856109de565b90506001600160e01b03811115610819576040805162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604482015290519081900360640190fd5b516e0100000000000000000000000000006001600160e01b039091160490565b6000818361095f5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561092457818101518382015260200161090c565b50505050905090810190601f1680156109515780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161096b57fe5b04905083858161097757fe5b0681850201851461016e57fe5b600081848411156109d65760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561092457818101518382015260200161090c565b505050900390565b60008060006109ed8686610a97565b91509150600084806109fb57fe5b868809905082811115610a0f576001820391505b918290039181610a2d57848381610a2257fe5b0493505050506101a6565b848210610a81576040805162461bcd60e51b815260206004820152601a60248201527f46756c6c4d6174683a2046554c4c4449565f4f564552464c4f57000000000000604482015290519081900360640190fd5b610a8c838387610ac4565b979650505050505050565b6000808060001984860990508385029250828103915082811015610abc576001820391505b509250929050565b60008181038216808381610ad457fe5b049250808581610ae057fe5b049450808160000381610aef57fe5b60028581038087028203028087028203028087028203028087028203028087028203028087028203029586029003909402930460010193909302939093010292915050565b6040805160208101909152600081529056fe4669786564506f696e743a3a6672616374696f6e3a206469766973696f6e206279207a65726f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a164736f6c6343000705000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}